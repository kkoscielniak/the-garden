<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on</title><link>https://kkoscielniak.github.io/the-garden/</link><description>Recent content in Home on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kkoscielniak.github.io/the-garden/index.xml" rel="self" type="application/rss+xml"/><item><title>Mocking</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/mocking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/mocking/</guid><description>Mocking is used to enable testing modules that depend (as in dependency) on another modules, that we don&amp;rsquo;t want to really use, e.</description></item><item><title>Static Analysis</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/static-analysis/</guid><description>Static analysisÂ is a method of debugging that is done by automatically examining the source code without having to execute the program with tools like eslint, prettier, typescript, husky.</description></item><item><title>Code Coverage in Jest</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/configuring-jest/code-coverage-in-jest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/configuring-jest/code-coverage-in-jest/</guid><description>Use jest --coverage to generate coverage report after testing. The report in HTML will be saved in ./coverage directory. This directory should be included in .</description></item><item><title>Configuring Jest for testing JS applications</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications/</guid><description>This note goes through useful Jests features, without actually going to how to write tests.
process.env.NODE_ENV For testing process.</description></item><item><title>Custom Cypress commands</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/custom-cypress-cmds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/custom-cypress-cmds/</guid><description>We can append commands to cy object with usage of custom commands. This can be used for making reusable assertions, making HTTP requests directly etc.</description></item><item><title>cy.request fn</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/cy-request-fn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/cy-request-fn/</guid><description>We can use cy.request(req) to make HTTP calls directly from Cypress.
1 2 3 4 5 cy.request({ url: &amp;#39;http://localhost:3000/register&amp;#39;, method: &amp;#39;POST&amp;#39;, body: user, }); These requests are usually reusable and can be used as [[development/testing-javascript/cypress/custom-cypress-cmds]].</description></item><item><title>Debugging tests in Cypress</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/debugging-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/debugging-tests/</guid><description>To debug the test, we can use this Promise like syntax:
1 2 3 4 5 6 7 8 9 10 11 12 13 describe(&amp;#39;anonymous calculator&amp;#39;, () =&amp;gt; { it(&amp;#39;can make calculations&amp;#39;, () =&amp;gt; { /* [.</description></item><item><title>DOM Testing Library</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/dom-testing-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/dom-testing-library/</guid><description>DOM Testing Library is the simplest, yet complete testing utility. It&amp;rsquo;s a part of @testing-library family.
It&amp;rsquo;s possible to use DOM Testing Library to test in virtually any JS framework out there (yep, even jQuery), however it&amp;rsquo;s not that much practical.</description></item><item><title>First test in Cypress</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/first-cypress-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/first-cypress-test/</guid><description>[!tip] Keep in mind the tested application needs to be running in the background
1 2 3 4 5 6 7 8 9 10 describe(&amp;#39;anonymous calculator&amp;#39;, () =&amp;gt; { it(&amp;#39;can make calculations&amp;#39;, () =&amp;gt; { cy.</description></item><item><title>Fundamentals of testing with Cypress and Testing Library</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/configuring-cypress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/configuring-cypress/</guid><description>Cypress is a tool for E2E testing.
Internally Cypress is an application that runs natively on the computer, but is installed via npm/yarn.</description></item><item><title>Install React Dev Tools in Cypress</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/install-react-dev-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/install-react-dev-tools/</guid><description>If we run Cypress in Chrome-based browser that has the React Dev Tools extension installed, we still need to register the tested app in DevTools.</description></item><item><title>Integration tests using Testing Library</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/integration-tests-using-rtl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/integration-tests-using-rtl/</guid><description>The idea of integration test is to test an entire page, or maybe even an entire app by writing tests that navigate around the app as the normal user would.</description></item><item><title>Pyramid of Testing</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/pyramid-of-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/pyramid-of-testing/</guid><description> [[development/testing-javascript/static-analysis|Static analysis]] type errors and typs [[development/testing-javascript/jest/_index|Unit tests]] verifying that isolated parts of the system work as expected [[development/testing-javascript/jest/integration-tests-using-rtl|Integration tests]] verifying that several units work as intended when connected [[development/testing-javascript/cypress/_index|E2E]] (functional tests) army of robots that clicks around the app and verifies that the app works correctly as a whole system</description></item><item><title>Simple testing framework in JS</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/simple-testing-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/fundamentals/simple-testing-framework/</guid><description>Here&amp;rsquo;s an example of how the simple, jest-like testing framework would look like.
The simplest test The automated test in JS is a code that throws an Error if the assumption does not match the result (the result is unexpected).</description></item><item><title>TDD with UI in React Testing Library</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</guid><description>Normally using TDD with UI is really difficult because testing utilities for UI often tie your tests closely to the implementation.</description></item><item><title>Testing components with Jest and React Testing Library</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-components/</guid><description>New ways of using @testing-library/react Don&amp;rsquo;t return getBy... methods from render(&amp;lt;Component /&amp;gt;. Use screen export instead userEvent is better than fireEvent Use waitFor instead of wait.</description></item><item><title>Testing custom React hooks</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-hooks/</guid><description>Given the hook:
1 2 3 4 5 6 7 8 9 10 11 // useCounter.ts import * as React from &amp;#34;react&amp;#34;; function useCounter({ initialCount = 0, step = 1 } = {}) { const [count, setCount] = React.</description></item><item><title>Testing login flow in Cypress</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/testing-login-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/testing-login-flow/</guid><description>The simplest form of testing the login flow would be to make Cypress register, login and logout several times:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import {userBuilder} from &amp;#39;.</description></item><item><title>Testing React portals</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-portals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-portals/</guid><description>Given that we have a simple Modal component:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { useRef, useLayoutEffect } from &amp;#34;react&amp;#34;; import { createPortal } from &amp;#34;react-dom&amp;#34;; let modalRoot = document.</description></item><item><title>Testing Redux</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/testing-redux/</guid><description>Redux store setup We have the code to be tested as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // redux-reducer.</description></item><item><title>Testing registration flow in Cypress</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/testing-registration-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/cypress/testing-registration-flow/</guid><description>With E2E testing, there might be a situation we want to test a form by providing some data. However, the data we provided may already exist in the database.</description></item><item><title>Using fake data in tests</title><link>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/fake-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/testing-javascript/jest/fake-data/</guid><description>It&amp;rsquo;s actually better to generate data for tests than hardcoding it. The data itself is not important, so it doesn&amp;rsquo;t matter if the hardcoded string is Test title from the tests standpoint.</description></item></channel></rss>