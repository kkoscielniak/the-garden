<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on</title><link>https://koscielniak.pro/</link><description>Recent content in Home on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://koscielniak.pro/index.xml" rel="self" type="application/rss+xml"/><item><title>LFI CTF</title><link>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-1/</guid><description>Link to the exercise
Goal Capture Flag1 at /etc/flag1 using [[cybersecurity/knowledge/pentesting/LFI]].
Steps After spinning up the VM, I&amp;rsquo;ve opened the /challenges/chall1.</description></item><item><title>Package manager and SSH</title><link>https://koscielniak.pro/linux/pocketchip/packages-and-ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/linux/pocketchip/packages-and-ssh/</guid><description>Setting up package manager The Next Thing Co.&amp;rsquo;s package repository is dead for a long time, but one guy still mirrors them.</description></item><item><title>The Life-changing Magic of Tidying Up</title><link>https://koscielniak.pro/reading/notes/lifechanging-magic-of-tidying-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/reading/notes/lifechanging-magic-of-tidying-up/</guid><description>By Marie Kondo. 5/5. Amazon.
Lessons from this one (and from this Netflix&amp;rsquo;s piece) helped us to throw out ~15 bags of clutter right before our kiddo was born.</description></item><item><title>Filozofia Kaizen. Małymi krokami ku doskonałości 🇵🇱</title><link>https://koscielniak.pro/reading/notes/kaizen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/reading/notes/kaizen/</guid><description>By Robert Maurer. 3/5.
An introduction to the method of small steps. Too long for such a tiny topic. Wasn&amp;rsquo;t as informative as I thought.</description></item><item><title>Installing Web Browser</title><link>https://koscielniak.pro/linux/pocketchip/webbrowser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/linux/pocketchip/webbrowser/</guid><description>By default, Pocket C.H.I.P. is packed with firefox-esr, but right after starting it (which itself took, like, 30sec) the first tab crashed immediately, so probably it&amp;rsquo;s not the way to go.</description></item><item><title>LFI CTF 2</title><link>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-2/</guid><description>Link to the exercise
Goal Similarly to [[cybersecurity/write-ups/thm/lfi-ctf-1|LFI CTF #1]], the goal is to capture the flag at /etc/flag2 using [[cybersecurity/knowledge/pentesting/LFI]].</description></item><item><title>Mocking</title><link>https://koscielniak.pro/development/testing-javascript/mocking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/mocking/</guid><description>Mocking is used to enable testing modules that depend (as in dependency) on another modules, that we don&amp;rsquo;t want to really use, e.</description></item><item><title>LFI CTF 3</title><link>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-3/</guid><description>Link to the exercise
Goal Similarly to [[cybersecurity/write-ups/thm/lfi-ctf-1]] and [[cybersecurity/write-ups/thm/lfi-ctf-2]], the goal is to capture the flag at /etc/flag3 using [[cybersecurity/knowledge/pentesting/LFI]].</description></item><item><title>Static Analysis</title><link>https://koscielniak.pro/development/testing-javascript/static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/static-analysis/</guid><description>Static analysis is a method of debugging that is done by automatically examining the source code without having to execute the program with tools like eslint, prettier, typescript, husky.</description></item><item><title>Remote Code Execution CTF</title><link>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-rce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/thm/lfi-ctf-rce/</guid><description>Link to the exercise
Goal Contrary to [[cybersecurity/write-ups/thm/lfi-ctf-1]] and later ones, this CTF is about finding a flag hidden as a hostname with [[cybersecurity/knowledge/pentesting/RFI|Remote File Inclusion]].</description></item><item><title>/etc/hosts</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/etc-hosts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/etc-hosts/</guid><description>/etc/hosts file maps domain names to IP addresses.
In *nix:
1 /etc/hosts In Windows:
1 C:\Windows\system32\drivers\etc\hosts</description></item><item><title>Black hats</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/black-hats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/black-hats/</guid><description>A commonly used term for malicious hackers.
Out of respect for good hackers, it is advised to use these terms rather than the generic term hacker:</description></item><item><title>Blind XSS</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/blind-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/blind-xss/</guid><description>Blind XSS Blind XSS is similar to a [[cybersecurity/knowledge/pentesting/stored-xss]] in that your [[cybersecurity/knowledge/glossary/payload]] gets stored on the website for another user to view, but in this instance, you can&amp;rsquo;t see the payload working or be able to test it against yourself first.</description></item><item><title>Code Coverage in Jest</title><link>https://koscielniak.pro/development/testing-javascript/configuring-jest/code-coverage-in-jest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/configuring-jest/code-coverage-in-jest/</guid><description>Use jest --coverage to generate coverage report after testing. The report in HTML will be saved in ./coverage directory. This directory should be included in .</description></item><item><title>Command Injection</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/cmd-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/cmd-injection/</guid><description>Command injection is the abuse of an application&amp;rsquo;s behaviour to execute commands on the operating system. The webserver will process this code and execute it under the privileges and access controls of the user who is running that application (the app is running on a webserver by user).</description></item><item><title>Configuring Jest for testing JS applications</title><link>https://koscielniak.pro/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications/</guid><description>This note goes through useful Jests features, without actually going to how to write tests.
process.env.NODE_ENV For testing process.</description></item><item><title>Cross-site Scripting</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/XSS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/XSS/</guid><description>Cross-Site Scripting, is an injection attack where malicious JavaScript gets injected into a web application with the intention of being executed by other users.</description></item><item><title>CSIRT</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/CSIRT/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/CSIRT/</guid><description>Computer Security Incident Response Team is a prearranged group of employees with technical knowledge about the systems and/or [[cybersecurity/knowledge/pentesting/IR|incident]] that happened.</description></item><item><title>Custom Cypress commands</title><link>https://koscielniak.pro/development/testing-javascript/cypress/custom-cypress-cmds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/custom-cypress-cmds/</guid><description>We can append commands to cy object with usage of custom commands. This can be used for making reusable assertions, making HTTP requests directly etc.</description></item><item><title>cy.request fn</title><link>https://koscielniak.pro/development/testing-javascript/cypress/cy-request-fn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/cy-request-fn/</guid><description>We can use cy.request(req) to make HTTP calls directly from Cypress.
1 2 3 4 5 cy.request({ url: &amp;#34;http://localhost:3000/register&amp;#34;, method: &amp;#34;POST&amp;#34;, body: user, }); These requests are usually reusable and can be used as [[development/testing-javascript/cypress/custom-cypress-cmds]].</description></item><item><title>DBMS</title><link>https://koscielniak.pro/development/databases/glossary/DBMS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/databases/glossary/DBMS/</guid><description>Database Management System is a software that controls a database.
DBMS&amp;rsquo;s fall into two camps: Relational or Non-Relational.
A relational database, stores information in tables and often the tables have shared information between them, they use columns to specify and define the data being stored and rows to actually store the data.</description></item><item><title>Debugging tests in Cypress</title><link>https://koscielniak.pro/development/testing-javascript/cypress/debugging-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/debugging-tests/</guid><description>To debug the test, we can use this Promise like syntax:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 describe(&amp;#34;anonymous calculator&amp;#34;, () =&amp;gt; { it(&amp;#34;can make calculations&amp;#34;, () =&amp;gt; { /* [.</description></item><item><title>Digital Garden</title><link>https://koscielniak.pro/others/digital-garden/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/others/digital-garden/</guid><description>For the most part I just wing it ad hoc and hope for the best. 😅
~ Joel Hooks</description></item><item><title>Document Object Model</title><link>https://koscielniak.pro/development/web/glossary/DOM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/web/glossary/DOM/</guid><description>Document Object Model is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content.</description></item><item><title>DOM Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/fundamentals/dom-testing-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/fundamentals/dom-testing-library/</guid><description>DOM Testing Library is the simplest, yet complete testing utility. It&amp;rsquo;s a part of @testing-library family.
It&amp;rsquo;s possible to use DOM Testing Library to test in virtually any JS framework out there (yep, even jQuery), however it&amp;rsquo;s not that much practical.</description></item><item><title>DOM-based XSS</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/dom-based-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/dom-based-xss/</guid><description>[[development/web/glossary/DOM]] Based [[cybersecurity/knowledge/pentesting/XSS]] is where the JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code.</description></item><item><title>First test in Cypress</title><link>https://koscielniak.pro/development/testing-javascript/cypress/first-cypress-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/first-cypress-test/</guid><description>[!tip] Keep in mind the tested application needs to be running in the background
1 2 3 4 5 6 7 8 9 10 describe(&amp;#34;anonymous calculator&amp;#34;, () =&amp;gt; { it(&amp;#34;can make calculations&amp;#34;, () =&amp;gt; { cy.</description></item><item><title>flag_shop</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/flag_shop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/flag_shop/</guid><description>Link to the exercise
Steps The exercise uses a simple server application that allows buying the flag, but initially, we don&amp;rsquo;t have enough funds to do so.</description></item><item><title>Fundamentals of testing with Cypress and Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/cypress/configuring-cypress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/configuring-cypress/</guid><description>Cypress is a tool for E2E testing.
Internally Cypress is an application that runs natively on the computer, but is installed via npm/yarn.</description></item><item><title>GET aHEAD</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/GET-aHEAD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/GET-aHEAD/</guid><description>Link to the exercise
Steps First, I&amp;rsquo;ve opened the &amp;ldquo;server&amp;rdquo; application. What I saw were two buttons that changed the background color on click.</description></item><item><title>Hacktivism</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/hacktivism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/hacktivism/</guid><description>Hacktivists are activists that use their hacking skills to support social change, human rights, freedom of speech, or environmental causes. These are still cyberattacks.</description></item><item><title>HashingJobApp</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/HashingJobApp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/HashingJobApp/</guid><description>Link to the exercise
Steps This one is about using the md5 command to get a hash for provided string.</description></item><item><title>In-band</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/in-band/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/in-band/</guid><description>In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results</description></item><item><title>Incident Response</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/IR/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/IR/</guid><description>An incident is a breach of security. Actions taken to resolve and remediate the threat are known as Incident Response.</description></item><item><title>Information</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/Information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/Information/</guid><description>Link to the exercise
Steps First, I&amp;rsquo;ve checked the filetype with the file cat.jpeg command to check if I&amp;rsquo;m dealing with a JPG file for sure, as I remember in the [[Matryoshka Dolls Writeup|Matryoshka doll]] exercise, the attached dolls.</description></item><item><title>Install React Dev Tools in Cypress</title><link>https://koscielniak.pro/development/testing-javascript/cypress/install-react-dev-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/install-react-dev-tools/</guid><description>If we run Cypress in Chrome-based browser that has the React Dev Tools extension installed, we still need to register the tested app in DevTools.</description></item><item><title>Integration tests using Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/integration-tests-using-rtl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/integration-tests-using-rtl/</guid><description>The idea of integration test is to test an entire page, or maybe even an entire app by writing tests that navigate around the app as the normal user would.</description></item><item><title>Keyboard Maestro</title><link>https://koscielniak.pro/automation/keyboard-maestro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/automation/keyboard-maestro/</guid><description>Keyboard Maestro is an app that allows to automate tasks within macOS. Think: Shortcuts, but on steroids.
I call the Keyboard Maestro macros with hotkeys or with an extension for [[Raycast]], but some triggers can be automated as well, eg.</description></item><item><title>LFI/RFI prevention</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/lfi-rfi-prevention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/lfi-rfi-prevention/</guid><description>To prevent the file inclusion vulnerabilities ([[cybersecurity/knowledge/pentesting/LFI]] and [[cybersecurity/knowledge/pentesting/RFI]]) it&amp;rsquo;s wise to:
Keep system and services, including webapp frameworks, updated with the latest version Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information Use a Web Application Firewall (WAF) Disable some PHP features that cause file inclusion vulnerabilities if your web app doesn&amp;rsquo;t need them, eg allow_url_fopen and allow_url_include Carefully analyze the web application and allow only protocols and PHP wrappers that are in need Never trust user input and use input validation against file inclusion Implement whitelisting for file names and locations as well as blacklisting</description></item><item><title>Local File Inclusion</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/LFI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/LFI/</guid><description>Local File Inclusion attacks against web applications are often possible due to a developers&amp;rsquo; lack of security awareness.
With PHP, using functions such as include, require, include_once, and require_once often contribute to vulnerable web applications.</description></item><item><title>mus1c</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/mus1c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/mus1c/</guid><description>Link to the exercise
Steps After downloading and opening the lyrics.txt I saw somewhat cryptic lyrics of the song:</description></item><item><title>My favorite KM macro</title><link>https://koscielniak.pro/automation/favorite-km-macro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/automation/favorite-km-macro/</guid><description>I am a beginner music producer. I occasionally play with sample-based boombap beats trying to make something audible. Because of this hobby, my drive is full of jazzy cuts.</description></item><item><title>MySQL Cheatsheet</title><link>https://koscielniak.pro/development/databases/mysql-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/databases/mysql-cheatsheet/</guid><description>SQL (Structured Query Language) is a feature-rich language used for querying databases. These queries are better referred to as statements.</description></item><item><title>Null Byte Injection</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/null-byte/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/null-byte/</guid><description>Using Null Bytes is an injection technique where URL-encoded representation such as %00 or 0x00 in hex with user-supplied data to terminate strings (disregarding whatever comes after the Null Byte.</description></item><item><title>Path Traversal</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/path-traversal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/path-traversal/</guid><description>Path Traversal (aka Directory traversal or dot dot slash attack) is a web security vulnerability allowing an attacker to read operating system resources (e.</description></item><item><title>Payload</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/payload/</guid><description>A payload in malware (or hacking in general) is the part that does the actual damage to an infected computer.</description></item><item><title>plumbing</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/plumbing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/plumbing/</guid><description>Link to the exercise
Steps This one is really easy. I just needed to dump the output of nc &amp;lt;server address and port&amp;gt; to a text file and try to find picoCTF string in it 🤷‍♂️</description></item><item><title>Practical XSS example</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/practical-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/practical-xss/</guid><description>Let&amp;rsquo;s say we want to exploit a [[cybersecurity/knowledge/pentesting/blind-xss]] vulnerability we&amp;rsquo;ve found.
We have a Support Ticket system in which we may create tickets, which content textarea field is vulnerable to [[cybersecurity/knowledge/pentesting/XSS]].</description></item><item><title>Purple Team</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/purple-team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/purple-team/</guid><description>Sometimes companies will have a purple team.
Mix red and blue and you get purple!
~ Phillip L. Wylie, [[private/the-pentesters-blueprint|The Pentesters Blueprint]]</description></item><item><title>PW Crack 1</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-1/</guid><description>Link to the exercise
Steps I downloaded the level1.py (the script) and level1.flag.py.enc (the encrypted flag) files and opened the former with python.</description></item><item><title>PW Crack 2</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-2/</guid><description>Link to the exercise
Steps I downloaded the level2.py (the script) and level2.flag.py.enc (the encrypted flag) files and opened the former with python.</description></item><item><title>PW Crack 3</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-3/</guid><description>Link to the exercise
This one is similar, but a bit harder than [[cybersecurity/write-ups/picoCTF/pw-crack-1]] and [[cybersecurity/write-ups/picoCTF/pw-crack-2]].
Steps First I downloaded the files:</description></item><item><title>PW Crack 4</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-4/</guid><description>Link to the exercise
This one is basically the same as [[cybersecurity/write-ups/picoCTF/pw-crack-3]], the only difference is the possible passwords count.</description></item><item><title>PW Crack 5</title><link>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/write-ups/picoCTF/pw-crack-5/</guid><description>Link to the exercise
The final one of the PW Crack series.
Steps I began by downloading all the files and opened dictionary.</description></item><item><title>Pyramid of Testing</title><link>https://koscielniak.pro/development/testing-javascript/fundamentals/pyramid-of-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/fundamentals/pyramid-of-testing/</guid><description> [[development/testing-javascript/static-analysis|Static analysis]] type errors and typs [[development/testing-javascript/jest/_index|Unit tests]] verifying that isolated parts of the system work as expected [[development/testing-javascript/jest/integration-tests-using-rtl|Integration tests]] verifying that several units work as intended when connected [[development/testing-javascript/cypress/_index|E2E]] (functional tests) army of robots that clicks around the app and verifies that the app works correctly as a whole system</description></item><item><title>Red team</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/red-team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/red-team/</guid><description>Red team members (or red teamers) share similarities to [[cybersecurity/knowledge/pentesting/pentest|pentesters]], with a more targeted job role.
While the pentesters look to uncover many vulnerabilities across systems to keep cyber-defence in good standing, red teamers are enacted to test the company&amp;rsquo;s detection and response capabilities.</description></item><item><title>Red vs Blue Teams</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/red-vs-blue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/red-vs-blue/</guid><description>Both [[cybersecurity/knowledge/pentesting/red-team|red team]] and [[blue-team]] work toward improving an organization&amp;rsquo;s security, but they do so differently:
A red team plays the role of the attacker by trying to find vulnerabilities and break through cybersecurity defenses A blue team defends against attacks and responds to incidents when they occur.</description></item><item><title>Reflected XSS</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/reflected-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/reflected-xss/</guid><description>Reflected [[cybersecurity/knowledge/pentesting/XSS]] happens when user-supplied data in an HTTP request is included in the webpage source without any validation, e.g.</description></item><item><title>Regular Expressions Cheatsheet</title><link>https://koscielniak.pro/development/regexps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/regexps/</guid><description>Regular expression - a sequence of characters representing a pattern.
They are pretty hard to maintain:
If you&amp;rsquo;ll use regular expression to solve a problem, you&amp;rsquo;ll have two problems.</description></item><item><title>Remote File Inclusion</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/RFI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/RFI/</guid><description>Remote File Inclusion is a technique to include remote files and into a vulnerable application. Like [[cybersecurity/knowledge/pentesting/LFI|Local File Inclusion]], the RFI occurs when improperly sanitizing user input, allowing an attacker to inject an external URL into include function.</description></item><item><title>Rules of Engagement</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/ROE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/ROE/</guid><description>Rules of Engagement is a document that is created at the initial stages of a pentesting engagement. This document consists of three main sections, which are are ultimately responsible for deciding how the engagement is carried out.</description></item><item><title>Screenshots via SSH</title><link>https://koscielniak.pro/linux/screenshots-via-ssh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/linux/screenshots-via-ssh/</guid><description>To take a screenshot of another X session running:
1 DISPLAY=:0 scrot To download the screenshot via scp:</description></item><item><title>Security operations center</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/SOC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/SOC/</guid><description>1 ...</description></item><item><title>Server-side Request Forgery</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SSRF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SSRF/</guid><description>Server-side Request Forgery is a vulnerability that allows a malicious user to cause the webserver to make an additional or edited HTTP request to the resource of the attacker&amp;rsquo;s choosing.</description></item><item><title>Simple testing framework in JS</title><link>https://koscielniak.pro/development/testing-javascript/fundamentals/simple-testing-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/fundamentals/simple-testing-framework/</guid><description>Here&amp;rsquo;s an example of how the simple, jest-like testing framework would look like.
The simplest test The automated test in JS is a code that throws an Error if the assumption does not match the result (the result is unexpected).</description></item><item><title>SQLi</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SQLi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SQLi/</guid><description>[[development/DBs/mysql-cheatsheet|SQL]] Injection is an attack on a web application DB server that causes malicious queries to be executed through the input that hasn&amp;rsquo;t been properly validated.</description></item><item><title>Statement of Work</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SOW/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/SOW/</guid><description>Before a pentest starts, a formal discussion occurs between the pentester and the system owner.The tools, techniquest and targets are agreed on.</description></item><item><title>Stored XSS</title><link>https://koscielniak.pro/cybersecurity/knowledge/pentesting/stored-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/pentesting/stored-xss/</guid><description>The [[cybersecurity/knowledge/pentesting/XSS]] [[cybersecurity/knowledge/glossary/payload]] is stored on the web application (e.g. in a DB) and then gets run when other users visit the site or web page.</description></item><item><title>TDD with UI in React Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</guid><description>Normally using TDD with UI is really difficult because testing utilities for UI often tie your tests closely to the implementation.</description></item><item><title>Testing components with Jest and React Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-components/</guid><description>New ways of using @testing-library/react Don&amp;rsquo;t return getBy... methods from render(&amp;lt;Component /&amp;gt;. Use screen export instead userEvent is better than fireEvent Use waitFor instead of wait.</description></item><item><title>Testing custom React hooks</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-hooks/</guid><description>Given the hook:
1 2 3 4 5 6 7 8 9 10 11 // useCounter.ts import * as React from &amp;#34;react&amp;#34;; function useCounter({ initialCount = 0, step = 1 } = {}) { const [count, setCount] = React.</description></item><item><title>Testing login flow in Cypress</title><link>https://koscielniak.pro/development/testing-javascript/cypress/testing-login-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/testing-login-flow/</guid><description>The simplest form of testing the login flow would be to make Cypress register, login and logout several times:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { userBuilder } from &amp;#34;.</description></item><item><title>Testing React portals</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-portals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-portals/</guid><description>Given that we have a simple Modal component:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { useRef, useLayoutEffect } from &amp;#34;react&amp;#34;; import { createPortal } from &amp;#34;react-dom&amp;#34;; let modalRoot = document.</description></item><item><title>Testing Redux</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-redux/</guid><description>Redux store setup We have the code to be tested as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // redux-reducer.</description></item><item><title>Testing registration flow in Cypress</title><link>https://koscielniak.pro/development/testing-javascript/cypress/testing-registration-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/cypress/testing-registration-flow/</guid><description>With E2E testing, there might be a situation we want to test a form by providing some data. However, the data we provided may already exist in the database.</description></item><item><title>umask</title><link>https://koscielniak.pro/linux/glossary/umask/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/linux/glossary/umask/</guid><description>File creation mask</description></item><item><title>Using fake data in tests</title><link>https://koscielniak.pro/development/testing-javascript/jest/fake-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/fake-data/</guid><description>It&amp;rsquo;s actually better to generate data for tests than hardcoding it. The data itself is not important, so it doesn&amp;rsquo;t matter if the hardcoded string is Test title from the tests standpoint.</description></item><item><title>Vetting</title><link>https://koscielniak.pro/cybersecurity/knowledge/glossary/vetting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/cybersecurity/knowledge/glossary/vetting/</guid><description>Vetting is a screening process where applicant&amp;rsquo;s backgrounds are examined to establish the risk they pose to the organisation.</description></item></channel></rss>