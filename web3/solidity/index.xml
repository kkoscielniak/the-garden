<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Solidity on</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/</link><description>Recent content in Solidity on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kkoscielniak.github.io/the-garden/web3/solidity/index.xml" rel="self" type="application/rss+xml"/><item><title>address function</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/address/</guid><description> Description
address(this).balance is the balance of the contract itself.</description></item><item><title>approve fn</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/approve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/approve/</guid><description>The approve function is used to enable the user to approve the transfer (once the owner allows for that transfer first).</description></item><item><title>assert fn</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/assert/</guid><description>assertÂ is similar toÂ [[web3/solidity/require]]. The difference betweenÂ assertÂ andÂ requireÂ is thatÂ requireÂ will refund the user the rest of their gas when a function fails, whereasÂ assertÂ will not.</description></item><item><title>balanceOf function</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/balanceOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/balanceOf/</guid><description>In [[web3/solidity/_index]], the balanceOf function simply takes anÂ address, and returns how many tokens thatÂ addressÂ owns.
1 function balanceOf(address _owner) external view returns (uint256 _balance);</description></item><item><title>Comments</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/comments/</guid><description>The standard in the [[web3/solidity/_index]] community is to use a format calledÂ natspec, which looks like this:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 /// @title A contract for basic math operations /// @author H4XF13LD MORRIS ðŸ’¯ðŸ’¯ðŸ˜ŽðŸ’¯ðŸ’¯ /// @notice For now, this contract just adds a multiply function contract Math { /// @notice Multiplies 2 numbers together /// @param x the first uint.</description></item><item><title>dApp</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/dApps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/dApps/</guid><description>decentralised App is an application that can work autonomously, usually through [[web3/smart-contracts]] that lives on [[web3/blockchain]].
Contrary to the traditional, centralised apps a dApp can work without human&amp;rsquo;s intervention and is not a proprierty of anyone.</description></item><item><title>ether keyword</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/ether/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/ether/</guid><description>In [[web3/solidity/_index]] the ether keyword is used to represent monetary amounts (1 ether is equal to 1 ETH).</description></item><item><title>event</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/event/</guid><description>On a basic level, an event in [[web3/solidity/_index]] is a message the [[web3/smart-contracts]] throw out that can be captured in a client in real time.</description></item><item><title>function</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/function/</guid><description>In [[web3/solidity/_index]], function execution always needs to start with an external caller. A [[web3/smart-contracts|smart-contract]] will just sit on the blockchain doing nothing until someone calls one of its functions.</description></item><item><title>Hardhat</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/Hardhat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/Hardhat/</guid><description>Hardhat is a development environment for [[web3/smart-contracts]] that aids editing, compiling, debugging and deploying smart contracts and [[dApps]].
In practice it&amp;rsquo;s a local development enviroment for [[web3/solidity/_index]] that spins up the [[Ethereum network]] for development and gives you fake ETH, and fake test accounts to work with the smart contract being developed.</description></item><item><title>inheritance</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/inheritance/</guid><description>In [[web3/solidity/_index]], to inherit from a contract, use is keyword:
1 2 3 4 5 import &amp;#34;./zombieattack.sol&amp;#34;; contract ZombieOwnership is ZombieAttack { } It&amp;rsquo;s possible to inherit from multiple contracts as follows:</description></item><item><title>Libraries</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/libraries/</guid><description>In web3 ecosystem in general, libraries take form of the special types of [[web3/smart-contracts]] in [[web3/solidity/_index]].
[[SafeMath]] SafeMath library declaration example 1 2 3 4 5 6 7 8 9 library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c &amp;gt;= a); return c; } // .</description></item><item><title>mapping</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/mapping/</guid><description>Mapping is one of ways of storing organized data in [[web3/solidity/_index]].
It&amp;rsquo;s essentially a key-value store for storing and looking up data.</description></item><item><title>modifiers</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/modifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/modifiers/</guid><description> [[web3/solidity/payable]] [[web3/solidity/view]]</description></item><item><title>msg.sender</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/msg.sender/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/msg.sender/</guid><description>In [[web3/solidity/_index]] msg.sender is the wallet address of the person who called the function.</description></item><item><title>Overflows &amp; Underflows</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/overflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/overflows/</guid><description>Let&amp;rsquo;s say we have aÂ uint8, which can only have 8 bits. That means the largest number we can store is binaryÂ 11111111Â (or in decimal, 2^8 - 1 = 255).</description></item><item><title>ownerOf</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/ownerOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/ownerOf/</guid><description>In [[web3/solidity/_index]], the ownerOf function takes a token ID, and returns theÂ addressÂ of the person who owns it.
1 function ownerOf(uint256 _tokenId) external view returns (address _owner);</description></item><item><title>Ownership transfer in ERC721</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/erc721-ownership-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/erc721-ownership-transfer/</guid><description>Here&amp;rsquo;s an example of ownership transfer of the [[web3/ethereum/ERC721]] token (from CryptoZombies):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 contract ZombieOwnership is ZombieAttack, ERC721 { mapping (uint =&amp;gt; address) zombieApprovals; function balanceOf(address _owner) external view returns (uint256) { return ownerZombieCount[_owner]; } function ownerOf(uint256 _tokenId) external view returns (address) { return zombieToOwner[_tokenId]; } function _transfer(address _from, address _to, uint256 _tokenId) private { ownerZombieCount[_to]++; ownerZombieCount[_from]--; zombieToOwner[_tokenId] = _to; emit Transfer(_from, _to, _tokenId); } function transferFrom(address _from, address _to, uint256 _tokenId) external payable { require (zombieToOwner[_tokenId] == msg.</description></item><item><title>payable modifier</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/payable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/payable/</guid><description>payable denotes a function that can fund the [[web3/smart-contracts|contract]] and payout money from it to the users interacting with it.</description></item><item><title>pragma</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/pragma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/pragma/</guid><description>1 pragma solidity ^0.8.17; States the [[web3/solidity/_index]] version that should be used to compile the [[web3/smart-contracts|smart contract]] in [[Ethereum]] network.</description></item><item><title>require function</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/require/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/require/</guid><description>require [[web3/solidity/function]] checks if the condition passed as an argument is true.
If it&amp;rsquo;s not, the function will quit and the [[web3/transaction]] will cancel.</description></item><item><title>SafeMath</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/SafeMath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/SafeMath/</guid><description>SafeMath is a [[web3/solidity/libraries|library]] created by OpenZeppelin to make sure math operations won&amp;rsquo;t cause the [[web3/solidity/overflows]].
Example SafeMath attaches 4 functions â€”Â add,Â sub,Â mul, andÂ div to native data types.</description></item><item><title>State Variable</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/state-variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/state-variable/</guid><description>In [[web3/solidity/_index]] a state variable is the one that is stored permanently in contract storage.
State variables are declared outside of the scope of the function.</description></item><item><title>struct packing</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/struct-packing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/struct-packing/</guid><description>Normally there&amp;rsquo;s no benefit to using different sub-types of uints (uint8,Â uint16,Â uint32, etc.) because [[web3/solidity/_index]] reserves 256 bits of storage regardless of theÂ uintÂ size.</description></item><item><title>transferFrom function</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/transferFrom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/transferFrom/</guid><description>1 function transferFrom(address _from, address _to, uint256 _tokenId) external payable; The token&amp;rsquo;s owner callsÂ transferFromÂ with hisÂ addressÂ as theÂ _fromÂ parameter, theÂ addressÂ he wants to transfer to as theÂ _toÂ parameter, and theÂ _tokenIdÂ of the token he wants to transfer.</description></item><item><title>variable types</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/variables/</guid><description>In [[web3/solidity/_index]], there are two locations you can store variables â€” in storage and in memory.
storage variables are stored permanently on the [[blockchain]].</description></item><item><title>view function modifier</title><link>https://kkoscielniak.github.io/the-garden/web3/solidity/view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/web3/solidity/view/</guid><description>A view function modifier in [[web3/solidity/_index]] denotes a function used for reading data from the [[web3/smart-contracts|smart contract]].
When we read data from the smart contract, no [[web3/transaction]] is made and the [[web3/ethereum/gas-fee]] is not applied, since we&amp;rsquo;re not making any changes to the [[web3/blockchain]].</description></item></channel></rss>