<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web3 on</title><link>https://koscielniak.pro/web3/</link><description>Recent content in web3 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://koscielniak.pro/web3/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://koscielniak.pro/web3/ethereum/Untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/Untitled/</guid><description/></item><item><title/><link>https://koscielniak.pro/web3/moc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/moc/</guid><description>ABI Chainlink Decentralized Oracle Network Oracle QuickNode Single point of failure Smart contracts The API Connectivity problem Web3 learning resources blockchain crypto wallet transaction ethereum ERC721 standard Ethereum network methods Goerli Testnet burning tokens eth_accounts eth_requestAccounts gas fee tokens Untitled.</description></item><item><title/><link>https://koscielniak.pro/web3/solidity/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/security/</guid><description/></item><item><title>ABI</title><link>https://koscielniak.pro/web3/ABI/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ABI/</guid><description>By definition, an ABI (or Application Binary Interface) is the interface of interoperability of compiled software (hence binary).
In [[EVM]] [[web3/Smart contracts]] need to be compiled from e.</description></item><item><title>address function</title><link>https://koscielniak.pro/web3/solidity/address/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/address/</guid><description> Description
address(this).balance is the balance of the contract itself.</description></item><item><title>approve fn</title><link>https://koscielniak.pro/web3/solidity/approve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/approve/</guid><description>The approve function is used to enable the user to approve the transfer (once the owner allows for that transfer first).</description></item><item><title>assert fn</title><link>https://koscielniak.pro/web3/solidity/assert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/assert/</guid><description>assertÂ is similar toÂ [[web3/solidity/require]]. The difference betweenÂ assertÂ andÂ requireÂ is thatÂ requireÂ will refund the user the rest of their gas when a function fails, whereasÂ assertÂ will not.</description></item><item><title>balanceOf function</title><link>https://koscielniak.pro/web3/solidity/balanceOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/balanceOf/</guid><description>In [[Solidity]], the balanceOf function simply takes anÂ address, and returns how many tokens thatÂ addressÂ owns.
1 function balanceOf(address _owner) external view returns (uint256 _balance);</description></item><item><title>blockchain</title><link>https://koscielniak.pro/web3/blockchain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/blockchain/</guid><description>A blockchain has its [[distributed ledger]] nature, each node in the network has to be able to find the same end result given the same input.</description></item><item><title>Burning tokens</title><link>https://koscielniak.pro/web3/ethereum/burning-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/burning-token/</guid><description>[[web3/solidity/erc721-ownership-transfer|Transferring]] a token to 0 address is basically sending it to an address no one has the private key of, esentially making it unrecoverable.</description></item><item><title>Chainlink</title><link>https://koscielniak.pro/web3/Chainlink/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/Chainlink/</guid><description>Chainlink is the most widely-known [[web3/don|Decentralized Oracle Network]].
To be precise, Chainlink is a framework for DONs, and is a way to get data in from multiple sources across multiple oracles.</description></item><item><title>Comments</title><link>https://koscielniak.pro/web3/solidity/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/comments/</guid><description>The standard in the [[Solidity]] community is to use a format calledÂ natspec, which looks like this:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 /// @title A contract for basic math operations /// @author H4XF13LD MORRIS ðŸ’¯ðŸ’¯ðŸ˜ŽðŸ’¯ðŸ’¯ /// @notice For now, this contract just adds a multiply function contract Math { /// @notice Multiplies 2 numbers together /// @param x the first uint.</description></item><item><title>crypto wallet</title><link>https://koscielniak.pro/web3/crypto-wallet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/crypto-wallet/</guid><description>Connecting a wallet A crypto wallet can be connected to a web application to give it the permissions to call the [[web3/Smart contracts]] on our behalf.</description></item><item><title>Decentralized Oracle Network</title><link>https://koscielniak.pro/web3/don/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/don/</guid><description>DON (Decentralized OracleNetwork) is a group of independent [[web3/oracle|oracles]] that provide external data to the [[blockchain]].
Decentralized oracle networks eliminate any [[web3/single-point-of-failure]] in the [[web3/Smart contracts]] by utilizing multiple data inputs.</description></item><item><title>ERC721 standard</title><link>https://koscielniak.pro/web3/ethereum/ERC721/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/ERC721/</guid><description>ERC721 tokensÂ areÂ notÂ interchangeable and not divisable.
Each once is assumed to be unique (they have a unique ID). You can only trade them as a whole units.</description></item><item><title>eth_accounts</title><link>https://koscielniak.pro/web3/ethereum/eth_accounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/eth_accounts/</guid><description>eth_accounts is a special method that is used to see if you are authorized to access any of the accounts in the [[web3/crypto-wallet]].</description></item><item><title>eth_requestAccounts</title><link>https://koscielniak.pro/web3/ethereum/eth_requestAccounts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/eth_requestAccounts/</guid><description>eth_requestAccounts function is used to ask the [[web3/crypto-wallet]] to give the dApp the access to the user&amp;rsquo;s wallet.</description></item><item><title>ether keyword</title><link>https://koscielniak.pro/web3/solidity/ether/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/ether/</guid><description>In [[Solidity]] the ether keyword is used to represent monetary amounts (1 ether is equal to 1 ETH).</description></item><item><title>Ethereum network methods</title><link>https://koscielniak.pro/web3/ethereum/methods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/methods/</guid><description> [[web3/ethereum/eth_accounts]] [[web3/ethereum/eth_requestAccounts]]</description></item><item><title>ethers.js</title><link>https://koscielniak.pro/web3/frontend/ethers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/frontend/ethers/</guid><description>ethers.js is a library for interacting with an [[Ethereum network]] and its ecosystem.
[[web3/frontend/Signers]] [[Providers]] gasLimit In ethers it&amp;rsquo;s possible to limit how much of gas the users may pay for calling the function.</description></item><item><title>event</title><link>https://koscielniak.pro/web3/solidity/event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/event/</guid><description>On a basic level, an event in [[web3/solidity/Solidity]] is a message the [[web3/Smart contracts|smart contract]] throw out that can be captured in a client in real time.</description></item><item><title>Front-end development in web3</title><link>https://koscielniak.pro/web3/frontend/frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/frontend/frontend/</guid><description>Developing a front-end in web3 doesn&amp;rsquo;t differ much from the web2. The main difference is to use [[web3/crypto-wallet]] for authorization, authentication and interaction with the web application.</description></item><item><title>function</title><link>https://koscielniak.pro/web3/solidity/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/function/</guid><description>In [[Solidity]], function execution always needs to start with an external caller. A [[web3/Smart contracts|contract]] will just sit on the blockchain doing nothing until someone calls one of its functions.</description></item><item><title>gas fee</title><link>https://koscielniak.pro/web3/ethereum/gas-fee/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/gas-fee/</guid><description>In [[Ethereum network]] the gas is a fuel the [[dApps]] run on.
Every time the user executes a function on a [[Ethereum network]], he has to pay for it in ETH.</description></item><item><title>Goerli Testnet</title><link>https://koscielniak.pro/web3/ethereum/goerli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/goerli/</guid><description>GÃ¶rli Testnet is a testing [[Ethereum network]] run by Ethereum Foundation for testing the [[web3/smart-contracts]] being developed for free.</description></item><item><title>Hardhat</title><link>https://koscielniak.pro/web3/solidity/Hardhat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/Hardhat/</guid><description>Hardhat is a development environment for [[web3/Smart contracts]] that aids editing, compiling, debugging and deploying smart contracts and [[dApps]].</description></item><item><title>inheritance</title><link>https://koscielniak.pro/web3/solidity/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/inheritance/</guid><description>In [[web3/solidity/Solidity]], to inherit from a contract, use is keyword:
1 2 3 4 5 import &amp;#34;./zombieattack.sol&amp;#34;; contract ZombieOwnership is ZombieAttack { } It&amp;rsquo;s possible to inherit from multiple contracts as follows:</description></item><item><title>Libraries</title><link>https://koscielniak.pro/web3/solidity/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/libraries/</guid><description>In web3 ecosystem in general, libraries take form of the special types of [[web3/Smart contracts]] in [[Solidity]].
[[SafeMath]] SafeMath library declaration example 1 2 3 4 5 6 7 8 9 library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c &amp;gt;= a); return c; } // .</description></item><item><title>mapping</title><link>https://koscielniak.pro/web3/solidity/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/mapping/</guid><description>Mapping is one of ways of storing organized data in [[web3/solidity/Solidity]].
It&amp;rsquo;s essentially a key-value store for storing and looking up data.</description></item><item><title>modifiers</title><link>https://koscielniak.pro/web3/solidity/modifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/modifiers/</guid><description> [[web3/solidity/payable]] [[web3/solidity/view]]</description></item><item><title>msg.sender</title><link>https://koscielniak.pro/web3/solidity/msg.sender/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/msg.sender/</guid><description>In [[web3/solidity/Solidity]] msg.sender is the wallet address of the person who called the function.</description></item><item><title>Oracle</title><link>https://koscielniak.pro/web3/oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/oracle/</guid><description>An oracle is any entity or device that connects a deterministic [[web3/blockchain]] with [[off-chain]] data (and vice-versa).
Oracles are used to provide external data to the [[web3/Smart contracts]].</description></item><item><title>Overflows &amp; Underflows</title><link>https://koscielniak.pro/web3/solidity/overflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/overflows/</guid><description>Let&amp;rsquo;s say we have aÂ uint8, which can only have 8 bits. That means the largest number we can store is binaryÂ 11111111Â (or in decimal, 2^8 - 1 = 255).</description></item><item><title>ownerOf</title><link>https://koscielniak.pro/web3/solidity/ownerOf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/ownerOf/</guid><description>In [[web3/solidity/Solidity]], the ownerOf function takes a token ID, and returns theÂ addressÂ of the person who owns it.
1 function ownerOf(uint256 _tokenId) external view returns (address _owner);</description></item><item><title>Ownership transfer in ERC721</title><link>https://koscielniak.pro/web3/solidity/erc721-ownership-transfer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/erc721-ownership-transfer/</guid><description>Here&amp;rsquo;s an example of ownership transfer of the [[web3/ethereum/ERC721]] token (from CryptoZombies):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 contract ZombieOwnership is ZombieAttack, ERC721 { mapping (uint =&amp;gt; address) zombieApprovals; function balanceOf(address _owner) external view returns (uint256) { return ownerZombieCount[_owner]; } function ownerOf(uint256 _tokenId) external view returns (address) { return zombieToOwner[_tokenId]; } function _transfer(address _from, address _to, uint256 _tokenId) private { ownerZombieCount[_to]++; ownerZombieCount[_from]--; zombieToOwner[_tokenId] = _to; emit Transfer(_from, _to, _tokenId); } function transferFrom(address _from, address _to, uint256 _tokenId) external payable { require (zombieToOwner[_tokenId] == msg.</description></item><item><title>payable modifier</title><link>https://koscielniak.pro/web3/solidity/payable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/payable/</guid><description>payable denotes a function that can fund the [[web3/Smart contracts|contract]] and payout money from it to the users interacting with it.</description></item><item><title>pragma</title><link>https://koscielniak.pro/web3/solidity/pragma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/pragma/</guid><description>1 pragma solidity ^0.8.17; States the [[web3/solidity/Solidity]] version that should be used to compile the [[web3/Smart contracts|smart contract]] in [[Ethereum]] network.</description></item><item><title>Providers</title><link>https://koscielniak.pro/web3/frontend/Providers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/frontend/Providers/</guid><description>A Provider in [[web3/frontend/ethers]] is used to actually talk to [[Ethereum network]] nodes.</description></item><item><title>QuickNode</title><link>https://koscielniak.pro/web3/QuickNode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/QuickNode/</guid><description>QuickNode is an online service that enables you to deploy [[web3/Smart contracts]] to the real [[web3/blockchain|blockchains]].
QuickNode essentially helps us broadcast our contract creation transaction so that it can be picked up by miners as quickly as possible.</description></item><item><title>require function</title><link>https://koscielniak.pro/web3/solidity/require/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/require/</guid><description>require [[web3/solidity/function]] checks if the condition passed as an argument is true.
If it&amp;rsquo;s not, the function will quit and the [[web3/transaction]] will cancel.</description></item><item><title>SafeMath</title><link>https://koscielniak.pro/web3/solidity/SafeMath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/SafeMath/</guid><description>SafeMath is a [[web3/solidity/libraries|library]] created by OpenZeppelin to make sure math operations won&amp;rsquo;t cause the [[web3/solidity/overflows]].
Example SafeMath attaches 4 functions â€”Â add,Â sub,Â mul, andÂ div to native data types.</description></item><item><title>Signers</title><link>https://koscielniak.pro/web3/frontend/Signers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/frontend/Signers/</guid><description>In [[ethers]] a Signer is an abstraction of an [[Ethereum]] account, which can be used to sign transactions and send signed transactions to the [[Ethereum Network]] to execute state changing operations.</description></item><item><title>Single point of failure</title><link>https://koscielniak.pro/web3/single-point-of-failure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/single-point-of-failure/</guid><description>The single point of failure problem raises if the [[web3/Smart contracts]] use centralized [[web3/oracle]].
A centralized oracle means that one entity has the power over your smart contract, and your smart contract is now no better than a regular contract.</description></item><item><title>Smart contracts</title><link>https://koscielniak.pro/web3/smart-contracts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/smart-contracts/</guid><description>Smart contracts are programs which govern the behaviour of accounts within the Ethereum state.
In other words they can be treated as the server-side code with different API endpoints (functions) people can hit.</description></item><item><title>Solidity</title><link>https://koscielniak.pro/web3/solidity/Solidity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/Solidity/</guid><description>Solidity is one of programming languages for developing [[web3/Smart contracts]].</description></item><item><title>state variable</title><link>https://koscielniak.pro/web3/solidity/state-variable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/state-variable/</guid><description>In [[web3/solidity/Solidity]] a state variable is the one that is stored permanently in contract storage.
State variables are declared outside of the scope of the function.</description></item><item><title>struct packing</title><link>https://koscielniak.pro/web3/solidity/struct-packing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/struct-packing/</guid><description>Normally there&amp;rsquo;s no benefit to using different sub-types of uints (uint8,Â uint16,Â uint32, etc.) because [[web3/solidity/Solidity]] reserves 256 bits of storage regardless of theÂ uintÂ size.</description></item><item><title>The API Connectivity problem</title><link>https://koscielniak.pro/web3/api-connectivity-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/api-connectivity-problem/</guid><description>Due to the deterministic nature of the [[web3/blockchain]] we can&amp;rsquo;t use APIs in the [[web3/Smart contracts]] directly.
If we&amp;rsquo;d want to send a variable amount based on the price of ETH to Alice from Bobâ€™s account, we&amp;rsquo;d have our contract call an API to get the price of ETH and then send that amount to Bob.</description></item><item><title>tokens</title><link>https://koscielniak.pro/web3/ethereum/tokens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/ethereum/tokens/</guid><description>AÂ tokenÂ on [[Ethereum]] is basically just a [[web3/Smart contracts|smart contract]] that implements a standard set of functions that all other token contracts share, such as:</description></item><item><title>transaction</title><link>https://koscielniak.pro/web3/transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/transaction/</guid><description>Every function that is called on the blockchain is considered a transaction which means the [[web3/ethereum/gas-fee]] is applicable (unless the function is a [[view]]).</description></item><item><title>transferFrom function</title><link>https://koscielniak.pro/web3/solidity/transferFrom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/transferFrom/</guid><description>1 function transferFrom(address _from, address _to, uint256 _tokenId) external payable; The token&amp;rsquo;s owner callsÂ transferFromÂ with hisÂ addressÂ as theÂ _fromÂ parameter, theÂ addressÂ he wants to transfer to as theÂ _toÂ parameter, and theÂ _tokenIdÂ of the token he wants to transfer.</description></item><item><title>variable types</title><link>https://koscielniak.pro/web3/solidity/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/variables/</guid><description>In [[web3/solidity/Solidity]], there are two locations you can store variables â€” in storage and in memory.
storage variables are stored permanently on the [[blockchain]].</description></item><item><title>view function modifier</title><link>https://koscielniak.pro/web3/solidity/view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/solidity/view/</guid><description>A view function modifier in [[web3/solidity/Solidity]] denotes a function used for reading data from the [[web3/Smart contracts|smart contract]].
When we read data from the smart contract, no [[web3/transaction]] is made and the [[web3/ethereum/gas-fee]] is not applied, since we&amp;rsquo;re not making any changes to the [[web3/blockchain]].</description></item><item><title>Web3 learning resources</title><link>https://koscielniak.pro/web3/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/web3/resources/</guid><description>Whitepapers Bitcoin Whitepaper In Polish ðŸ‡µðŸ‡± Ethereum Whitepaper In Polish ðŸ‡µðŸ‡± Articles Get started Building Web3 Apps with Cloudflare https://cf-web3.</description></item></channel></rss>