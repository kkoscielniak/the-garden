<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Object-Oriented Programming on</title><link>https://koscielniak.pro/development/oop/</link><description>Recent content in Object-Oriented Programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://koscielniak.pro/development/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>Abstraction</title><link>https://koscielniak.pro/development/oop/abstraction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/abstraction/</guid><description>One of the core principles of [[development/oop/_index|OOP]].
Abstraction is a rule stating that we should reduce the complexity of the class by hiding its unnecessary details (e.</description></item><item><title>Coupling</title><link>https://koscielniak.pro/development/oop/coupling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/coupling/</guid><description>Coupling determines how much a class is dependent on another classes. For example we may have the Main class that uses User class (meaning that Main class is coupled or dependent on User)</description></item><item><title>Encapsulation</title><link>https://koscielniak.pro/development/oop/encapsulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/encapsulation/</guid><description>One of the core concepts of [[development/oop/_index|OOP]].
Encapsulation is about preventing the classes that create an instance of another class to change the state of this instance directly.</description></item><item><title>Inheritance</title><link>https://koscielniak.pro/development/oop/inheritance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/inheritance/</guid><description>Another [[development/oop/_index|OOP]] core principle.
Inheritance is about derivating the common behavior of different classes from a parent class that implements that particular behavior (e.</description></item><item><title>Interface</title><link>https://koscielniak.pro/development/oop/interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/interface/</guid><description>An interface is a contract that specifies the capabilities that a class implementing this interface should provide.
[!tip] Use shortcuts</description></item><item><title>Polymorphism</title><link>https://koscielniak.pro/development/oop/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/polymorphism/</guid><description>Yet another [[development/oop/_index|OOP]] core principle.
Polymorphism (&amp;ldquo;many forms&amp;rdquo;) allows us to create an object that may take many forms thanks to declaring abstract methods (the ones that don&amp;rsquo;t have a body) in the abstract class.</description></item><item><title>Single Responsibility Principle</title><link>https://koscielniak.pro/development/oop/srp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/srp/</guid><description>Every class in the codebase should have only one responsibility.
See also [[SOLID]]</description></item><item><title>SOLID</title><link>https://koscielniak.pro/development/oop/SOLID/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/SOLID/</guid><description>/* [...] */</description></item><item><title>Unified Modeling Language</title><link>https://koscielniak.pro/development/oop/UML/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/oop/UML/</guid><description>UML is a language used to represent the classes and the relationship between them.
1 2 3 4 5 Shape --- - positionX: int --- + render() - - private method/field + - public method/field Types of relationship It&amp;rsquo;s kinda tricky to describe with text only ðŸ˜… It&amp;rsquo;s fine for now tho.</description></item></channel></rss>