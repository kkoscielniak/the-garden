<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing with Jest on</title><link>https://koscielniak.pro/development/testing-javascript/jest/</link><description>Recent content in Testing with Jest on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://koscielniak.pro/development/testing-javascript/jest/index.xml" rel="self" type="application/rss+xml"/><item><title>Integration tests using Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/integration-tests-using-rtl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/integration-tests-using-rtl/</guid><description>The idea of integration test is to test an entire page, or maybe even an entire app by writing tests that navigate around the app as the normal user would.</description></item><item><title>TDD with UI in React Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/tdd-with-ui-in-testing-library/</guid><description>Normally using TDD with UI is really difficult because testing utilities for UI often tie your tests closely to the implementation.</description></item><item><title>Testing components with Jest and React Testing Library</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-components/</guid><description>New ways of using @testing-library/react Don&amp;rsquo;t return getBy... methods from render(&amp;lt;Component /&amp;gt;. Use screen export instead userEvent is better than fireEvent Use waitFor instead of wait.</description></item><item><title>Testing custom React hooks</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-hooks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-hooks/</guid><description>Given the hook:
1 2 3 4 5 6 7 8 9 10 11 // useCounter.ts import * as React from &amp;#34;react&amp;#34;; function useCounter({ initialCount = 0, step = 1 } = {}) { const [count, setCount] = React.</description></item><item><title>Testing React portals</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-portals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-portals/</guid><description>Given that we have a simple Modal component:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { useRef, useLayoutEffect } from &amp;#34;react&amp;#34;; import { createPortal } from &amp;#34;react-dom&amp;#34;; let modalRoot = document.</description></item><item><title>Testing Redux</title><link>https://koscielniak.pro/development/testing-javascript/jest/testing-redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/testing-redux/</guid><description>Redux store setup We have the code to be tested as follows:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // redux-reducer.</description></item><item><title>Using fake data in tests</title><link>https://koscielniak.pro/development/testing-javascript/jest/fake-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://koscielniak.pro/development/testing-javascript/jest/fake-data/</guid><description>It&amp;rsquo;s actually better to generate data for tests than hardcoding it. The data itself is not important, so it doesn&amp;rsquo;t matter if the hardcoded string is Test title from the tests standpoint.</description></item></channel></rss>