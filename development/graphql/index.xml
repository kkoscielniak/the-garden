<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL on</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/</link><description>Recent content in GraphQL on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://kkoscielniak.github.io/the-garden/development/graphql/index.xml" rel="self" type="application/rss+xml"/><item><title>Apollo Client</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/apollo-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/apollo-client/</guid><description>Theorethically to access data from GraphQL Server, we could use only use fetch.
However, @apollo/client is way more convinient.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { ApolloClient, InMemoryCache, ApolloProvider, gql, } from &amp;#34;@apollo/client&amp;#34;; import App from &amp;#34;.</description></item><item><title>Caching in Apollo Client</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/caching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/caching/</guid><description>Caching is enabled by default in [[development/graphql/apollo-client]]. Occasionally it may provide erroneous responses.
queryDeduplication Apollo Client by default dedupes the queries if the same query is used subsequentially in very short periods of time.</description></item><item><title>GraphQL Document</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/document/</guid><description>The queries written in one file are called a GraphQL Document:
1 2 3 4 5 6 7 8 9 10 queryGetSomeRandomStuff{greetingpirandomDiceThrowinterestingUrls}queryGetGreeting{greeting} To get data from the server we need to define which query we want to run.</description></item><item><title>GraphQL Documentation</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/docs/</guid><description>Most of the Documentation for our server can be generated automatically.
However, we can enrich it (with Markdown):
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 typeOurQuery{&amp;#34;A simple greeting&amp;#34;greeting:String!</description></item><item><title>GraphQL Queries</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/queries/</guid><description>If we create such query:
1 2 3 4 5 6 {greetinginterestingUrlspirandomDiceThrow} We&amp;rsquo;ll get data in such form:</description></item><item><title>GraphQL Server</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/server/</guid><description>Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 const { ApolloServer, gql } = require(&amp;#34;apollo-server&amp;#34;); // Query is a plain object with `greeting` property const typeDefs = gql` type Query { greeting: String randomDiceThrow: Int } `; // if we pass rootValue which shape matches the typeDefs // the server will handle the data out-of-the-box // making `rootValue` a function ensures that data will be returned dynamically (and not calculated once and cached) const rootValue = () =&amp;gt; ({ greeting: &amp;#34;Hello world!</description></item><item><title>typeDefs</title><link>https://kkoscielniak.github.io/the-garden/development/graphql/typeDefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kkoscielniak.github.io/the-garden/development/graphql/typeDefs/</guid><description>typeDefs is a contract between the client and the [[server]], stating that, eg. the server can return data about greeting that&amp;rsquo;s of type String:</description></item></channel></rss>