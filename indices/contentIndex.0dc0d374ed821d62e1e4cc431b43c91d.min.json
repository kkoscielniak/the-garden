{"/":{"title":"Home","content":"\n## `whoami`\n\nMy name is Krystian Ko≈õcielniak.¬†I‚Äôm a proud husband and father to a sneaky toddler.\n\nI [write code](https://github.com/kkoscielniak)¬†for a living, currently at [Pickatale](https://pickatale.com/). Whenever I am not doing that or looking after my kiddo‚Äô, I [read](https://koscielniak.pro/books/books), play video games or try to make sample-based boombap beats.\n\n## What's this place?\n\nThis is my¬†_**digital garden**_, my own corner in the web for sharing what I learn in public.\n\nIt's pretty empty at the moment, as I am going through a bit of maintenance.\n\n## Wanna talk? \nJust drop me \u003ca href=\"mailto:krystiankoscielniak@proton.me\"\u003ean email\u003c/a\u003e, or DM me on [Insta](https://instagram.com/pankoscielniak). I don‚Äôt check LinkedIn a lot.","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/automation/":{"title":"Automation","content":"\u003e Every great software developer now has an army of robots working for him at nighttime while he or she sleeps, after they‚Äôve written the code, and it‚Äôs cranking away.   \n\u003e ~ Naval Ravikant\n\nI tend to automate mundane and repetitive tasks as often as possible through both software and hardware. This, however, is a pretty complex world, so my toolkit and knowledge are limited atm. \n\n## Tools I use\n- [[automation/keyboard-maestro|Keyboard Maestro]]\n- Elgato Stream Deck\n- BetterTouchTool\n- Raycast\n- Shortcuts (iOS)","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/automation/favorite-km-macro":{"title":"My favorite KM macro","content":"\n~~I am a beginner music producer.~~ I occasionally play with sample-based boombap beats trying to make something audible. Because of this hobby, my drive is full of jazzy cuts. I wanted to have them synced on my [[MPC Live]] SSD so I can access them in the standalone mode (without the computer connected).\n\nThis was bothersome, because most of the time, whenever the inspiration hit or I had a minute to tinker with music, I needed to connect the MPC to the computer, manually copy the sample packs I've downloaded to the precise location on my MPC SSD, keeping in mind the naming scheme, directory structure, etc. instead of making music.\n\nFortunately, [[automation/keyboard-maestro|Keyboard Maestro]] has this feature to trigger a macro once the drive is attached, and the macro itself can be a command line. This way I can automate the process (to some extent) to sync the `~/Desktop/Beatmaker` directory to my MPC Live. \n\n\u003e [!tip] Note to self: Buy Hazel\n\u003e\n\u003eThis could be automated even more with [Hazel](https://www.noodlesoft.com/) - I could automate the process of unarchiving and putting samples in `Beatmaker/` directory. \n\n## How to\n\nThanks to [[tools/terminal/rsync|`rsync`]] CLI tool, I can sync samples from my computer to the target device pretty easily without having to remove/copy the content that is already on my MPC. \n\n\u003e [!caution] One way syncing\n\u003e \n\u003e `rsync` is great for _one way_ synchronisation. It completely ignores what happens in the target directory, so the one I have on my computer is the _source of truth_ here. \n\nThe macro goes like that. Once the USB device that has `MPC` in name is attached, the following actions are triggered: \n\n1. Cancel all other macros \n\t- for some reason, MPC mounts and dismounts few times once connected to Mac. Because of that the macro would run few times and I don't like that. I'm cancelling other macros to make sure `rsync` would run once\n\t- This may be tricky to handle once I have more different macros running in the background, but for now it works perfectly\n2. Wait until the `/Volumes/MPC SSD` directory is mounted (_a folder exists_)\n3. Execute this command: \n   ```zsh\n   rsync -aP ~/Desktop/Beatmaker/ /Volumes/MPC\\ SSD/Beatmaker_sync\n   ```\n\nThe results should be shown in Keyboard Maestro's command output window (so I am sure everything went fine). \n\nThe final macro looks like that:\n![[assets/Screenshot 2022-10-22 at 14.57.49.png]]\n## Summary\nWith new every macro made, I see how much of what I did in front of my computer was mundane, senseless and completely repetible. I am amazed of much of that I can automate by using just one tool.\n\nBy the way, during this write-up, I‚Äôve created another 2 macros - the one that sorts the currently selected lines, so I can sort tags in my Obsidian notes and the one that converts Markdown to Rich Text. **This tool is fucking awesome.**","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/automation/keyboard-maestro":{"title":"Keyboard Maestro","content":"[Keyboard Maestro](https://www.keyboardmaestro.com) is an app that allows to automate tasks within macOS. Think: Shortcuts, but on steroids. \n\nI call the Keyboard Maestro macros with hotkeys or with an extension for [[Raycast]], but some triggers can be automated as well, eg. connecting an USB device.\n\n\u003e [!info] In progress\n\u003e\n\u003e I am still learning how to use KM. Hence, my automations are pretty limited at the moment. \n\n## Things I automate\n- googling the selected text with **‚åò ‚áß 1**\n- opening Google Maps with the route and ETA to provided destination\n- text expanding\n\t- e.g. by typing `;invoice` I make KM to type full message of my typical invoice e-mail\n- translating selected text\n- opening my favorites directories in Finder from everywhere\n- [[automation/favorite-km-macro|copying samples to my MPC Live]] once I connect it to my computer\n- sorting\n- etc. etc. \n\nEven though these examples are basic, it feels right to automate these activities. I've learnt a lot about the application itself whan I was making these scenarios.\n\n## Resources\n- [An online course I've learned Keyboard Maestros basics from](https://eduweb.pl/marketing-i-biznes/biznes/keyboard-maestro-automatyzacja-macos) üáµüá±","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/":{"title":"Cybersecurity","content":"","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/":{"title":"Write-Ups","content":"\nLately, I've been going through some cybersecurity basics with _Capture The Flags_. This directory keeps the write-ups for them. ","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/":{"title":"picoCTF","content":"","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/GET-aHEAD":{"title":"GET aHEAD","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/132)\n\n## Steps \nFirst, I've opened the \"server\" application. What I saw were two buttons that changed the background color on click. From the source code I got to know that a background color to set was determined by the request method: \n- `GET /index.php` to the red background\n- `POST /index.php` to the blue one\n\nUsing [Burp Suite] I've intercepted the requests and changed their method type. First I tried the `PUT` method, which made the background white. But it wasn't enough to solve the puzzle. I tried to use `DELETE` then with the same results. \n\nA bit bummed I took a look at the exercise name, and even though I never heard of the [`HEAD` request method](https://reqbin.com/Article/HttpHead) before, I tried to use that. Bingo üòÅ\n\nUltimately, the flag was hidden in the `HEAD /index.php` request-response. \n\n## Flag\nI don't remember and I closed Burp Suite already üòÖ","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/HashingJobApp":{"title":"HashingJobApp","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/243)\n\n## Steps \nThis one is about using the `md5` command to get a hash for provided string. I needed to do that 3 times. \n\nTo find an md5 hash of a string: \n```sh\n$ md5 -s \u003cstring\u003e\n```\n\nSimple as that. \n\n## Flag\n`picoCTF{4ppl1c4710n_r3c31v3d_674c1de2}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/Information":{"title":"Information","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/186)\n\n## Steps\nFirst, I've checked the filetype with the `file cat.jpeg` command to check if I'm dealing with a JPG file for sure, as I remember in the [[Matryoshka Dolls Writeup|Matryoshka doll]] exercise, the attached `dolls.jpg` was, in fact, a PNG.\n\n```\ncat.jpeg: JPEG image data, JFIF standard 1.02, aspect ratio, density 1x1, segment length 16, baseline, precision 8, 2560x1598, components 3\n```\n\nThen I tried to check for embedded files inside with `binwalk -e cat.jpeg`, but without results. The `strings` command didn't provide anything valuable either. \n\nI forgot to check the EXIF data, so I went with `exiftool cat.jpeg` which responded with:\n\n```\nExifTool Version Number         : 12.30\nFile Name                       : cat.jpeg\nDirectory                       : .\nFile Size                       : 858 KiB\nFile Modification Date/Time     : 2022:04:21 15:19:08+02:00\nFile Access Date/Time           : 2022:04:21 15:28:52+02:00\nFile Inode Change Date/Time     : 2022:04:21 15:19:09+02:00\nFile Permissions                : -rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.02\nResolution Unit                 : None\nX Resolution                    : 1\nY Resolution                    : 1\nCurrent IPTC Digest             : 7a78f3d9cfb1ce42ab5a3aa30573d617\nCopyright Notice                : PicoCTF\nApplication Record Version      : 4\nXMP Toolkit                     : Image::ExifTool 10.80\nLicense                         : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9\nRights                          : PicoCTF\nImage Width                     : 2560\nImage Height                    : 1598\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 2560x1598\nMegapixels                      : 4.1\n```\n\nThe `License` field looked a bit odd, so I tried to decode it with a [base64 decoder](https://www.base64decode.org), and voila! \n\n## Flag\n`picoCTF{the_m3tadata_1s_modified}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/flag_shop":{"title":"flag_shop","content":"\n[Link to the exercise](https://play.picoctf.org/practice/challenge/49)\n\n## Steps \nThe exercise uses a simple server application that allows *buying the flag*, but initially, we don't have enough _funds_ to do so. The problem is how to get more funds by exploiting the server. \n\nFortunately, the author left the [source code](https://jupiter.challenges.picoctf.org/static/253c4651d852ac6342752ff222cf2a83/store.c) for reference. I am not that proficient in C, I've been using it a few years ago at the university, but I tried to hack this one nonetheless.\n\nThe only place where I am able to anything is when I get into `Buy flags -\u003e Definitely not the flag Flag`. _Buying_ this one won't get me the flag needed to pass the exercise, it'll just adjust the _funds_ (or: `account_balance`) accordingly.\n\n### Source code analysis\nThere are some suspicious looking lines of code in the source:\n```c\nint total_cost = 0;\ntotal_cost = 900 * number_flags;\n```\n\nBoth `total_cost` and `number_flags` are Integers, which means their the maximum value is `2147483647` (adding `1` will result in a signed int of `-2147483648`). \n\nThe `number_flags` is the only variable I can change. \n\nAlso:\n```c\naccount_balance = account_balance - total_cost;\n```\n\nThe `account_balance` is an Integer as well. It's decreased by the `total_cost`. That'd mean if I'd be able to make `total_cost` negative, the `account_balance` **would increase** (base maths, *negative* + *negative* =\u003e *positive*). \n\n### Making `total_cost` negative\nSo how can we make `total_cost` negative? \n\nLet's get back to the integer overflowing idea. I've opened an online C compiler and tried to mess with the values: \n\n```c\n#include \u003cstdio.h\u003e\n\nint main()\n{\n    int x = 2147483647 + 1; // overflowed to -2147483648\n    int y = 900 * x; \n    printf(\"number_flags: %d\\ntotal_cost: %d\", x, y);\n\n    return 0;\n}\n\n// Output: \n// number_flags: -2147483648 \n// total_cost: 0\n```\n\nThat's no good. `900 * -2147483648` resulted in this: \n```sh\nwarning: overflow in conversion from ‚Äòlong int‚Äô to ‚Äòint‚Äô changes value from ‚Äò-1932735283200‚Äô to ‚Äò0‚Äô [-Woverflow]\n```\n\nLet's try another: \n```c\nint x = 2147483647 + 10; // overflowed to -2147483639\nint y = 900 * x; \n\n// Output: \n// number_flags: -2147483639 \n// total_cost: 8100\n```\n\nYay, we've increased the `total_cost`! But it's not enough to finish the task, as we need to make it negative. \n\n\u003e The thing is that we'd need to find such a value for incrementing the maximum integer value of `2147483647` to make the `900 * result` overflowing and becoming negative as well.\n\nI've been appending zeros to the `x` increment to the point when the `total_cost` would become negative. I've settled with that: \n```c\n#include \u003cstdio.h\u003e\n\nint main () \n{\n  int x = 2147483647 + 100000000;\n  int y = 900 * -2047483649;\n  printf (\"number_flags: %d \\ntotal_cost: %d\", x, y);\n\n  return 0;\n}\n\n// Output: \n// number_flags: -2047483649 \n// total_cost: -194314116\n```\n\n### Grabbing the flag\nUltimately I've opened the server once again, tried to _buy_ `100000000` flag knockoffs and my `account_balance` increased to `194314316`, which was enough to buy the final flag. Problem solved üí™\n\n## Disclaimer\nAs I said, at the time of writing this I am not that proficient in C, and the numeric systems are still a bit of the open waters to me. Probably I could find the easier way of increasing the `account_balance`. But thanks to that meddling I was able to find the flag and that's most important to me üòâ\n\n## Flag\n`picoCTF{m0n3y_bag5_65d67a74}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/mus1c":{"title":"mus1c","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/15)\n\n## Steps \nAfter downloading and opening the `lyrics.txt` I saw somewhat cryptic lyrics of the _song_: \n```Rockstar\nPico's a CTFFFFFFF\nmy mind is waitin\nIt's waitin\n\nPut my mind of Pico into This\nmy flag is not found\nput This into my flag\nput my flag into Pico\n\n\nshout Pico\nshout Pico\nshout Pico\n\nMy song's something\nput Pico into This\n\nKnock This down, down, down\nput This into CTF\n\nshout CTF\nmy lyric is nothing\nPut This without my song into my lyric\nKnock my lyric down, down, down\n\nshout my lyric\n\nPut my lyric into This\nPut my song with This into my lyric\nKnock my lyric down\n\nshout my lyric\n\nBuild my lyric up, up ,up\n\nshout my lyric\nshout Pico\nshout It\n\nPico CTF is fun\nsecurity is important\nFun is fun\nPut security with fun into Pico CTF\nBuild Fun up\nshout fun times Pico CTF\nput fun times Pico CTF into my song\n\nbuild it up\n\nshout it\nshout it\n\nbuild it up, up\nshout it\nshout Pico\n```\n\nAfter a long while, I decided to check the hint, which suggested *mastering rockstar*. This little clue helped me to understand that the _song_ may be in fact the esoteric language. \n\nI compiled the *song code* in [Rockstar -\u003e Try It](https://codewithrockstar.com/online) and got this output: \n```ASCII\n114\n114\n114\n111\n99\n107\n110\n114\n110\n48\n49\n49\n51\n114\nProgram completed in 38 ms\n```\n\nI changed newlines into spaces and put the output into the ASCII to text converter. The flag was mine. \n\n## Flag\n`picoCTF{rrrocknrn0113r}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/plumbing":{"title":"plumbing","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/48)\n\n## Steps\nThis one is really easy. I just needed to dump the output of `nc \u003cserver address and port\u003e` to a text file and try to find `picoCTF` string in it ü§∑‚Äç‚ôÇÔ∏è\n\nTo dump the output and open it in VS Code: \n`nc jupiter.challenges.picoctf.org 4427 \u003e f.txt \u0026\u0026 code f.txt`\n\n## Flag\n`picoCTF{digital_plumb3r_5ea1fbd7}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-1":{"title":"PW Crack 1","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/245)\n\n## Steps \nI downloaded the `level1.py` (the script) and `level1.flag.py.enc` (the encrypted flag) files and opened the former with `python`. \n\nThe script asked for the password. From the source code, I knew the password was `8713`. However, the script was pretty stubborn about accepting the password:\n\n```sh\n$ python level1.py \nPlease enter correct password for flag: 8713\n8713\nThat password is incorrect\n```\n\n### Source code analysis\n```python\ndef level_1_pw_check():\n\tuser_pw = input(\"Please enter correct password for flag: \")\n\tprint(user_pw)\n\tif( user_pw == \"8713\"):\n\t\tprint(\"Welcome back... your flag, user:\")\n\t\tdecryption = str_xor(flag_enc.decode(), user_pw)\n\t\tprint(decryption)\n\t\treturn\n\tprint(\"That password is incorrect\")\n```\n\nIt seemed strange that `user_pw` should be equal to `\"8713\"`. I am not a daily Python user, but it seemed that it wanted me to pass a string value, not a number. I tried that: \n\n```sh\n$ python level1.py \nPlease enter correct password for flag: \"8713\"\n8713\nWelcome back... your flag, user:\n\u003credacted\u003e\n```\n\n...and the flag was mine. Easy peasy.\n\n## Flag\n`picoCTF{545h_r1ng1ng_1b2fd683}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-2":{"title":"PW Crack 2","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/246)\n\n## Steps \nI downloaded the `level2.py` (the script) and `level2.flag.py.enc` (the encrypted flag) files and opened the former with `python`. \n\nSimilar to [[cybersecurity/write-ups/picoCTF/pw-crack-1]], the script asked for the password. The difference lies in how the password was hardcoded in the source code. \n\n### Source code analysis\n```python\ndef level_2_pw_check():\n\tuser_pw = input(\"Please enter correct password for flag: \")\n\tif( user_pw == chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36) ):\n\t\tprint(\"Welcome back... your flag, user:\")\n\t\tdecryption = str_xor(flag_enc.decode(), user_pw)\n\t\tprint(decryption)\n\t\treturn\n\tprint(\"That password is incorrect\")\n```\n\nFrom the source code, I knew the password was a concatenated set of strings:\n`chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36)`. \n\nI just printed it in Python's REPL:\n```python\nprint (chr(0x64) + chr(0x65) + chr(0x37) + chr(0x36));\n\n# output: \n# de76\n```\n\nAgain, it needed to be passed as a string: \n\n```sh\n$ python level2.py \nPlease enter correct password for flag: \"de76\"\nWelcome back... your flag, user:\n\u003credacted\u003e\n```\n\n## Flag\n`picoCTF{tr45h_51ng1ng_489dea9a}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-3":{"title":"PW Crack 3","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/247)\n\nThis one is similar, but a bit harder than [[cybersecurity/write-ups/picoCTF/pw-crack-1]] and [[cybersecurity/write-ups/picoCTF/pw-crack-2]]. \n\n## Steps \nFirst I downloaded the files:\n- `level3.py` - the script\n- `level3.flag.py.enc` - the encrypted flag\n- `level3.hash.bin` - the hash of the encrypted password\n\nAs suggested, I've also installed `bvi` (or \"binary vi\") from _brew_ (ultimately I didn't need it, but it's good to know such a program exists). \n\n### Source code analysis\nThe source code for this one differed a bit from the previous exercises. Namely - the password that the script asked for was read from the binary file. \n\nTo compare what's read from the file with what I put into the script, this function hashed the input string: \n\n```python\ndef hash_pw(pw_str):\n\tpw_bytes = bytearray()\n\tpw_bytes.extend(pw_str.encode())\n\tm = hashlib.md5()\n\tm.update(pw_bytes)\n\treturn m.digest()\n```\n\nAlso, there was a list of possible passwords and one of them _should_ work. \n\nI could just go one by one and put them in, but it wouldn't be performant, so I decided to open `level3.hash.bin` in VS Code first and check what's the content. This is what it looked like: \n\n```\nÔøΩ`EÔøΩÔøΩBCÔøΩ;ÔøΩÔøΩÔøΩœ¢iÔøΩ\n```\n\nI wrote a simple function that'd iterate over the array of possible passwords and print the hashes for them: \n\n```python\npos_pw_list = [\"8799\", \"d3ab\", \"1ea2\", \"acaf\", \"2295\", \"a9de\", \"6f3d\"]\n\nfor p in pos_pw_list:\n\tprint(hash_pw(p))\n```\n\nThe third hash looked exactly the same as the one in `level3.hash.bin`: \n\n```\nÔøΩ\u0005\u001b;ÔøΩqlƒ£ÔøΩ/9ÔøΩ\u0019ÔøΩs\n+\u0026ÔøΩAÔøΩÔøΩ)HBf\u0006\u000fÔøΩ\u0002C\nÔøΩ`EÔøΩÔøΩBCÔøΩ;ÔøΩÔøΩÔøΩœ¢iÔøΩ // \u003c-- this one\n=ÔøΩ9dÔøΩ\u0004=ÔøΩÔøΩÔøΩÔøΩÔøΩ1ÔøΩ\u001f-\n\u0016\u0002m`ÔøΩÔøΩTA\u000b45ÔøΩ\u0003ÔøΩÔøΩ\u0026\nÔøΩÔøΩÁß¶ÔøΩÔøΩÔøΩÔøΩ=ÔøΩÔøΩFÔøΩÔøΩL\nÔøΩÔøΩ\u001dVÔøΩJxÔøΩÔøΩ\u0005CRÔøΩÔøΩÔøΩj\n```\n\n...so I just tried the third password from the array and it worked üòÅ\n\n\u003e Note: this time I've had to put it in the prompt without quotes\n\n## Flag\n`picoCTF{m45h_fl1ng1ng_6f98a49f}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-4":{"title":"PW Crack 4","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/248)\n\nThis one is basically the same as [[cybersecurity/write-ups/picoCTF/pw-crack-3]], the only difference is the possible passwords count. \n\n## Steps\n_PW Crack 3_ was proposing a valid password among 6 non-valid ones. This exercise gives 100 options to validate instead. \n\nI could go over each of them, but it wouldn't be feasible. Instead, I modified the function I created before to print out the hashes to print only the password that's hash is the same as `correct_pw_hash`.\n\n```python\nfor p in pos_pw_list:\n\tif (hash_pw(p) == correct_pw_hash):\n\t\tprint(p)\n```\n\nI seriously wonder why I didn't take the same route when doing _PW Crack 3_. I'm starting to like Python...\n\n## Flag\n`picoCTF{fl45h_5pr1ng1ng_ae0fb77c}`\n","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/cybersecurity/write-ups/picoCTF/pw-crack-5":{"title":"PW Crack 5","content":"[Link to the exercise](https://play.picoctf.org/practice/challenge/249)\n\nThe final one of the _PW Crack_ series. \n\n## Steps\nI began by downloading all the files and opened `dictionary.txt` first. \n\nIt had \u003e65k passwords (from `0x0000` to `0xffff`) and only one was correct. I knew could reuse the loop from [[cybersecurity/write-ups/picoCTF/pw-crack-4]]. \n\nHowever, the hints mentioned the `.strip()` fn, which meant that some passwords in the file would have whitespaces that I'd need to get rid of. \n\nSo I slightly modified the loop to strip the whitespaces first, then compare the passwords hashes with the correct one: \n```python\nwith open('dictionary.txt', 'r') as passwords:\n\tfor password in passwords:\n\t\tstripped_password = password.strip()\n\t\tif (hash_pw(stripped_password) == correct_pw_hash):\n\t\t\tprint(stripped_password)\n```\n\nAnd that was it.\n\n## Flag\n`picoCTF{h45h_sl1ng1ng_fffcda23}`","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/":{"title":"Software Development","content":"","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/regexps":{"title":"Regular Expressions Cheat Sheet","content":"Regular expression - a sequence of characters representing a pattern. \n\nThey are pretty hard to maintain:\n\n\u003e If you'll use regular expression to solve a problem, you'll have two problems.\n\nRegular expressions are case-sensitive by default.\n\nWe need to keep in mind the special characters, like `.`.  (metacharacters).\n\nIt's generally better to re-use the regular expressions available over the Internet, as they are pretty tricky to write and maintain. The bugs in these are probably fixed by the community already. \n\n## Metacharacters\n|metachar|meaning|\n|-|-|\n|`.`|any character|\n|`^`|match only the pattern that occures at the beginning of the line|\n|`$`|match only the pattern that occures at the end of the line|\n|`\\w`|word (a-z, A-Z, 0-9, `_`)|\n|`\\W`|**not** word (plus `\\n`)|\n|`\\n`|new line|\n|`\\t`|tab|\n|`\\d`|digit|\n|`\\d\\d`|number of 2 digits|\n|`\\d\\d-\\d\\d\\d`|Polish zip code (12-345)|\n\n## Operators\n|operator|meaning|\n|-|-|\n|`+`|at least one occurence|\n|`\\d+`|at least one digit|\n|`*`|0 or more occurences|\n|`{3}`|exactly 3 occurences|\n|`\\d{3}`|exactly 3 digits|\n|`{1,3}`|between 1 and 3 occurences|\n|`[]`|set of matched characters or range|\n|`[ -]`|either space or `-` or both|\n|`[A-Z]`|letter between A-Z|\n|`(-\u003cpipe\u003e )`|space **OR** `-` (`\u003cpipe\u003e` =\u003e OR)|\n|`\\`|escape metacharacters|\n|`\\.`|dot (escaped `.`)|\n|`^`|negation|\n\n\n## Flags\n|flag|meaning|\n|-|-|\n|`g`|match **all** occurences|\n|`m`|make `^` and `$` work in **every** line (not only first/last ones)|\n|`i`|make the expression case-insensitive|\n\n## Groups\n|operator|meaning|\n|-|-|\n|`()`|encapsulate expression in a group|\n|`(?:)`|not group?|\n\n### Groups indexing\nGroups are indexed from 1. \n`$2` - first group in matched pattern\n\n\n## Examples\n### Phone number\n```\n(\\d{3}(-1 )){2}\\d{3}\n- (\\d{3}(-1 )){2} - match (123- | 123\u003cspace\u003e) twice\n- then match last (123)\n\n123-456-789\n123 456 789\n```\n\n### Email\nThere's no perfect email regex, but [this one is pretty close](https://emailregex.com).\n\n### CSS `rgb`/`rgba` function\n```\n^rgba?\\([0-9, ]+\\);$\n```\n\n### CSS `rgb()` and `rgba()` values\n```regexp\n^rgba?\\((\\d{1,3}(?:,\\s?\\d{1,3}){2}(?:,\\s?[0-1]\\.?\\d?)?)?\\);?$\n```\n\nMatches: \n- rgb(**1, 2, 3**);\n- rgba(**1, 2, 3, 0.4**);\n\n## Apps\n- regex101.com\n- regexr.com\n- [Expressions](https://www.apptorium.com/expressions) (also available in [[Setapp]])\n\n## Ideas to explore\nRegular Expressions aren't usable only for programming. They can be used to: \n- [ ] Automating the e-mails management via Zapier/Make.com\n\t- labeling the e-mails\n\t- sending them to Todoist\n\n## Resources\n- [Regex for WebDeveloper course](https://eduweb.pl/programowanie-i-www/javascript/regex-dla-webdevelopera) üáµüá±","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/testing-javascript/":{"title":"Testing JavaScript","content":"Course notes I've taken during [Testing JavaScript](https://testingjavascript.com/) course by [Kent C. Dodds](https://kentcdodds.com/).\n","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/testing-javascript/configuring-jest/":{"title":"Configuring Jest","content":"","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/testing-javascript/configuring-jest/code-coverage-in-jest":{"title":"Code Coverage in Jest","content":"\nUse `jest --coverage` to generate coverage report after testing. The report in HTML will be saved in `./coverage` directory. This directory **should** be included in `.gitignore`.\n\nThe coverage report will include the _test utilities_ as well, which makes no sense and affects the stats. We only want to know how well tested the application code is.\n\nWe can add `collectCoverageFrom` to `jest.config.js`.\n\n```js\nmodule.exports = {\n  collectCoverageFrom: [\"**/src/**/*.js\"],\n};\n```\n\n\u003e [!tip] Jest is excluding `__tests__` by default\n\nThe coverage report is generated by `babel-plugin-istanbul` under the hood. It's possible to omit some parts in the coverage report with `/* istanbul ignore next */` directive. However this is not recommended, as it's a kind of _lying to yourself_ about how much of the code have been covered.\n\nIt's possible to set the `coverageThreshold` that will enforce how much of coverage is necessary for the code to pass the tests:\n\n```js\nmodule.exports = {\n  coverageThreshold: {\n    global: {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100,\n    },\n  },\n};\n```\n\nIt's nice to set a bit below what the coverage is as of now, to make sure there won't be much of new code without tests committed.\n\n\u003e [!danger] The coverage is not a perfect metric for confidence.\n\u003e\n\u003e Not all lines in the codebase are _equal_ (some are more important than others).\n\nIt's possible to use a glob when setting the `coverageThreshold`.\n\n```js\nmodule.exports = {\n  coverageThreshold: {\n    \"./src/shared/utils.js\": {\n      statements: 100,\n      branches: 100,\n      functions: 100,\n      lines: 100,\n    },\n  },\n};\n```\n\n**Note:** When we add the specific files to the configuration, the `global` coverage threshold **lowers**.\n\nThe coverage can be added to CI/CD setup using [codecov](https://codecov.io).\n","lastmodified":"2023-01-02T17:08:51.281311198Z","tags":null},"/development/testing-javascript/configuring-jest/configuring-jest-for-testing-js-applications":{"title":"Configuring Jest for testing JS applications","content":"\n\u003e This note goes through useful Jests features, without actually going to how to write tests.\n\n## `process.env.NODE_ENV`\n\nFor testing `process.env.NODE_ENV === 'test'`. This can be used to enable `commonjs` modules in `babel` just for testing.\n\nJest picks up `.babelrc.js` automatically.\n\n## Configuring Jest's test environment for testing `node` or browser code\n\nJest uses JS DOM module to simulate browser in `node`. Technically the `window` property is simulated in `node` environment.\n\nWe can customize Jest to _enforce_ Browser/`node` environment with:\n\n```sh\njest -- --env=\"node\" // this will exclude JS DOM from the environment\n```\n\nIncluding JS DOM in the test runner without actually having a code that relies on the browser APIs may negatively affect the runners performance.\n\nThis can also be handled in `jest.config.js`:\n\n```js\nmodule.exports = {\n  testEnvironment: \"jest-environment-node\",\n  // testEnvironment: 'jest-environment-jsdom' // \u003c-- this works as well\n};\n```\n\nThese `testEnviroment`s are actually `node_modules`.\n\n## Support CSS imports with `moduleNameMapper`\n\nImporting styles is handled with `webpack` and `style-loader`, however this only works for the application itself. By default Jest will complain about importing CSS files, because it's not sure how to handle that imports.\n\nWhat we want to do is to _mock_ the non-JS module (CSS being one) with `moduleNameMapper` option:\n\n```js\n// jest.config.js\nmodule.exports = {\n  moduleNameMapper: {\n    \"\\\\.css$\": require.resolve(\"./test/style-mock.js\"),\n  },\n};\n\n// test/style-mock.js\nmodule.exports = {};\n```\n\n## Support Webpack CSS modules with `identity-obj-proxy`\n\nBy just mocking the styles module with `moduleNameMapper` may result in skipping the `className` property (or, to be precise, the `class` attr) in rendered component (`style-mock.js` is an empty object, so `styles.exampleStyle` is `undefined`.\n\nHowever, it may prove useful to add the `className` to the in-test rendered component for many purposes (eg handling the `classNames` logic).\n\nIf we‚Äôre using CSS modules with webpack, then we can improve our `moduleNameMapper` to include the css module property name in our tests using `identity-obj-proxy`:\n\n```js\n// jest.config.js\nmodule.exports = {\n  moduleNameMapper: {\n    \"\\\\.module.css$\": \"identity-obj-proxy\",\n  },\n};\n\n// test/style-mock.js\nmodule.exports = {};\n```\n\n`identity-obj-proxy` returns the path that was accessed to resolve a particular module.\n\n## Snapshot testing\n\nIf we'd like to test if the function returns a serializable value, we could just write:\n\n```js\nimport { getFlyingSuperHeros } from \"../super-heros\";\n\ntest(\"returns returns super heros that can fly\", () =\u003e {\n  const flyingHeros = getFlyingSuperHeros();\n  expect(flyingHeros).toEqual([\n    { name: \"Dynaguy\", powers: [\"disintegration ray\", \"fly\"] },\n    { name: \"Apogee\", powers: [\"gravity control\", \"fly\"] },\n  ]);\n});\n```\n\nHowever, at some point `flyingHeroes` might change, and when it'd happen, we'd need to figure out what changes in the object and to manually change the assertion in test case. This can be _semi-automated_ with _snapshot testing_:\n\n```js\nimport { getFlyingSuperHeros } from \"../super-heros\";\n\ntest(\"returns returns super heros that can fly\", () =\u003e {\n  const flyingHeros = getFlyingSuperHeros();\n  expect(flyingHeros).toMatchSnapshot();\n});\n```\n\nThis will make Jest to create a `\u003ctest-filename\u003e.js.snap` file in which the most recent snapshot will live.\n\nIf the snapshot test fails (because the tested object was changed), we can update the snapshot with `jest -u` (_update_).\n\nWe may also use `toMatchInlineSnapshot` - in this case, the snapshot won't live in a separate file. Jest will pass the snapshot to the test file itself. Using `-u` flag will update the test file assertion.\n\nThis also works with serializing and snapshotting the DOM nodes. In such case it's great to use Prettier, to make sure the real HTML and snapshot HTML are formatted in the same manner.\n\n## Custom Jest Snapshot Serializers\n\nIf we're using some custom UI Library, like `emotion`, we may see strange classes in our snapshots. It'd be more clear to see the clear CSS, instead of weird class names.\n\nThe general rule is to use custom Jest Snapshot Serializer.\n\nFor Emotion, this can be done with `@emotion/jest`:\n\n```js\nmodule.exports = {\n  snapshotSerializers: [\"@emotion/jest/serializer\"],\n};\n```\n\n## Custom Module Resolution with `moduleDirectories`\n\nIf we use Webpack's `resolve.modules` configuration to make common utils accessible across the application without relative paths, we need to emulate similar behavior in Jest. To do that, we use `moduleDirectories` configuration option:\n\n```js\nmodule.exports = {\n  moduleDirectories: [\"node_modules\", path.join(__dirname, \"src\"), \"shared\"],\n};\n```\n\nThis will make Jest to look up the imported modules in `node_modules` and in `./shared`. No more relative paths.\n\n## Configuring Jest to run setup for all tests before actual testing\n\nTo take care of test boilerplate and establish a good testing environment for our tests, we use the `setupFilesAfterEnv` option, together with e.g. `@testing-library/jest-dom`.\n\n```js\n// jest.config.js\nmodule.exports = {\n  setupFilesAfterEnv: [\"@testing-library/jest-dom/extend-expect\"],\n};\n```\n\nNote: `@testing-library/jest-dom/extend-expect` is a _script_. It could be any other boilerplate setup script out there.\n\n## Watch Mode\n\nJust use `jest --watch`. Preferably in `npm` script (eg. `test:watch`).\n\nIt uses `git` working copy to determine what files have changed.\n\nInteractive Snapshots (`i`) are quite useful. It's also possible to filter by filename or test description (`p` and `t`).\n\n### `--watchAll`\n\n`jest --watchAll` will open `jest` in watch mode, but will run **all tests** every time any test file changes.\n\nIt's possible to make Jest to automatically run in watch mode in development environment and in _normal_ mode if it's in CI with `is-ci-cli` npm package:\n\n```json\n// package.json\n{\n  \"scripts\": {\n    \"test\": \"is-ci test:coverage test:watch\",\n    \"test:coverage\": \"...\",\n    \"test:watch\": \"...\"\n  }\n}\n```\n\n## Connecting Jest to Node.js Debugger/Chrome DevTools\n\nBy default using the `debugger` keyword won't do anything. To run tests with Node.js debugger, we need:\n\n```sh\nnode --inspect-brk \u003cpath_to_jest_binary\u003e --runInBand // inspect break\n```\n\n`--runInBand` makes sure `jest` will run only in one `node` process (`jest` is spawning processes by default to fasten things up, but it may be forced to use one process - helpful for tests debugging).\n\nThen we can connect the debugger with DevTools. The remote sessions available are from chrome://inspect/.\n\n\u003e [!tip] There also should be possible to use NodeJS button in DevTools upper left\n\n## Using different configuration files\n\nLet's say we have that set options differently (e.g. have different `testEnvironment`):\n\n- `jest.common.config.js`\n- `jest.server.config.js`\n- `jest.client.config.js`\n\nTo make sure the different configuration files target different test files, we can set `testMatch` option:\n\n```js\n// jest.server.config.js\nmodule.exports = {\n  // rootDir: \u003cif custom test file is not in `/`\u003e\n  testMatch: \"./__tests__server__/**/*.test.js\",\n};\n```\n\nThen we need to use `jest --config jest.server.config.js`\n\nThis method would need us to maintain lots of `npm scripts`, since it's not possible to run multiple `watch` sessions at once\n\nAllow to run multiple Jest configurations at once (and reduce the complexity of `npm scripts` by the way).\n\n```js\nmodule.exports = {\n  ...require(\"./jest.common.config.js\"),\n  /* ... */\n  projects: [\"./jest.client.js\", \"./jest.server.js\"],\n};\n```\n\n\u003e [!tip] The _project_ configurations can use `displayName` option to differentiate the output.\n\n### Checking out the configuration\n\nTo display the whole resolved configuration use `jest --config`. The `globalConfig` states the configuration in the root `jest.config.js` file. It'll list also other options that **should be** configured in root config.\n\n## Run ESLint with Jest\n\nIt's possible to change the `runner` which Jest will use - by default it uses `jest-runner`, but we can use e.g. `jest-runner-eslint` to lint the code that'll run `eslint` during evaluation of the project state through `yarn test`.\n\nThis may prove useful when it comes to organize the toolkit around the project especially when it comes to bigger, legacy projects (e.g. ones that weren't linted before, and we want to lint only the code that we changed - improving the code quality gradually).\n\n## Test specific projects in Watch Mode\n\nWith `jest-watch-select-projects` plugin it's possible to specify which projects should be tested in `jest --watch`, similarly to how we select files for current tests run.\n\n```js\nmodule.exports: {\n    watchPlugins: ['jest-watch-select-projects']\n}\n```\n\n## Filtering tests ran with Typeahead support\n\n\u003e [!tip] Typeahead is similar of Intellisense, but non-proprietary\n\nThanks to `jest-watch-typeahead` plugins it's possible to add patternmatching to the tests filtering:\n\n```js\nmodule.exports: {\n    watchPlugins: ['jest-watch-typeahead/filename', 'jest-watch-typeahead/testname']\n}\n```\n\n## Run only relevant tests on Git commit hook\n\n`husky` and `lint-staged` allow to configure the git hook to run tests only\n\n```json\n// package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged \u0026\u0026 ...\"\n    }\n  },\n  \"lint-staged\": {\n    \"**/*.+(js|json|css|html|md)\": [\n      \"prettier\",\n      \"jest --findRelatedTests\", // \u003c-- This\n      \"git add\"\n    ]\n  }\n}\n```\n\n`jest --findRelatedTests` will find tests that are related to the files defined in `lint-staged`.\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/":{"title":"Testing with Cypress","content":"","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/configuring-cypress":{"title":"Fundamentals of testing with Cypress and Testing Library","content":"Cypress is a tool for E2E testing.\n\nInternally Cypress is an application that runs natively on the computer, but is installed via `npm`/`yarn`.\n\nTo open Cypress application we use `cypress open`. We don't need the application to run tests, we can default to running them in CLI (headless mode), via `cypress run`. \n\n## Configuring Cypress\n```json\n// cypress.json\n{\n  \"baseUrl\": \"http://localhost:8080\",\n  \"integrationFolder\": \"cypress/e2e\", // where the test files lie\n  \"viewportHeight\": 900,\n  \"viewportWidth\": 400\n}\n```\n\n\u003e [!tip] The configuration can be viewed from `cypress open`\n\u003e \n\u003e Check out the settings tab to see what options were set and where exactly (`cypress.json`, ENV etc.)\n### Enabling `cypress` in `eslint`\n```tsx\nmodule.exports = {\n/* [...] */\nroot: true,\n  plugins: ['eslint-plugin-cypress'],\n  extends: ['plugin:cypress/recommended'],\n  env: {'cypress/globals': true},\n  /* [...] */\n}\n\n```\n\n\nIt's also useful to add `cypress/videos` and `cypress/screenshots` to `.gitignore`. \n\n## Installing Cypress Testing Library\n```\nyarn add -D @testing-library/cypress\n```\n\n```tsx\n// cypress/support/index.js\n\nimport '@testing-library/cypress/add-commands'\n/* [...] */\n```\nThis adds `findBy`/`getBy`... methods to `cy` object. \n\n## Scripting Cypruss for local development and CI\nBy default we need to run the application in the background for the tests to run. Also, we want to default to `cypress run` for CI.\n\nFor that kind of setup we can use `start-server-and-test` package. `is-ci-cli` package is also useful for determining in which environment we want to run `cypress`. \n\n```json\n{\n  /* [...] */\n  \"scripts\": {\n    \"cy:run\": \"cypress run\",\n    \"cy:open\": \"cypress open\",\n    \"test:e2e\": \"is-ci \\\"test:e2e:run\\\" \\\"test:e2e:dev\\\"\",\n    \"pretest:e2e:run\": \"npm run build\",\n    \"test:e2e:run\": \"start-server-and-test start http://localhost:8080 cy:run\",\n    \"test:e2e:dev\": \"start-server-and-test dev http://localhost:8080 cy:open\",\n    /* [...] */\n    \n    \"dev\": \"/* [...] */\",\n    \"start\": \"/* [...] */\",\n    \"setup\": \"npm install\",\n    /* [...] */\n  },\n}\n```\n\n\u003e [!tip] Btw, `npm` has `pre\u003cscripts\u003e` üëå\n\u003e \n\u003e Every script named `pre\u003cother-script\u003e` where `other-script` is an existing `npm` script will run **before** that `other-script`.\n\nWe could set up `husky:precommit` to run E2E tests, but as the project grows, the tests would need lot of time to go through the tests, so it's better to rely on CI for these. \n\n```yml\n# .travis.yml\n\n# [...]\naddons:\n  apt:\n    packages:\n      - libgconf-2-4\ncache:\n  directories:\n    - ~/.npm\n    - ~/.cache\nscript: npm run setup\n```","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/custom-cypress-cmds":{"title":"Custom Cypress commands","content":"We can append commands to `cy` object with usage of _custom commands_. This can be used for making reusable assertions, making HTTP requests directly etc.: \n\n```ts\n// cypress/support/commands.js\nCypress.Commands.add('createUser', overrides =\u003e {\n  const user = userBuilder(overrides)\n  return cy\n    .request({\n      url: 'http://localhost:3000/register',\n      method: 'POST',\n      body: user,\n    })\n    .then(({body}) =\u003e body.user)\n})\nCypress.Commands.add('assertHome', () =\u003e {\n  cy.url().should('eq', `${Cypress.config().baseUrl}/`)\n})\n\nCypress.Commands.add('assertLoggedInAs', user =\u003e {\n  cy.window().its('localStorage.token').should('be.a', 'string')\n  cy.findByTestId('username-display').should('have.text', user.username)\n})\n```\n\nAfter that we can use `cy.createUser()`, `cy.assertHome()` and `cy.assertLoggedInAs()` to call them. \n\nWe can use `overrides` to override the default configuration. \n\n## Command `subject`\nIf the command returns anything, we can get to this returned value in this way: \n```ts\ncy.createUser().then(user =\u003e /* [...] */)\n```","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/cy-request-fn":{"title":"cy.request fn","content":"\nWe can use `cy.request(req)` to make HTTP calls directly from Cypress. \n```ts\ncy.request({\n    url: 'http://localhost:3000/register',\n    method: 'POST',\n    body: user,\n});\n```\n\nThese requests are usually reusable and can be used as [[development/testing-javascript/cypress/custom-cypress-cmds]]. \n\nTypically, `cy.request`s are faster than calling HTTP from within the tested app. ","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/debugging-tests":{"title":"Debugging tests in Cypress","content":"To debug the test, we can use this `Promise` like syntax: \n```tsx\ndescribe('anonymous calculator', () =\u003e {\n  it('can make calculations', () =\u003e {\n    /* [...] */\n    cy.findByText(/^\\+$/).then(subject =\u003e {\n        debugger; \n        return subject;\n    })\n    // .pause()\n    .click()\n    \n    /* [...] */\n  })\n})\n```\n\nIf we call the `debugger` and have Dev Tools in Cypress opened, the test will pause and we're be redirected to Source tab in Dev Tools. \n\nWe also want to return the `subject` to maintain it through the chain of interactions.\n\n`subject` is a jQuery node, btw. \n\nWe can also use `.pause()` to pause the execution without moving us to Dev Tools debugger. To resume the test, press ‚èØÔ∏è in Cypress window.\n\n`console.log`s go to Cypresses Dev Tools. \n\nWe could also mess with the Component code as well, as Cypress injects itself into `window`: \n```tsx\nfunction Calculator () {\nconst [theme, setTheme] = useState();\n    if (window.Cypress) {\n        window.setTheme = setTheme\n    }\n}\n```\n\n\u003e [!danger] We need to keep in mind we want the tests to resemble **how the user would interact with the component**\n\u003e \n\u003e Probably the user won't use `window.setTheme` on his own. But this can help develop tests in the first place. \n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/first-cypress-test":{"title":"First test in Cypress","content":"\u003e [!tip] Keep in mind the tested application needs to be running in the background\n\n```tsx\ndescribe('anonymous calculator', () =\u003e {\n  it('can make calculations', () =\u003e {\n    cy.visit('/')\n    cy.findByText(/^1$/).click()\n    cy.findByText(/^\\+$/).click()\n    cy.findByText(/^2$/).click()\n    cy.findByText(/^=$/).click()\n    cy.findByTestId('total').should('have.text', '3')\n  })\n})\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/install-react-dev-tools":{"title":"Install React Dev Tools in Cypress","content":"If we run Cypress in Chrome-based browser that has the React Dev Tools extension installed, we still need to register the tested app in DevTools.\n\nIn our app: \n```ts\n// src/react-devtools-hook.js\n\nif (window.Cypress) {\nwindow.__REACT_DEVTOOLS_GLOBAL_HOOK__ =\n  window.parent.__REACT_DEVTOOLS_GLOBAL_HOOK__\n}\n```\n\n```ts\n// src/index.js\n\nimport './react-devtools-hook'; // in the first line! \n/* [...] */\n\n```","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/testing-login-flow":{"title":"Testing login flow in Cypress","content":"The simplest form of testing the login flow would be to make Cypress register, login and logout several times: \n\n```ts\n\nimport {userBuilder} from '../support/generate'\ndescribe('login', () =\u003e {\n  it('should login an existing user', () =\u003e {\n    const user = userBuilder()\n\n    cy.visit('/')\n    cy.findByText(/register/i).click()\n    cy.findByLabelText(/username/i).type(user.username)\n    cy.findByLabelText(/password/i).type(user.password)\n    cy.findByText(/submit/i).click()\n    cy.findByText(/login/i).click()\n    cy.findByLabelText(/username/i).type(user.username)\n    cy.findByLabelText(/password/i).type(user.password)\n    cy.findByText(/submit/i).click()\n    cy.findByText(/logout/i).click()\n  })\n})\n```\n\nBut we are a bit of overtesting here. We have a very similar flow to the one presented in [[development/testing-javascript/cypress/testing-registration-flow]]. If there would be an error, we'd have it visible in many test cases, which might obscure where the issue really occures. Also, it makes Cypress to run longer. \n\nWe can make Cypress to handle the `/login` request for us with [[development/testing-javascript/cypress/cy-request-fn]] as a [[development/testing-javascript/cypress/custom-cypress-cmds|custom command]]. \n\n```ts\ndescribe('login', () =\u003e {\n  it('should login an existing user', () =\u003e {\n    cy.createUser().then(user =\u003e {\n      cy.visit('/')\n      cy.findByText(/login/i).click()\n      cy.findByLabelText(/username/i).type(user.username)\n      cy.findByLabelText(/password/i).type(user.password)\n      cy.findByText(/submit/i).click()\n      cy.findByText(/logout/i).click()\n      cy.findByText(/login/i).click()\n      cy.findByLabelText(/username/i).type(user.username)\n      cy.findByLabelText(/password/i).type(user.password)\n      cy.findByText(/submit/i).click()\n      cy.findByText(/logout/i).click()\n    })\n  })\n})\n\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/cypress/testing-registration-flow":{"title":"Testing registration flow in Cypress","content":"\nWith E2E testing, there might be a situation we want to test a form by providing some data. However, the data we provided may already exist in the database.\n\nWe could cleanup the DB for testing before each test, but this may be troublesome (or even not possible at all). \n\nWe can create the `userBuilder()` fn in `support/generate.ts` that uses `test-data-bot`:\n\n```ts\n// support/generate.ts\nimport {build, fake} from 'test-data-bot'\n\nconst userBuilder = build('User').fields({\n  username: fake(f =\u003e f.internet.userName()),\n  password: fake(f =\u003e f.internet.password()),\n})\n\nexport {userBuilder}\n\n```\n\n```ts\n// cypress/e2e/register.ts\nimport {userBuilder} from '../support/generate'\n\ndescribe('registration', () =\u003e {\n  it('should register a new user', () =\u003e {\n      // given\n    const user = userBuilder()\n// when\n    cy.visit('/')\n    cy.findByText(/register/i).click()\n    cy.findByLabelText(/username/i).type(user.username)\n    cy.findByLabelText(/password/i).type(user.password)\n    cy.findByText(/submit/i).click()\n// then\n    cy.url().should('eq', `${Cypress.config().baseUrl}/`)\n    cy.window().its('localStorage.token').should('be.a', 'string')\n    cy.findByTestId('username-display').should('have.text', user.username)\n  })\n})\n\n```\n\n## Simulate HTTP errors in Cypress\nWe need to intercept HTTP request in Cypress with `cy.server()` and `cy.route()`. \n\n```ts\nit(`should show an error message if there's an error registering`, () =\u003e {\n    cy.server()\n    cy.route({\n      method: 'POST',\n      url: 'http://localhost:3000/register',\n      status: 500,\n      response: {},\n    })\n    cy.visit('/register')\n    cy.findByText(/submit/i).click()\n    cy.findByText(/error.*try again/i)\n  })\n```","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/fundamentals/":{"title":"Testing Fundamentals","content":"","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/fundamentals/dom-testing-library":{"title":"DOM Testing Library","content":"\nDOM Testing Library is the simplest, yet complete testing utility. It's a part of [`@testing-library`](https://testing-library.com/docs/) family.\n\nIt's possible to use **DOM Testing Library** to test in virtually any JS framework out there (yep, even jQuery), however it's not that much practical.","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/fundamentals/pyramid-of-testing":{"title":"Pyramid of Testing","content":"- [[development/testing-javascript/static-analysis|Static analysis]]\n    - type errors and typs\n- [[development/testing-javascript/jest/_index|Unit tests]]\n    - verifying that isolated parts of the system work as expected\n- [[development/testing-javascript/jest/integration-tests-using-rtl|Integration tests]]\n    - verifying that several units work as intended when connected\n- [[development/testing-javascript/cypress/_index|E2E]] (functional tests)\n    - army of robots that clicks around the app and verifies that the app works correctly as a whole system","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/fundamentals/simple-testing-framework":{"title":"Simple testing framework in JS","content":"Here's an example of how the simple, `jest`-like testing framework would look like. \n\n## The simplest test\n\nThe automated test in JS is a code that throws an `Error` if the assumption does not match the result (the result is **unexpected**).\n\nThe simplest form of the passing test:\n\n```js\nconst { sum, subtract } = require(\"./math\");\nlet result, expected;\n\nresult = sum(3, 7);\nexpected = 10;\nif (result !== expected) {\n  throw new Error(`${result} is not equal to ${expected}`);\n}\n\nresult = subtract(7, 3);\nexpected = 4;\nif (result !== expected) {\n  throw new Error(`${result} is not equal to ${expected}`);\n}\n```\n\nTo write the **_test_**, we need to write a code that throws an `Error` with a **useful message** to understand what's wrong with our code.\n\nIt is relatively easy and reliable to test pure functions this way.\n\nThe error thrown can be abstracted into a function taking `actual` as a parameter and returning `toBe(expected)` fn.\n\n```ts\nfunction sum(a: number, b: number): number {\n  return a - b; // This fn is broken\n}\n\nfunction expect(actual: any) {\n  return {\n    toBe(expected: any) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n    toEqual(expected: any) {\n      /* ...*/\n    },\n    toBeGreatherThan(expected: any) {\n      /* ...*/\n    },\n    // etc.\n  };\n}\n\nexpect(sum(3, 7)).toBe(10);\n```\n\n## Encapsulating the tests into simple _framework_\n\nIn the simple case above, once any of the tests fails, the subsequent ones won't run. In addition of that, the stacktrace would display that the **`Error` occured in the same line it was thrown** (`:9`), whereas we'd like to see the broken sum fn as the reason for failing test (without digging through the stacktrace).\n\nThat's why we should encapsulate and isolate tests:\n\n```ts\nfunction sum(a: number, b: number): number {\n  return a - b; // This fn is broken\n}\n\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n\nfunction expect(actual) {\n  return {\n    toBe(expected) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n  };\n}\n\nfunction test(title, callback) {\n  try {\n    callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\ntest(\"sum adds numbers\", () =\u003e {\n  const result = sum(3, 7);\n  expect(result).toBe(10);\n});\n\ntest(\"subtract subtracts numbers\", () =\u003e {\n  const result = subtract(7, 3);\n  expect(result).toBe(4);\n});\n```\n\nTo sum up, the test should allow the developer to **quickly find what's broken**, without having to delve into the stack trace and else.\n\n## Adding a way of testing `async` code\n\nSimple adding `async` to the `callback()` fns and `await`ing for the result would cause the tests to falsely pass and to throw an `UnhandledPromiseRejection` `Error` with the reason of rejection (being our actual broken `sum` fn).\n\n```sh\n$ ts-node test.ts\n[ok] sum adds numbers\n[ok] subtract subtracts numbers\n\nthrow new Error (${actual} is not equal to ${expected});\nError: -4 is not equal to 10\nat [...]\n```\n\nThis is due to the fact that `async () =\u003e { /* test case */ }` returns a `Promise`. The `Error` thrown by the broken `sum()` in the test case causes **rejection of that `Promise`**. The `callback()` call inside `test()` returns that `Promise` without passing the error down. That's why we need to add `async/await` clauses to the `test` fn itself.\n\n```ts\nasync function test(title: string, callback: () =\u003e any) {\n  try {\n    await callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\ntest(\"sum adds numbers\", async () =\u003e {\n  const result = await sum(3, 7);\n  const expected = 10;\n  expect(result).toBe(expected);\n});\n```\n\n## Making test fns global\n\nWe want the test fns to be accessible in different `*.test.ts` files. However, we don't want to have to import the fns in each of test file (many testing frameworks seem to _embrace_ the global functions).\n\nTo make them so we can create a `setup-globals.ts` with the `test` and `expect` fns torn out...\n\n```ts\n// setup-globals.ts\nfunction expect(actual: any) {\n  return {\n    toBe(expected: any) {\n      if (actual !== expected) {\n        throw new Error(`${actual} is not equal to ${expected}`);\n      }\n    },\n  };\n}\n\nasync function test(title: string, callback: () =\u003e any) {\n  try {\n    await callback();\n    console.log(`[ok] ${title}`);\n  } catch (error) {\n    console.error(`[not ok] ${title}`);\n    console.error(error);\n  }\n}\n\nglobal.expect = expect;\nglobal.test = test;\n```\n\n```ts\n// test.ts\nfunction sum(a: number, b: number): number {\n  return a - b;\n}\n\nfunction subtract(a: number, b: number): number {\n  return a - b;\n}\n\ntest(\"sum adds numbers\", async () =\u003e {\n  const result = await sum(3, 7);\n  const expected = 10;\n  expect(result).toBe(expected);\n});\n\ntest(\"subtract subtracts numbers\", () =\u003e {\n  const result = subtract(7, 3);\n  const expected = 4;\n  expect(result).toBe(expected);\n});\n```\n\n...and run the tests in this manner:\n\n```sh\n$ ts-node --require ./setup-globals.ts test.ts\n```\n\nThat being said, we've just created micro, `jest`-like testing framework.\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/":{"title":"Testing with Jest","content":"","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/fake-data":{"title":"Using fake data in tests","content":"It's actually better to generate data for tests than hardcoding it. The data itself is not important, so it doesn't matter if the hardcoded string is `Test title` from the tests standpoint. This bloats the test cases and may hint that the string is important, even if it isn't.\n\n\u003e [!tip] We need to know what we want to _communicate_ with our tests.\n\nThanks to `test-data-bot` library it's possible to _fake_ the data.\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { build, fake, sequence } from \"test-data-bot\";\nimport { savePost as mockSavePost } from \"../api\";\nimport { Editor } from \"../post-editor\";\n\nconst postBuilder = build(\"Post\").fields({\n  title: fake((f) =\u003e f.lorem.words()),\n  content: fake((f) =\u003e f.lorem.paragraphs().replace(/\\r/g, \"\")),\n  tags: fake((f) =\u003e [f.lorem.word(), f.lorem.word(), f.lorem.word()]),\n});\n\nconst userBuilder = build(\"User\").fields({\n  id: sequence((s) =\u003e `user-${s}`),\n});\n\ntest(\"renders a form with title, content, tags, and a submit button\", async () =\u003e {\n  /* [...] */\n  const fakeUser = userBuilder();\n  const fakePost = postBuilder();\n  render(\u003cEditor user={fakeUser} /\u003e);\n\n  screen.getByLabelText(/title/i).value = fakePost.title;\n  screen.getByLabelText(/content/i).value = fakePost.content;\n  screen.getByLabelText(/tags/i).value = fakePost.tags.join(\", \");\n  const submitButton = screen.getByText(/submit/i);\n  userEvent.click(submitButton);\n\n  expect(mockSavePost).toHaveBeenCalledWith({\n    ...fakePost,\n    date: expect.any(String),\n    authorId: fakeUser.id,\n  });\n  /* [...] */\n});\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/integration-tests-using-rtl":{"title":"Integration tests using Testing Library","content":"\nThe idea of integration test is to test an entire page, or maybe even an entire app by writing tests that navigate around the app as the normal user would.\n\nLet's assume we have a multi-form application like that:\n\n```js\n// app.js\nimport React, { createContext, useContext, useReducer, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport { submitForm } from \"./api\";\n\nconst MultiPageForm = createContext();\n\nfunction MultiPageFormProvider({ initialValues = {}, ...props }) {\n  const [initState] = useState(initialValues);\n  const [form, setFormValues] = useReducer(\n    (s, a) =\u003e ({ ...s, ...a }),\n    initState,\n  );\n  const resetForm = () =\u003e setFormValues(initialValues);\n  return (\n    \u003cMultiPageForm.Provider\n      value={{ form, setFormValues, resetForm }}\n      {...props}\n    /\u003e\n  );\n}\n\nfunction useMultiPageForm() {\n  const context = useContext(MultiPageForm);\n  if (!context) {\n    throw new Error(\n      \"useMultiPageForm must be used within a MultiPageFormProvider\",\n    );\n  }\n  return context;\n}\n\nfunction Main() {\n  return (\n    \u003c\u003e\n      \u003ch1\u003eWelcome home\u003c/h1\u003e\n      \u003cLink to=\"/page-1\"\u003eFill out the form\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Page1({ history }) {\n  const { form, setFormValues } = useMultiPageForm();\n  return (\n    \u003c\u003e\n      \u003ch2\u003ePage 1\u003c/h2\u003e\n      \u003cform\n        onSubmit={(e) =\u003e {\n          e.preventDefault();\n          history.push(\"/page-2\");\n        }}\n      \u003e\n        \u003clabel htmlFor=\"food\"\u003eFavorite Food\u003c/label\u003e\n        \u003cinput\n          id=\"food\"\n          value={form.food}\n          onChange={(e) =\u003e setFormValues({ food: e.target.value })}\n        /\u003e\n      \u003c/form\u003e\n      \u003cLink to=\"/\"\u003eGo Home\u003c/Link\u003e | \u003cLink to=\"/page-2\"\u003eNext\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Page2({ history }) {\n  const { form, setFormValues } = useMultiPageForm();\n  return (\n    \u003c\u003e\n      \u003ch2\u003ePage 2\u003c/h2\u003e\n      \u003cform\n        onSubmit={(e) =\u003e {\n          e.preventDefault();\n          history.push(\"/confirm\");\n        }}\n      \u003e\n        \u003clabel htmlFor=\"drink\"\u003eFavorite Drink\u003c/label\u003e\n        \u003cinput\n          id=\"drink\"\n          value={form.drink}\n          onChange={(e) =\u003e setFormValues({ drink: e.target.value })}\n        /\u003e\n      \u003c/form\u003e\n      \u003cLink to=\"/page-1\"\u003eGo Back\u003c/Link\u003e | \u003cLink to=\"/confirm\"\u003eReview\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Confirm({ history }) {\n  const { form, resetForm } = useMultiPageForm();\n  function handleConfirmClick() {\n    submitForm(form).then(\n      () =\u003e {\n        resetForm();\n        history.push(\"/success\");\n      },\n      (error) =\u003e {\n        history.push(\"/error\", { error });\n      },\n    );\n  }\n  return (\n    \u003c\u003e\n      \u003ch2\u003eConfirm\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cstrong\u003ePlease confirm your choices\u003c/strong\u003e\n      \u003c/div\u003e\n      \u003cdiv\u003e\n        \u003cstrong id=\"food-label\"\u003eFavorite Food\u003c/strong\u003e:{\" \"}\n        \u003cspan aria-labelledby=\"food-label\"\u003e{form.food}\u003c/span\u003e\n      \u003c/div\u003e\n      \u003cdiv\u003e\n        \u003cstrong id=\"drink-label\"\u003eFavorite Drink\u003c/strong\u003e:{\" \"}\n        \u003cspan aria-labelledby=\"drink-label\"\u003e{form.drink}\u003c/span\u003e\n      \u003c/div\u003e\n      \u003cLink to=\"/page-2\"\u003eGo Back\u003c/Link\u003e |{\" \"}\n      \u003cbutton onClick={handleConfirmClick}\u003eConfirm\u003c/button\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Success() {\n  return (\n    \u003c\u003e\n      \u003ch2\u003eCongrats. You did it.\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cLink to=\"/\"\u003eGo home\u003c/Link\u003e\n      \u003c/div\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction Error({\n  location: {\n    state: { error },\n  },\n}) {\n  return (\n    \u003c\u003e\n      \u003cdiv\u003eOh no. There was an error.\u003c/div\u003e\n      \u003cpre\u003e{error.message}\u003c/pre\u003e\n      \u003cLink to=\"/\"\u003eGo Home\u003c/Link\u003e\n      \u003cLink to=\"/confirm\"\u003eTry again\u003c/Link\u003e\n    \u003c/\u003e\n  );\n}\n\nfunction App() {\n  return (\n    \u003cMultiPageFormProvider initialValues={{ food: \"\", drink: \"\" }}\u003e\n      \u003cRouter\u003e\n        \u003cSwitch\u003e\n          \u003cRoute path=\"/page-1\" component={Page1} /\u003e\n          \u003cRoute path=\"/page-2\" component={Page2} /\u003e\n          \u003cRoute path=\"/confirm\" component={Confirm} /\u003e\n          \u003cRoute path=\"/success\" component={Success} /\u003e\n          \u003cRoute path=\"/error\" component={Error} /\u003e\n          \u003cRoute component={Main} /\u003e\n        \u003c/Switch\u003e\n      \u003c/Router\u003e\n    \u003c/MultiPageFormProvider\u003e\n  );\n}\n\nexport default App;\n```\n\n## Testing the user flow\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { submitForm } from \"../api\";\nimport App from \"../app-reach-router\";\n\njest.mock(\"../api\");\n\ntest(\"Can fill out a form across multiple pages\", async () =\u003e {\n  submitForm.mockResolvedValueOnce({ success: true });\n\n  const testData = { food: \"test food\", drink: \"test drink\" };\n  render(\u003cApp /\u003e);\n\n  userEvent.click(await screen.findByText(/fill.*form/i));\n\n  userEvent.type(await screen.findByLabelText(/food/i), testData.food);\n  userEvent.click(await screen.findByText(/next/i));\n\n  userEvent.type(await screen.findByLabelText(/drink/i), testData.drink);\n  userEvent.click(await screen.findByText(/review/i));\n\n  expect(await screen.findByLabelText(/food/i)).toHaveTextContent(\n    testData.food,\n  );\n  expect(await screen.findByLabelText(/drink/i)).toHaveTextContent(\n    testData.drink,\n  );\n\n  userEvent.click(await screen.findByText(/confirm/i, { selector: \"button\" }));\n\n  expect(submitForm).toHaveBeenCalledWith(testData);\n  expect(submitForm).toHaveBeenCalledTimes(1);\n\n  userEvent.click(await screen.findByText(/home/i));\n\n  expect(await screen.findByText(/welcome home/i)).toBeInTheDocument();\n});\n```\n\nWe're using `await screen.findBy...(...)` instead of `screen.getBy...(...)` because they wait for the transition between pages to be done (until the timeout exceeds).\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/tdd-with-ui-in-testing-library":{"title":"TDD with UI in React Testing Library","content":"\nNormally using TDD with UI is really difficult because testing utilities for UI often tie your tests closely to the implementation. However, Testing Library allows to work in TDD methodology.","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/testing-components":{"title":"Testing components with Jest and React Testing Library","content":"\n## New ways of using `@testing-library/react`\n\n- Don't return `getBy...` methods from `render(\u003cComponent /\u003e`. Use `screen` export instead\n- `userEvent` is better than `fireEvent`\n- Use `waitFor` instead of `wait`. They are _same_ but `waitFor` offers more possibilities\n\n## Using `jest-dom`\n\n`jest-dom` provides really useful extensions to jest‚Äôs built-in assertion library that will make it easier for us to write our test assertions (like `toHaveTextContent`).\n\n```ts\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@testing-library/jest-dom\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(\u003cFavoriteNumber /\u003e, div);\n  expect(div.querySelector(\"input\")).toHaveAttribute(\"type\", \"number\");\n  expect(div.querySelector(\"label\")).toHaveTextContent(\"Favorite Number\");\n});\n```\n\n\u003e [!tip] KCD configured the test files to import `@testing-library/*` automatically\n\u003e\n\u003e That's why that import is missing from the examples\n\n## Using DOM Testing Library to write more maintainable tests\n\n```tsx\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { getQueriesForElement } from \"@testing-library/dom\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(\u003cFavoriteNumber /\u003e, div);\n  const { getByLabelText } = getQueriesForElement(div);\n  const input = getByLabelText(/favorite number/i); // /i -\u003e case insensitive\n  expect(input).toHaveAttribute(\"type\", \"number\");\n});\n```\n\n## Using `@testing-library/react` for rendering\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  expect(input).toHaveAttribute(\"type\", \"number\");\n});\n```\n\n## React Testing Library's `debug` fn\n\n`debug(renderedComponent = null)` will `console.log` the HTML code for all rendered components (unless one is provided as an argument).\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest('renders a number input with a label \"Favorite Number\"', () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  expect(input).toHaveAttribute(\"type\", \"number\");\n  screen.debug(); // \u003c-- w/o arg\n  // screen.debug(input); // \u003c-- with arg\n});\n```\n\n## Testing Event Handlers with `userEvent`\n\n`userEvent` fn more closely resebles the way the users interact with tested components than `fireEvent` itself.\n\n`userEvent.type` internally fires a bunch of `fireEvent`s to mimic human behavior. It follows `async/await` pattern.\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen, fireEvent } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest(\"entering an invalid value shows an error message\", async () =\u003e {\n  render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  // fireEvent.change(input, {target: {value: '10'}})\n  await userEvent.type(input, \"10\");\n\n  // `FavoriteNumber` contains a `div` with `role=\"alert\"` defined for accessibility purposes\n  expect(screen.getByRole(\"alert\")).toHaveTextContent(/the number is invalid/i);\n});\n```\n\n## Test props updates\n\n```tsx\nimport * as React from \"react\";\nimport user from \"@testing-library/user-event\";\nimport { render, screen } from \"@testing-library/react\";\nimport { FavoriteNumber } from \"../favorite-number\";\n\ntest(\"entering an invalid value shows an error message\", async () =\u003e {\n  const { rerender } = render(\u003cFavoriteNumber /\u003e);\n  const input = screen.getByLabelText(/favorite number/i);\n  await user.type(input, \"10\");\n  expect(screen.getByRole(\"alert\")).toHaveTextContent(/the number is invalid/i);\n  rerender(\u003cFavoriteNumber max={10} /\u003e);\n  expect(screen.queryByRole(\"alert\")).not.toBeInTheDocument();\n});\n```\n\n### The difference between `getBy...` and `queryBy...`\n\n`getBy...` will throw an `Error` if it didn't find queried element. `queryBy...` will return `null` instead.\n\nUsually it's better to use `getBy...` to have a nice error messages in Jest's output, but occasionally assertions using `queryBy...` will be easier to read.\n\n## Test accessibility\n\nNot all of accessibility testing of a web application can be automated, but much of it can be using¬†[jest-axe](https://github.com/nickcolley/jest-axe).\n\n```tsx\nimport \"jest-axe/extend-expect\";\nimport * as React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { axe } from \"jest-axe\";\n\ntest(\"inaccessible forms fail axe\", async () =\u003e {\n  const { container } = render(\u003cInaccessibleForm /\u003e);\n  const axeResult = await axe(container);\n  expect(() =\u003e expect(axeResult).toHaveNoViolations()).toThrow();\n});\n\ntest(\"accessible forms pass axe\", async () =\u003e {\n  const { container } = render(\u003cAccessibleForm /\u003e);\n  expect(await axe(container)).toHaveNoViolations();\n});\n```\n\n## Test `componentDidCatch` Error Boundary handler\n\n```tsx\nimport * as React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport { reportError } from \"../api\";\nimport { ErrorBoundary } from \"../error-boundary\";\n\njest.mock(\"../api\");\n\nafterEach(() =\u003e {\n  jest.clearAllMocks();\n});\n\nfunction Bomb({ shouldThrow }) {\n  if (shouldThrow) {\n    throw new Error(\"üí£\");\n  } else {\n    return null;\n  }\n}\n\ntest(\"calls reportError and renders that there was a problem\", () =\u003e {\n  reportError.mockResolvedValueOnce({ success: true });\n  const { rerender } = render(\n    \u003cErrorBoundary\u003e\n      \u003cBomb /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  rerender(\n    \u003cErrorBoundary\u003e\n      \u003cBomb shouldThrow={true} /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  const error = expect.any(Error);\n  const info = { componentStack: expect.stringContaining(\"Bomb\") };\n  expect(reportError).toHaveBeenCalledWith(error, info);\n  expect(reportError).toHaveBeenCalledTimes(1);\n\n  expect(console.error).toHaveBeenCalledTimes(2);\n});\n```\n\nIt's possible to suppress `console.error` from the Error Boundary component. Useful for omitting the `console.error` messages in test results, if the formers make the latters messy.\n\n```tsx\nbeforeEach(() =\u003e {\n  jest.spyOn(console, \"error\").mockImplementation(() =\u003e {});\n});\n\nafterEach(() =\u003e {\n  console.error.mockRestore();\n});\n```\n\n### Ensure Error Boundaries can successfully recover from Errors\n\nThanks to `.mockClear()` we can _reset_ how many times the fn was called:\n\n```tsx\ntest(\"calls reportError and renders that there was a problem, then recovers from \", () =\u003e {\n  /* ... */\n\n  // here we are clearing out the mocks\n  console.error.mockClear();\n  mockReportError.mockClear();\n\n  rerender(\n    \u003cErrorBoundary\u003e\n      \u003cBomb /\u003e\n    \u003c/ErrorBoundary\u003e,\n  );\n\n  userEvent.click(screen.getByText(/try again/i));\n\n  expect(mockReportError).not.toHaveBeenCalled();\n  expect(console.error).not.toHaveBeenCalled();\n  expect(screen.queryByRole(\"alert\")).not.toBeInTheDocument();\n  expect(screen.queryByText(/try again/i)).not.toBeInTheDocument();\n});\n```\n\n## Mock `react-transition-group`\n\nGiven the Component:\n\n```tsx\n// hidden-message.tsx\nimport * as React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction Fade(props) {\n  return (\n    \u003cCSSTransition unmountOnExit timeout={1000} classNames=\"fade\" {...props} /\u003e\n  );\n}\n\nfunction HiddenMessage({ children }) {\n  const [show, setShow] = React.useState(false);\n  const toggle = () =\u003e setShow((s) =\u003e !s);\n  return (\n    \u003cdiv\u003e\n      \u003cbutton onClick={toggle}\u003eToggle\u003c/button\u003e\n      \u003cFade in={show}\u003e\n        \u003cdiv\u003e{children}\u003c/div\u003e\n      \u003c/Fade\u003e\n    \u003c/div\u003e\n  );\n}\n\nexport { HiddenMessage };\n```\n\nIn the case of `react-transition-group`, we don‚Äôt want to have to wait `1000ms` until the transition has completed before we can go on with our tests. We can mock `react-transition-group` implementation to do so:\n\n```tsx\nimport * as React from \"react\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { HiddenMessage } from \"../hidden-message\";\n\njest.mock(\"react-transition-group\", () =\u003e {\n  return {\n    CSSTransition: (props) =\u003e (props.in ? props.children : null),\n  };\n});\n\ntest(\"shows hidden message when toggle is clicked\", () =\u003e {\n  const myMessage = \"hello world\";\n  render(\u003cHiddenMessage\u003e{myMessage}\u003c/HiddenMessage\u003e);\n  const toggleButton = screen.getByText(/toggle/i);\n  expect(screen.queryByText(myMessage)).not.toBeInTheDocument();\n  userEvent.click(toggleButton);\n  expect(screen.getByText(myMessage)).toBeInTheDocument();\n  userEvent.click(toggleButton);\n  expect(screen.queryByText(myMessage)).not.toBeInTheDocument();\n});\n```\n\nWhen we mock something, we want to make the mock as close to original function as possible.\n\n## Wrappers\n\nWrappers are a nice to have to avoid code repetition:\n\n```tsx\ntest(\"calls reportError and renders that there was a problem\", () =\u003e {\n  // [...]\n  const { rerender } = render(\u003cBomb /\u003e, { wrapper: ErrorBoundary });\n  // [...]\n});\n```\n\n## Mock HTTP with `jest.mock`\n\nIf we have a component that makes HTTP request we want to mock those out for UI unit and integration tests:\n\n```tsx\n// greeting-loader.tsx\n\nimport * as React from \"react\";\nimport { loadGreeting } from \"./api\";\n\nfunction GreetingLoader() {\n  const [greeting, setGreeting] = React.useState\u003cstring\u003e(\"\");\n  async function loadGreetingForInput(e) {\n    e.preventDefault();\n    const { data }: { data: { greeting: string } } = await loadGreeting(\n      e.target.elements.name.value,\n    );\n    setGreeting(data.greeting);\n  }\n  return (\n    \u003cform onSubmit={loadGreetingForInput}\u003e\n      \u003clabel htmlFor=\"name\"\u003eName\u003c/label\u003e\n      \u003cinput id=\"name\" /\u003e\n      \u003cbutton type=\"submit\"\u003eLoad Greeting\u003c/button\u003e\n      \u003cdiv aria-label=\"greeting\"\u003e{greeting}\u003c/div\u003e\n    \u003c/form\u003e\n  );\n}\n\nexport { GreetingLoader };\n```\n\n```tsx\n// greeting-loader.test.ts\n\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { loadGreeting } from \"../api\";\nimport { GreetingLoader } from \"../greeting-loader\";\n\njest.mock(\"../api\");\n\ntest(\"loads greetings on click\", async () =\u003e {\n  const testGreeting = \"TEST_GREETING\";\n  loadGreeting.mockResolvedValueOnce({ data: { greeting: testGreeting } });\n  render(\u003cGreetingLoader /\u003e);\n\n  const nameInput = screen.getByLabelText(/name/i);\n  const loadButton = screen.getByText(/load/i);\n\n  await userEvent.type(nameInput, \"Mary\");\n  await userEvent.click(loadButton);\n\n  expect(loadGreeting).toHaveBeenCalledWith(\"Mary\");\n  expect(loadGreeting).toHaveBeenCalledTimes(1);\n\n  // waitFor uses `act()` for state updates for us\n  await waitFor(() =\u003e\n    expect(screen.getByLabelText(/greeting/i)).toHaveTextContent(testGreeting),\n  );\n});\n```\n\n## Mocking HTTP with `msw`\n\nIt would be nice addition to make sure that the API module is working properly when testing the components that are interacting with that module.\n\nThat would require us to actually interact with the API, but the requests would be intercepted. To intercept requests we need to setup the `msw` server intercepting them first.\n\nAlso, because the tests are ran in Node.js environment we need to polyfill the `fetch` module with `whatwg-fetch`.\n\n```tsx\nimport \"whatwg-fetch\";\nimport * as React from \"react\";\nimport { render, screen, waitFor } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { rest } from \"msw\";\nimport { setupServer } from \"msw/node\";\nimport { GreetingLoader } from \"../greeting-loader-01-mocking\";\n\nconst server = setupServer(\n  rest.post(\"/greeting\", (req, res, ctx) =\u003e {\n    return res(ctx.json({ data: { greeting: `Hello ${req.body.subject}` } }));\n  }),\n);\n\nbeforeAll(() =\u003e server.listen({ onUnhandledRequest: \"error\" })); // start the server\nafterAll(() =\u003e server.close());\nafterEach(() =\u003e server.resetHandlers());\n\ntest(\"loads greetings on click\", async () =\u003e {\n  render(\u003cGreetingLoader /\u003e);\n  const nameInput = screen.getByLabelText(/name/i);\n  const loadButton = screen.getByText(/load/i);\n\n  await userEvent.type(nameInput, \"Mary\");\n  await userEvent.click(loadButton);\n  await waitFor(() =\u003e\n    expect(screen.getByLabelText(/greeting/i)).toHaveTextContent(\"Hello Mary\"),\n  );\n});\n```\n\nThe cool part is that if we were to make some sort of mistake, not just in our component, but also in our client request, then we would catch that with this arguably simpler test. We also get a higher coverage.\n\n## Custom `renderComponent` fns to simplify tests\n\nHaving a custom `render[Component]` fn allows to simplify the test code:\n\n```tsx\nfunction renderEditor() {\n  const fakeUser = userBuilder()\n  const utils = render(\u003cEditor user={fakeUser} /\u003e)\n  const fakePost = postBuilder()\n\n  screen.getByLabelText(/title/i).value = fakePost.title\n  screen.getByLabelText(/content/i).value = fakePost.content\n  screen.getByLabelText(/tags/i).value = fakePost.tags.join(', ')\n  const submitButton = screen.getByText(/submit/i)\n  return {\n    ...utils,\n    submitButton,\n    fakeUser,\n    fakePost,\n  }\n}\n\ntest('renders a form with title, content, tags, and a submit button', async () =\u003e {\n  const {submitButton, fakePost, fakeUser} = renderEditor()\n    /* [...] */\n}\n```\n\n## Custom `history` implementation within `react-router`\n\nMocking the¬†`\u003cRedirect /\u003e`¬†component in `react-router` works, but it‚Äôs imperfect because we don‚Äôt know for sure that the user will be redirected properly.\n\nNormally we'd import `BrowserRouter`, but in tests we import `MemoryRouter` so we can manually control the `history` object.\n\n```tsx\nimport * as React from \"react\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport { render as rtlRender, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Main } from \"../main\";\n\nfunction render(ui, { route = \"/\", ...renderOptions } = {}) {\n  function Wrapper({ children }) {\n    return \u003cMemoryRouter initialEntries={[route]}\u003e{children}\u003c/MemoryRouter\u003e;\n  }\n  return rtlRender(ui, {\n    wrapper: Wrapper,\n    ...renderOptions,\n  });\n}\n\ntest(\"main renders about and home and I can navigate to those pages\", async () =\u003e {\n  render(\u003cMain /\u003e);\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/home/i);\n  await userEvent.click(screen.getByText(/about/i));\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/about/i);\n});\n\ntest(\"landing on a bad page shows no match component\", () =\u003e {\n  render(\u003cMain /\u003e, {\n    route: \"/something-that-does-not-match\",\n  });\n  expect(screen.getByRole(\"heading\")).toHaveTextContent(/404/i);\n});\n```\n\n## Testing the unmounting of the component\n\nLet's assume we have the `Countdown` function component that will cleanup in `useEffect`/`useLayoutEffect`/`componentWillUnmount`.\n\n\u003e [!tip] `testing-library` doesn't care about component type\n\u003e\n\u003e The test case can be the same for both class and function components.\n\n```tsx\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction Countdown() {\n  const [remainingTime, setRemainingTime] = useState(10000);\n  const end = useRef(new Date().getTime() + remainingTime);\n  useEffect(() =\u003e {\n    const interval = setInterval(() =\u003e {\n      const newRemainingTime = end.current - new Date().getTime();\n      if (newRemainingTime \u003c= 0) {\n        clearInterval(interval);\n        setRemainingTime(0);\n      } else {\n        setRemainingTime(newRemainingTime);\n      }\n    });\n    return () =\u003e clearInterval(interval);\n  }, []);\n  return remainingTime;\n}\n\nexport { Countdown };\n```\n\n```tsx\n// countdown.test.tsx\nimport * as React from \"react\";\nimport { render, act } from \"@testing-library/react\";\nimport { Countdown } from \"../countdown\";\n\n// keeping `console.error` out of the way in test output\nbeforeAll(() =\u003e {\n  jest.spyOn(console, \"error\").mockImplementation(() =\u003e {});\n});\n\nafterAll(() =\u003e {\n  console.error.mockRestore();\n});\n\nafterEach(() =\u003e {\n  jest.clearAllMocks();\n  jest.useRealTimers(); // this re-enables normal intervals/timers so the other tests can use them. just in case.\n});\n\ntest(\"does not attempt to set state when unmounted (to prevent memory leaks)\", () =\u003e {\n  jest.useFakeTimers();\n  const { unmount } = render(\u003cCountdown /\u003e);\n  unmount();\n  act(() =\u003e jest.runOnlyPendingTimers());\n  expect(console.error).not.toHaveBeenCalled();\n});\n```\n\nTo simulate unmounting the component, we're using `unmount` from `render` fn.\n\nTo make sure every intervals were cleared properly, we can use `\n`jest.useFakeTimers()`and`jest.runOnlyPendingTimers()`. The former will make sure the timers will run way quicker.\n\nAfter umnounting, we're calling `jest.runOnlyPendingTimers()` to see if there were any non-cleared intervals (we need to wrap it in `act`). 8\n\nWithout proper cleanup in the component, the error would be thrown here (that's why we're expecting errors not to be thrown).\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/testing-hooks":{"title":"Testing custom React hooks","content":"Given the hook:\n\n```tsx\n// useCounter.ts\nimport * as React from \"react\";\n\nfunction useCounter({ initialCount = 0, step = 1 } = {}) {\n  const [count, setCount] = React.useState(initialCount);\n  const increment = () =\u003e setCount((c) =\u003e c + step);\n  const decrement = () =\u003e setCount((c) =\u003e c - step);\n  return { count, increment, decrement };\n}\n\nexport { useCounter };\n```\n\nWe need to make sure we're using the hook inside the function component and wrap the hook fn call in an `act` fn, as a callback:\n\n```tsx\n// useCounter.test.tsx\nimport * as React from \"react\";\nimport { render, act } from \"@testing-library/react\";\nimport { useCounter } from \"../use-counter\";\n\ntest(\"exposes the count and increment/decrement functions\", () =\u003e {\n  let result;\n\n  function TestComponent() {\n    result = useCounter();\n    return null;\n  }\n\n  render(\u003cTestComponent /\u003e);\n\n  expect(result.count).toBe(0);\n  act(() =\u003e result.increment());\n  expect(result.count).toBe(1);\n  act(() =\u003e result.decrement());\n  expect(result.count).toBe(0);\n});\n```\n\n\u003e [!tip] Normally you don't need `act` for using Testing Library.\n\u003e\n\u003e All the internal functions are using `act` in their implementation if necessary.\n\n## Using `renderHook`\n\nWe could create a custom `setup` fn to reduce code duplication, but it'd a bit troublesome. Thankfully, there's a `renderHook` fn available in `@testing-library/react` that does exactly that:\n\n```tsx\nimport { renderHook, act } from \"@testing-library/react-hooks\";\nimport { useCounter } from \"../use-counter\";\n\ntest(\"exposes the count and increment/decrement functions\", () =\u003e {\n  const { result } = renderHook(useCounter);\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(1);\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n\ntest(\"allows customization of the initial count\", () =\u003e {\n  const { result } = renderHook(useCounter, {\n    initialProps: { initialCount: 3 },\n  });\n  expect(result.current.count).toBe(3);\n});\n\ntest(\"allows customization of the step\", () =\u003e {\n  const { result } = renderHook(useCounter, { initialProps: { step: 2 } });\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(2);\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(0);\n});\n```\n\n## Testing the updates of custom React hooks if their props change over time\n\nJust use `rerender` fn:\n\n```tsx\ntest(\"the step can be changed\", () =\u003e {\n  const { result, rerender } = renderHook(useCounter, {\n    initialProps: { step: 3 },\n  });\n  expect(result.current.count).toBe(0);\n  act(() =\u003e result.current.increment());\n  expect(result.current.count).toBe(3);\n  rerender({ step: 2 });\n  act(() =\u003e result.current.decrement());\n  expect(result.current.count).toBe(1);\n});\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/testing-portals":{"title":"Testing React portals","content":"\nGiven that we have a simple Modal component:\n\n```ts\nimport { useRef, useLayoutEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nlet modalRoot = document.getElementById(\"modal-root\");\nif (!modalRoot) {\n  modalRoot = document.createElement(\"div\");\n  modalRoot.setAttribute(\"id\", \"modal-root\");\n  document.body.appendChild(modalRoot);\n}\n\nfunction Modal({ children }): ReactElement {\n  const el = useRef(document.createElement(\"div\"));\n  useLayoutEffect(() =\u003e {\n    const currentEl = el.current;\n    modalRoot.appendChild(currentEl);\n    return () =\u003e modalRoot.removeChild(currentEl);\n  }, []);\n  return createPortal(children, el.current);\n}\n\nexport { Modal };\n```\n\nWe can test if `Modal` shows the `children` like that:\n\n```tsx\nimport * as React from \"react\";\nimport { render, within } from \"@testing-library/react\";\nimport { Modal } from \"../modal\";\n\ntest(\"modal shows the children\", () =\u003e {\n  render(\n    \u003cModal\u003e\n      \u003cdiv data-testid=\"test\" /\u003e\n    \u003c/Modal\u003e,\n  );\n  const { getByTestId } = within(document.getElementById(\"modal-root\"));\n  expect(getByTestId(\"test\")).toBeInTheDocument();\n});\n```\n\nThe `getByTestId` by default is bound to `document.body`, so it's available everywhere. Using `within` allows us to scope `getByTestId` down to the particular DOM node.\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/jest/testing-redux":{"title":"Testing Redux","content":"## Redux store setup\n\nWe have the code to be tested as follows:\n\n```tsx\n// redux-reducer.tsx\nconst initialState = { count: 0 };\n\nconst reducer = (state = initialState, action) =\u003e {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        count: state.count + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        count: state.count - 1,\n      };\n    default:\n      return state;\n  }\n};\n\nexport { reducer };\n```\n\n```tsx\n// redux-store.tsx\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { reducer } from \"./redux-reducer\";\n\nconst store = configureStore({ reducer });\n\nexport { store };\n```\n\n```tsx\n// redux-counter.tsx\nimport * as React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Counter() {\n  const count = useSelector((state) =\u003e state.count);\n  const dispatch = useDispatch();\n  const increment = () =\u003e dispatch({ type: \"INCREMENT\" });\n  const decrement = () =\u003e dispatch({ type: \"DECREMENT\" });\n  return (\n    \u003cdiv\u003e\n      \u003ch2\u003eCounter\u003c/h2\u003e\n      \u003cdiv\u003e\n        \u003cbutton onClick={decrement}\u003e-\u003c/button\u003e\n        \u003cspan aria-label=\"count\"\u003e{count}\u003c/span\u003e\n        \u003cbutton onClick={increment}\u003e+\u003c/button\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n  );\n}\n\nexport { Counter };\n```\n\n## Testing Redux Connected components\n\nWe need to wrap the component in `Provider` with a store associated with it:\n\n```tsx\nimport * as React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Counter } from \"../redux-counter\";\nimport { store } from \"../redux-store\";\n\ntest(\"can render with `redux` with defaults\", async () =\u003e {\n  render(\n    \u003cProvider store={store}\u003e\n      \u003cCounter /\u003e\n    \u003c/Provider\u003e,\n  );\n  await userEvent.click(screen.getByText(\"+\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"1\");\n});\n\ntest(\"can render with redux with custom initial state\", async () =\u003e {\n  const customInitialStateStore = configureStore({\n    reducer,\n    preloadedState: { count: 3 },\n  });\n  render(\n    \u003cProvider store={customInitialStateStore}\u003e\n      \u003cCounter /\u003e\n    \u003c/Provider\u003e,\n  );\n  await userEvent.click(screen.getByText(\"-\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"2\");\n});\n```\n\nThe cool part is that we're testing our application store as well as the component that's using this store, in integration.\n\nIn tests themselves, we only interact with the component itself, as it is not using Redux at all (redux as an implementation detail), so if we were to migrate away from Redux to some other state management solution, we would need minimum updates to our tests.\n\nIt's also useful to create a custom render function for testing:\n\n```tsx\nimport * as React from \"react\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport { render as rtlRender, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\nimport { Counter } from \"../redux-counter\";\nimport { reducer } from \"../redux-reducer\";\n\nfunction render(\n  ui,\n  {\n    initialState,\n    store = configureStore({ reducer, preloadedState: initialState }),\n    ...renderOptions\n  } = {},\n) {\n  function Wrapper({ children }) {\n    return \u003cProvider store={store}\u003e{children}\u003c/Provider\u003e;\n  }\n  return {\n    ...rtlRender(ui, {\n      wrapper: Wrapper,\n      ...renderOptions,\n    }),\n    store,\n  };\n}\n\ntest(\"can increment the value\", async () =\u003e {\n  render(\u003cCounter /\u003e);\n  await userEvent.click(screen.getByText(\"+\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"1\");\n});\n\ntest(\"can decrement the value\", async () =\u003e {\n  render(\u003cCounter /\u003e, {\n    initialState: { count: 3 },\n  });\n  await userEvent.click(screen.getByText(\"-\"));\n  expect(screen.getByLabelText(/count/i)).toHaveTextContent(\"2\");\n});\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/mocking":{"title":"Mocking","content":"\nMocking is used to enable testing modules that depend (as in _dependency_) on another modules, that we don't want to _really_ use, e.g. credit card service.\n\nWe may not want to do any requests with a credit card service, so we can mock it (btw making its behavior [[deterministic]]).\n\n## Monkey patching\n\nMonkey patching is the most naive (and limited) approach to mocking in JS. Basically it's overriding an object property (e.g. `utils.getWinner()`) in the test.\n\n```ts\nconst assert = require(\"assert\");\nconst thumbWawr = require(\"../thumbwar\");\nconst utils = require(\"../utils\"); // `utils` is the module we want to mock\n\nconst originalGetWinner = utils.getWinner; // saving the original implementation for cleanup\nutils.getWinner = (p1, p2) =\u003e p1; // here we make sure `.getWinner` will always ensure the first player wins\n\nconst winner = thumbWar(\"Kent C. Dodds\", \"Ken Wheeler\");\nassert.strictEqual(winner, \"Kent C. Dodds\"); // PASS\n\nutils.getWinner = originalGetWinner; // cleanup\n```\n\n\u003e [!danger] In ES modules monkey patching does not work.\n\n### Cleanup\n\nImportant thing in testing is to clean up after the mocking in the test case, so the other cases may use the original module again or mock it in a different way.\n\nIn this test case we reassign the real function, exported from the `utils.ts` back to `getWinner`.\n\n## Ensuring fns are called properly with mocks\n\nWhen writing tests and mocking dependencies, we want to verify that the function was called correctly, by tracking how often the function was called and what arguments it was called with. This is to ensure the usage of `utils.getWinner` in `thumbWar` implementation is correct.\n\nTo do that we may use `jest.fn` _mock function_. It keeps track the parameters and how many it was called.\n\n```ts\nutils.getWinner = jest.fn((p1, p2) =\u003e p1);\n\nexpect(utils.getWinner).toHaveBeenCalledTimes(2);\nexpect(utils.getWinner).toHaveBeenCalledWith(\"Kent C. Dodds\", \"Ken Wheeler\");\nexpect(utils.getWinner).toHaveBeenNthCalledWith(\n  1,\n  \"Kent C. Dodds\",\n  \"Ken Wheeler\",\n);\nexpect(utils.getWinner).toHaveBeenNthCalledWith(\n  2,\n  \"Kent C. Dodds\",\n  \"Ken Wheeler\",\n);\n```\n\n## `jest.fn`\n\n`jest.fn` internally is a function that has some nice properties for use:\n\n- `mock`\n  - `calls` - an array that holds all of the args that the function was called with\n\nLast 3 assertions could be rewritten as one:\n\n```ts\nexpect(utils.getWinner.mock.calls).toEqual([\n  [\"Kent C. Dodds\", \"Ken Wheeler\"],\n  [\"Kent C. Dodds\", \"Ken Wheeler\"],\n]);\n```\n\nThis could be implemented this way:\n\n```ts\ntype MockFnType = { mock: { calls: any[] } };\n\nfunction fn(impl) {\n  const mockFn: MockFnType = (...args) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(args);\n  };\n  mockFn.mock = { calls: [] }; // this implementation saves each call in the array\n  return mockFn;\n}\n\n// usage\nutils.getWinner = fn((p1, p2) =\u003e p1);\n```\n\n## `jest.spyOn`\n\nWe can use `jest.spyOn` to avoid keeping track of the original implementation (`const originalGetWinner = utils.getWinner`) and cleaning up after the test case (`utils.getWinner = originalGetWinner`) on our own.\n\n```ts\njest.spyOn(utils, \"getWinner\"); // spying on the original implementation\nutils.getWinner.mockImplementation((p1, p2) =\u003e p2);\n\nutils.getWinner.mockRestore(); // cleanup\n```\n\nThis could be implemented this way:\n\n```ts\ntype MockFnType = {\n  mock: { calls: any[] };\n  mockImplementation: (any) =\u003e any;\n};\n\nfunction fn(impl = (args: any[]) =\u003e {}) {\n  const mockFn: MockFnType = (...args: any[]) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(args);\n  };\n  mockFn.mock = { calls: [] };\n  mockFn.mockImplementation = (newImpl) =\u003e (impl = newImpl); // saving the mocked implementation\n  return mockFn;\n}\n\nfunction spyOn(obj: any, property: string) {\n  const originalProperty = obj[property]; // track original value, function\n\n  obj[property] = fn();\n  obj[property].mockRestore = () =\u003e (obj[property] = originalProperty); // adding a way to \"release the mock\"\n}\n```\n\nUp to this point we still were doing something only just slightly more sophisticated to [[course-notes/testing-javascript/mocking#Monkey patching|monkey patching]]. It works only because we're using CommonJS. In ES modules monkey patching does not work.\n\n## `jest.mock`\n\n`jest.mock` returns a mocked implementation of a whole module.\n\n```ts\njest.mock('../utils', () =\u003e { // first arg: relative path to the mocked module\n  // second arg: module factory function\n  return {\n      getWinner: jest.fn((p1, p2) =\u003e p1);\n  }\n});\n\n// cleanup\nutils.getWinner.mockReset();\n```\n\n`.mockReset()` will¬†reset our mock function to the initial state clearing out the `calls`.\n\n`jest.mock` works, because Jest is in control of the whole module system.\n\n\u003e [!tip] Jest hoists the `jest.mock` call to the top of the file, before imports.\n\u003e\n\u003e We don't have to do it manually.\n\nThis is how we can implement it on our own by using `require.cache`.\n\n```ts\nconst utilsPath = require.resolve(\"../utils\");\n\ntype MockFnType = {\n  mock: { calls: any[] };\n  mockImplementation: (any) =\u003e any;\n};\n\nfunction fn(impl = (...args: any[]) =\u003e {}) {\n  const mockFn: MockFnType = (...args: any[]) =\u003e {\n    mockFn.mock.calls.push(args);\n    return impl(...args);\n  };\n  mockFn.mock = { calls: [] };\n  mockFn.mockImplementation = (newImpl) =\u003e (impl = newImpl);\n  return mockFn;\n}\n\n// @ts-ignore missing properties\nrequire.cache[utilsPath] = {\n  id: utilsPath,\n  filename: utilsPath,\n  loaded: true,\n  exports: {\n    getWinner: fn((p1, p2) =\u003e p1),\n  },\n};\n\ndelete require.cache[utilsPath]; // cleanup\n```\n\nThis is something similar, yet simplified version of what Jest is doing.\n\n## Mocking a module shared across the codebase\n\nUse `__mocks__` directory.\n\n```sh\n$ tree\n‚îú‚îÄ‚îÄ __mocks__\n‚îÇ   ‚îî‚îÄ‚îÄ utils.ts\n‚îî‚îÄ‚îÄ utils.ts\n```\n\nThen in test file:\n\n```ts\njest.mock(\"../utils\");\n```\n\n`jest` knows to pick up the path from __mocks__ directory. \n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/development/testing-javascript/static-analysis":{"title":"Static Analysis","content":"\n*Static analysis*¬†is a method of debugging that is done by automatically examining the source code **without having to execute the program** with tools like `eslint`, `prettier`, `typescript`, `husky`.\n\n## ESLint\n\n- use `ESLint` extension (by Dirk Baeumer) for VS Code\n  - `‚åò + .`¬†provides hints on how to fix the issues\n- `eslint` provides a set of recommended rules that can be _extended_:\n\n```json\n// .eslintrc\n{\n  \"extends\": [\"eslint:recommended\" /* another extension */],\n  \"rules\": {\n    // overrides to extended configurations\n  }\n}\n```\n\n- instead of using `.eslintignore` which is oftenly exactly the same as `.gitignore`, add the flag to `npm script` :\n  - `eslint --ignore-path .gitignore .`\n\n## Prettier\n\n- `--ignore-path .gitignore` is supported in Prettier as well\n- there's a Prettier [Playground](https://prettier.io/playground) in which we can experiment with the configuration and save it to `.prettierrc`\n- use Prettier extension (by Esben Petersen) for VSCode with these options:\n  - `editor.defaultFormatter: \"esbenp.prettier-vscode\"`\n  - `editor.formatOnSave: true`\n- disable unnecessary ESLint rules with `eslint-config-prettier` extension to make sure Prettier and ESLint won't clash\n- `prettier` has a `--list-different` flag used when you want to throw an `Error` if the formatting sucks\n\n## `yarn`\n\n```json\n{\n  \"scripts\": {\n    \"prettier\": \"prettier --ignore-path .gitignore \",\n    \"format\": \"npm run prettier -- --write\"\n    /** \n    `--` makes yarn to use the parameters of \n    `prettier` script without rewriting them \n    effectively making the `format` script: \n    \n    \"format\": \"prettier --ignore-path .gitignore --write\" */\n  }\n}\n```\n\n## TypeScript tips\n\n- **use TypeScript**, at least for types analysis (if you can't for compiling for some reason)\n- use `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` for `*.ts(x)` files\n\n## Husky\n\n- use `precommit` hooks to statically analyze the codebase\n- Husky can be integrated with `lint-staged` for those who don't use editor with Prettier/ESLint plugins\n\n## `npm-run-all`\n\n`npm-run-all` is a tool that allows to run `npm` scripts in parallel:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"/* ... */\",\n    \"check-format\": \"/* ... */\",\n    \"check-types\": \"/* ... */\",\n    \"lint\": \"/* ... */\",\n    \"validate\": \"npm-run-all check-types check-format lint build\" // \u003c--\n  }\n}\n```\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/linux/":{"title":"Linux stuff","content":"","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/linux/pocketchip/":{"title":"Pocket C.H.I.P","content":"I've bought the [Pocket C.H.I.P.](https://shop.pocketchip.co/collections/frontpage/products/pocket-c-h-i-p-new) device recently for learning purposes. And to have some fun.\n\nPocket C.H.I.P. is a portable, battery-powered Linux computer with a 480 x 272 touchscreen and something that resembles a QWERTY keyboard. It has the potential of Raspberry Pi, and it comes with a Debian-based OS along with a custom launcher and apps. \n\nThing is the C.H.I.P. is kinda obsolete (the company that made it, Next Thing Co., is now defunct), and it may be intimidating at first. I am slowly getting to know the device better, configuring it and figuring out what can I use it for. You may get something out of mine notes if you have/would like to have a device like this. \n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/linux/pocketchip/packages-and-ssh":{"title":"Package manager and SSH","content":"## Setting up package manager\nThe Next Thing Co.'s package repository is dead for a long time, but one guy still mirrors them.\n\nYou can refer to [this page](http://chip.jfpossibilities.com/chip/debian/) to make the package manager work. Don't forget to `sudo apt-get update` (I wouldn't risk `upgrade` though). \n\n## Setting up `ssh`\nTo install and enable SSH:\n```sh\nsudo apt-get install openssh-server\nsudo systemctl enable ssh.socket\n```\n\u003e You need `sudo` to use commands like `ifconfig`, `shutdown`, `reboot`. Without that **they won't even show up** üò≤\n\nReboot, then check the IP using `sudo ifconfig` and issue `ssh chip@\u003cip\u003e` on another host. By default the credentials are `chip`/`chip`.\n\n## Packages\nRight after setting up package manager and SSH access, I've installed these packages to make my life a bit easier.\n- `vim` - instead of quirky `vi`\n- `mc` - Midnight Commander is a must for me\n\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/linux/pocketchip/webbrowser":{"title":"Installing Web Browser","content":"\nBy default, Pocket C.H.I.P. is packed with `firefox-esr`, but right after starting it (which itself took, like, 30sec) the first tab crashed immediately, so probably it's not the way to go.\n\nThere's also something called `surf`, but it looks like it does not have any functionalities apart from displaying something, somehow.\n\n## Installing and configuring `dwb`\n![](digital-garden/assets/dwb_1.png)\n\n`dwb` is a small, keyboard-driven browser based on WebKit, that I just heard of. Unlike `firefox-esr` it starts in few seconds and has a decent performance. It looks like Opera Mini back in 2006, which is perfect for a device like this. You can install it with:\n\n```sh\nsudo apt install dwb\n```\n\nBy default, it will open webpages in _desktop mode_, but we can enforce mobile versions by editing `~/.config/dwb/settings`:\n\n```\ndefault-height=272\ndefault-width=420\nuser-agent=Mozilla/5.0 (Linux; U; Android 4.0.3; en-us) AppleWebKit/999+ (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\n```\n\n## Adding `dwb` to home screen\nTo make changes to C.H.I.P.s home screen, you need to edit `/usr/share/pocket-home/config.json`. There's `pages.items` array that defines what icons to show in the home screen (up to 6 of them). I've replaced the _Get help_ icon with:\n\n```json\n{\n  \"name\": \"Web Browser\",\n  \"icon\": \"appIcons/webbrowser.png\",\n  \"shell\": \"dwb\"\n},\n```\nAlso, you need to restart `pocket-home` by killing it:\n\n```sh\nskill pocket-home\n```\n(I had also to restart the device once, as it didn't start again). Now it looks like this: \n![](digital-garden/assets/pockethome_1.png)\n\n## Using `dwb`\n- `ctrl + q` - quit\n- `o` - open URL\n- `j / ‚Üë` - scroll up\n- `k / ‚Üì` - scroll down\n- `h` - go back\n- `l` - go forward\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/linux/screenshots-via-ssh":{"title":"Screenshots via SSH","content":"\nTo take a screenshot of another X session running:\n\n```sh\nDISPLAY=:0 scrot\n```\n\nTo download the screenshot via `scp`:\n\n```sh\nscp username@hostname:/path/to/remote/file /path/to/local/file\n```\n\nUseful with [[linux/pocketchip/|Pocket C.H.I.P.]]\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/reading/":{"title":"Reading","content":"Here's the **absolutely incomplete** list of what I've read so far. Sometimes with summary and booknotes.\n\n## Currently reading \n- üì± [The Pentester's Blueprint](https://www.amazon.com/Pentester-BluePrint-Your-Guide-Being/dp/1119684307) - Phillip L. Wylie, Kim Crawley\n\n## 2022\n- üéß [Deep Work](https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692) - Cal Newport - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üì± [Programowanie na Autopilocie](https://pna.zautomatyzowani.pl/) üáµüá± - Adam Gospodarczyk - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üì± [Codzienno≈õƒá¬†na Autopilocie](https://codziennosc.zautomatyzowani.pl/) üáµüá± - Adam Gospodarczyk - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üì± [[reading/notes/kaizen|One Small Step Can Change Your Life: The Kaizen Way]] üáµüá± - Robert Maurer - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n\n## 2021\n\n- üéß [Essentialism: The Disciplined Pursuit of Less](https://www.amazon.com/Essentialism-Disciplined-Pursuit-Greg-McKeown/dp/0804137382) - Greg McKeown - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üéß [Ego is the Enemy](http://egoistheenemy.com) - Ryan Holiday - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üéß [The Checklist Manifesto](https://www.amazon.com/The-Checklist-Manifesto-audiobook/dp/B0031Q9ZWY) - Atul Gawande - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üì± [[reading/notes/lifechanging-magic-of-tidying-up|The Life-changing Magic of Tidying Up]] - Marie Kondo - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n\n## 2020\n\n- üì± [Manhood: How to Be a Better Man-or Just Live with One](https://www.amazon.com/Manhood-Better-Man-Just-Live-ebook/dp/B00H6JHR5E) - Terry Crews - ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n- üìï [Create or Hate](https://www.amazon.com/Create-Hate-Successful-People-Things/dp/0995404445/) üáµüá± - Dan Norris - ‚≠êÔ∏è‚≠êÔ∏è\n\nüì± - eBook | üéß - audiobook | üìï - paperback | üáµüá± - read in Polish\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/reading/notes/kaizen":{"title":"Filozofia Kaizen. Ma≈Çymi krokami ku doskona≈Ço≈õci üáµüá±","content":"By Robert Maurer. 3/5.\n\n\u003e An introduction to the method of small steps. Too long for such a tiny topic. Wasn't as informative as I thought. \n\n\n## Innowacja\n\nS≈Çowa _innowacja_ u≈ºywa siƒô powszechnie jako _dokonanie prze≈Çomu_. W biznesie - _drastyczna zmiana_ (kt√≥ra w idealnych warunkach trwa kr√≥tko, wywo≈ÇujƒÖc ogromne zmiany jednocze≈õnie; szokujƒÖca, radykalna zmiana), np.\n\n- masowe zwolnienie (trwa kr√≥tko), nag≈Ça konieczno≈õƒá restrukturyzacji\n- zainwestowanie hajsu w startup (trwa kr√≥tko), ogromny zysk\n  (ale te≈º poza biznesem)\n- rzucanie na≈Çogu _cold-turkey_\n- radykalny plan na pozbycie siƒô d≈Çugu\n\nRadykalne zmiany mogƒÖ¬†spowodowaƒá¬†s≈Çomiany zapa≈Ç.\n\n## _kaizen_\n\nW biznesie: Przeciwie≈Ñstwo [[books/book/kaizen#Innowacja|innowacji]]. Dos≈Çownie: metoda ustawicznego poprawiania procesu procesu zarzƒÖdzania i produkcji na ka≈ºdym jego szczeblu, just-in-time.\n\n- Ka≈ºdy pracownik mo≈ºe zg≈Çosiƒá pomys≈Ç na poprawienie procesu\n- Bez oceniania\n  W ≈ºyciu: W miarƒô wygodne, drobne kroki w stronƒô¬†rozwoju. _Metoda ma≈Çych krok√≥w_\n\n\u003e \"Nawet najd≈Çu≈ºsza podr√≥≈º zaczyna siƒô od jednego kroku\".  \n\u003e ‚ÄîLao Cy\n\n## Dlaczego Kaizen?\n\nZmiany z dnia na dzie≈Ñ sƒÖ drobne i wykonalne niemal bez wysi≈Çku (sprzyjajƒÖce ≈õrodowisko). W d≈Çugim czasie doprowadzajƒÖ¬†do ogromnej zmiany.\n\nMa≈Çe kroki kaizen:\n\n- wy≈ÇƒÖczajƒÖ/oszukujƒÖ mechanizm lƒôku (walka/ucieczka) przed ogromnymi zmianami\n  - mechanizm lƒôku: ≈õr√≥dm√≥zgowie-\u003ecia≈Ço migda≈Çowate; reakcja walki lub ucieczki, uruchamiany gdy chcemy nagle wdro≈ºyƒá zmianƒô ([[books/book/kaizen#Innowacja|innowacjƒô]]).\n    - Nag≈Ça zmiana zawsze wywo≈Çuje strach\n    - Reakcja m√≥zgu jest automatyczna\n      - bardziej ≈õwiadoma czƒô≈õƒá¬†m√≥zgu (kora m√≥zgowa) mo≈ºe zostaƒá _zablokowana_\n- stymulujƒÖ racjonalne podej≈õcie i tw√≥rcze my≈õlenie\n- tworzƒÖ nowe po≈ÇƒÖczenia nerwowe budujƒÖc jednocze≈õnie nowe nawyki\n- zaspokajajƒÖ potrzebƒô by _i≈õƒá do przodu_ i os≈ÇabiajƒÖ stres\n- wysi≈Çek jest niemal niezauwa≈ºalny\n  - zw≈Çaszcza gdy wykonanie zadania jest przyjemne i powoduje dumƒô\n\n## Oczekuj strachu\n\nStrach ostrzega przed wyzwaniem, oznacza ambicjƒô, wzmacnia nadziejƒô. Im wiƒôcej odczuwamy strachu, tym bardziej siƒô o co≈õ troszczymy.\n\nOczekujƒÖc strachu mo≈ºesz podej≈õƒá¬†do problemu na spokojnie.\n\n## Ma≈Çe pytania\n\nM√≥zg uwielbia pytania. Pytania typu \"jak mam schudnƒÖƒá¬†25kg w 2 tygodnie\" sƒÖ¬†trudne i budzƒÖ ogromny lƒôk. PytajƒÖc **\"jakie najmniejsze kroki mogƒô¬†podjƒÖƒá by poprawiƒá swoje zdrowie?\"** tego lƒôku nie budzƒÖ:\n\n- co mogƒô robiƒá 5 minut dziennie aby poprawiƒá sw√≥j bud≈ºet/zdrowie/relacje?\n\nPo czasie m√≥zg zacznie odpowiadaƒá skutecznymi pomys≈Çami - cia≈Ço migda≈Çowate spoczywa, a kora m√≥zgowa mo≈ºe siƒô¬†wykazaƒá.\n\nWymagajƒÖ¬†spokoju i cierpliwo≈õci. Nale≈ºy zadawaƒá¬†sobie pytania regularnie, tak d≈Çugo jak jest to konieczne aby m√≥zg odpowiedzia≈Ç.\n\n- tracimy kontrolƒô nad samym procesem zmiany i nie mo≈ºemy okre≈õliƒá momentu w kt√≥rym osiƒÖgneli≈õmy cel, tak jak nie mo≈ºemy powiedzieƒá **kiedy** opanowali≈õmy jazdƒô samochodem czy grƒô na gitarze\n\nNale≈ºy pytaƒá o pozytywy (zamiast _dlaczego jestem taki gruby?_ zapytaƒá¬†*co ma≈Çego mi siƒô dzi≈õ w sobie podoba?*).\n\nMa≈Çe pytania mogƒÖ [[quotes/robert-maurer-on-humour|wydawaƒá¬†siƒô¬†≈õmieszne]], ale przynajmniej nie wzbudzajƒÖ negatywnej reakcji, lƒôku.\n\nZnakiem, ≈ºe mo≈ºna i≈õƒá dalej, jest wykonywanie poprzedniego kroku automatycznie, bez wysi≈Çku i nawet z przyjemno≈õciƒÖ.\n\n### Przyk≈Çady\n\n- Perry Spencer - mikrofal√≥wka\n  - zostawi≈Ç batonika obok radaru\n  - zapyta≈Ç \"Dlaczego radar stopi≈Ç batonika\"\n  - zadawa≈Ç kolejne ma≈Çe pytania\n  - mikrofal√≥wka\n- kogo mogƒô poprosiƒá o pomoc?\n- w jaki jak najmniejszy spos√≥b mogƒô poprawiƒá swojƒÖ dietƒô?\n- co mogƒô zrobiƒá¬†aby choƒá¬†odrobinƒô¬†poprawiƒá swoje relacje z klientem?\n- jakƒÖ jednƒÖ rzeczƒÖ m√≥j mƒÖ≈º mnie uszczƒô≈õliwia?\n- co mogƒô zrobiƒá aby w ma≈Çym stopniu przybli≈ºyƒá siƒô¬†do swojego celu?\n- z kim dawno nie rozmawia≈Çem?\n- co mogƒô dobrego powiedzieƒá o _tej_ osobie?\n\nOdpowiedzi warto zapisywaƒá¬†w [[books/book/kaizen/dziennik|dzienniku]] (lub w innej formie).\n\n## Rze≈∫bienie umys≈Çu\n\nPolega na _udawaniu czynno≈õci_ w wyobra≈∫ni. Przydatne w realizowaniu trudnych przedsiƒôwziƒôƒá.\n\nM√≥zg nie rozumie r√≥≈ºnicy pomiƒôdzy rzeczywisto≈õciƒÖ, a ≈õwiatem wyobra≈∫ni. WykonujƒÖc _trening_ (wyobra≈ºajƒÖc sobie ƒáwiczenie), nadal wp≈Çywam na chemiƒô organizmu. Nadal tworzƒÖ siƒô po≈ÇƒÖczenia neuronowe.\n\n1. Wybierz zadanie (budzƒÖce lƒôk lub dyskomfort)\n2. Zdecyduj przez ile czasu dziennie chcesz _rze≈∫biƒá_ umys≈Ç (w sekundach).\n   - czas musi byƒá¬†dobrany tak, aby nie by≈Ço k≈Çopotliwym wykonaƒá zadanie **codziennie**\n3. Wykonuj ƒáwiczenie w cichym i wygodnym miejscu.\n4. Wyobra≈∫ sobie trudnƒÖ sytuacjƒô, wyzwanie.\n   - \\_Co widzisz? Co Ciƒô otacza? Kto siƒô tam znajduje? Jak wyglƒÖda?\\_\\_ Postaraj siƒô zobaczyƒá wyraz twarzy innych ludzi, ich ubrania, posturƒô.\n   - Wyobra≈ºaj sobie tak≈ºe zapachy, smaki, d≈∫wiƒôki\n5. Wyobra≈∫ sobie wykonywanie zadania\n   - u≈ºyte s≈Çowa, ton g≈Çosu, uczucie trzymania przedmiotu itp.\n6. Wyobra≈∫ sobie pozytywny _outcome_ w reakcji na wykonanie zadania\n   - wystƒÖpienie publiczne -\u003e wpatrzone z ciekawo≈õciƒÖ oczy publiczno≈õci, szmer notowania itd.\n7. Wykonaj zadanie kiedy ju≈º¬†poczujesz siƒô na si≈Çach po mentalnym treningu\n\n## Postanowienia noworoczne - przyk≈Çady\n\n- Zdrowe od≈ºywianie\n  - _wyrzucaj_ pierwszy kƒôs tuczƒÖcej przekƒÖski przez miesiƒÖc\n  - _wyrzucaj_ dwa pierwsze w kolejnym miesiƒÖcu\n  - w trzecim - trzy kƒôsy\n  - skoncentruj siƒô na tym by je≈õƒá¬†wolniej i byƒá¬†bardziej skupionym na jedzeniu\n- ƒÜwiczenia\n  - u≈ºywaj zaciskacza podczas oglƒÖdania TV\n  - wykonuj przez jaki≈õ czas jednƒÖ¬†pompkƒô dziennie\n  - przejd≈∫ jedno piƒôtro piechotƒÖ zamiast u≈ºyƒá¬†windy\n  - zadaj sobie pytanie _jaka ma≈Ça aktywno≈õƒá sprawi mi przyjemno≈õƒá_ (bieganie, rower czy basen)\n- Oszczƒôdzanie\n  - odk≈Çadaj 5z≈Ç dziennie\n    - np. zastƒôpujƒÖc kawƒô mniejszƒÖ\n  - raz dziennie wymy≈õl spos√≥b na wydanie zaoszczƒôdzonych pieniƒôdzy\n    - znajdziesz wiƒôkszƒÖ motywacjƒô¬†by oszczƒôdzaƒá zamiast korzystaƒá¬†z ma≈Çych przyjemno≈õci\n- Produktywno≈õƒá\n  - spisz rzeczy, kt√≥re po≈ºerajƒÖ¬†czas\n  - spisz rzeczy, kt√≥re wg ciebie sƒÖ bardziej produktywne. Ka≈ºdego dnia dodawaj jednƒÖ rzecz do listy\n  - kiedy poczujesz, ≈ºe chcesz wypr√≥buj jednƒÖ z nich w stylu [[books/book/kaizen#_kaizen_|kaizen]]\n\n## RozwiƒÖzywanie problem√≥w\n\nRozwiƒÖzuj problemy jak tylko siƒô pojawiƒÖ\n\n- [[quotes/the-minimalists-on-procrastination|bez prokrastynacji]]\n- jeste≈õmy przyzwyczajeni do ma≈Çych problem√≥w dlatego nie rozwiƒÖzujemy _drobnych niedogodno≈õci_\n  - zgodnie z [[books/book/kaizen/teoria rozbitych okien|teoriƒÖ¬†rozbitych okien]]\n- a przecie≈º sƒÖ mogƒÖ one byƒá¬†*znakami ostrzegawczymi*\n  - zastan√≥w siƒô czy przy ostatnim, _du≈ºym_ problemie pojawi≈Çy siƒô wcze≈õniej jakie≈õ ma≈Çe znaki ostrzegawcze\n  - zastan√≥w siƒô co pomog≈Ço rozwiƒÖzaƒá ten problem\n\nZadawaj sobie [[books/book/kaizen#Ma≈Çe pytania]] aby nauczyƒá siƒô¬†rozwiƒÖzywaƒá¬†problemy zawczasu\n\n- _jaki krok mogƒô podjƒÖƒá, ≈ºeby poprawiƒá¬†sytuacjƒô?_\n- _czy ma≈Çe problemy wykazujƒÖ¬†tendencjƒô¬†do rozwoju?_\n- _czy mogƒô osadziƒá problem w szerszym kontek≈õcie?_\n\nNigdy nie zak≈Çadaj, ≈ºe _systemy_ bƒôdƒÖ¬†dzia≈Çaƒá¬†niezawodnie (je≈ºeli co≈õ mo≈ºe p√≥j≈õƒá¬†≈∫le, to tak siƒô stanie; _prawo Murphy'ego_).\n\nNie reaguj gniewiem. OdpowiadajƒÖc gniewem na ≈ºyciowe wyzwania masz siedmiokrotnie wy≈ºszƒÖ szansƒô zapadniƒôcia na choroby serca ni≈º ludzie prowadzƒÖcy identyczny styl ≈ºycia, lecz o innym temperamencie.\n\nKorzystaj ze swojej wewnƒôtrznej mƒÖdro≈õci. Zareaguj na drobne, przejmujƒÖce uczucie, ≈ºe _co≈õ jest nie tak_.\n\n## Nagrody\n\nNagradzaj siƒô za kolejne kroki.\n\nKorzystaj z **ma≈Çych nagr√≥d**.\n\nMa≈Çe nagrody sƒÖ¬†optymalne¬†poniewa≈º wykorzystujƒÖ jednƒÖ z zasad ludzkiej natury: im wiƒôksza nagroda zewnƒôtrzna, tym wiƒôksza jest te≈º szansa, ≈ºe os≈Çabi lub st≈Çumi wrodzone dƒÖ≈ºenie do doskona≈Ço≈õci.\n\n- wiƒôksze nagryody redukujƒÖ wewnƒôtrznƒÖ¬†motywacjƒô na rzecz zewnƒôtrznej.\n- w ≈õrodowisku korporacyjnym du≈ºe nagrody pieniƒô≈ºne mogƒÖ sugerowaƒá, ≈ºe pracownik jest trybikiem w maszynie i musi byƒá zachƒôcany do dzia≈Çania wy≈ÇƒÖcznie obietnicami osobistego zysku\n- ma≈Çe nagrody sƒÖ¬†formƒÖ¬†uznania i docenienia potrzeby rozwoju i wk≈Çadu osobistego\n\n### Przyk≈Çady\n\n- podziƒôkowanie\n- uczciwa uwaga na sw√≥j temat (np. gdy problemem jest walka z krytycyzmem)\n- ma≈Çe i drobne _prezenty_\n\n## Ma≈Çe momenty\n\n_Kaizen_ wymaga wolniejszego tempa. Dostrzeganie ma≈Çych moment√≥w (zachwyt√≥w nad codzienno≈õciƒÖ) uczy ≈ºycia _tu i teraz_.\n\nWiele prze≈Çomowych dokona≈Ñ wynik≈Ço bezpo≈õrednio z cierpliwej, codziennej obserwacji ma≈Çych zjawisk.\n\n### w zwiƒÖzkach\n\nW szczƒô≈õliwych ma≈Ç≈ºe≈Ñstwach przejawy pozytywnego stosunku do partnera wystƒôpujƒÖ¬†piƒôƒá razy czƒô≈õciej ni≈º przejawy negatywne. Docenia siƒô takie ma≈Çe gesty jak:\n\n- m√≥wienie spokojnym g≈Çosem po otrzymaniu telefonu od partnera\n  - przeciwstawne podenerwowaniu czy szybkiej rozmowie sugerujƒÖcej, ≈ºe telefon przerwa≈Ç wykonywanie wa≈ºnych zada≈Ñ\n- pytanie o szczeg√≥≈Çy z dnia drugiej osoby\n- odk≈Çadanie telefonu, gdy partner wchodzi≈Ç do pokoju\n- wracanie do domu o um√≥wionej godzinie\n  - albo przynajmniej zawiadamianie o planowanym sp√≥≈∫nieniu.\n- koncentrowanie siƒô na zaletach partnera, zamiast na wadach\n\nMa≈Çe momenty pozwalajƒÖ¬†drugiej osobie odczuƒá¬†troskƒô i opiekƒô. Pozwala odczuƒá¬†bycie kochanym za to jakim siƒô jest, a nie za to co siƒô robi.\n\n## Podsumowanie\n\nPiƒôkno kaizen i jego wyzwanie polega jednak na tym, ≈ºe wymaga ono wiary w si≈Çƒô cia≈Ça i umys≈Çu. PodejmujƒÖc ma≈Çe kroki, ustawiasz sw√≥j wewnƒôtrzny kompas na nowy azymut i pozwalasz, by umys≈Ç zajƒÖ≈Ç siƒô resztƒÖ.\n\nZamiast agresywnie zmuszaƒá siƒô do \"wojskowego\" my≈õlenia o zmianie, pozw√≥l, by umys≈Ç dokonywa≈Ç skok√≥w we w≈Çasnym tempie.\n\nPatrz na kaizen jako na proces, kt√≥ry nigdy siƒô nie ko≈Ñczy, postrzegania ≈ºycia w kategoriach okazji do ustawicznego rozwoju, ciƒÖg≈Çego podnoszenia poprzeczki oraz rozwijania w≈Çasnego potencja≈Çu.\n\nBo co mo≈ºe byƒá wa≈ºniejszego w ≈ºyciu ni≈º wyciƒÖganie mo≈ºliwo≈õci z ka≈ºdej mijajƒÖcej chwili?\n","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null},"/reading/notes/lifechanging-magic-of-tidying-up":{"title":"The Life-changing Magic of Tidying Up","content":"By Marie Kondo. **5/5**. [Amazon](https://www.amazon.com/Life-Changing-Magic-Tidying-Decluttering-Organizing/dp/1607747308).\n\n\u003e Lessons from this one (and from [this Netflix's piece](https://www.netflix.com/pl-en/title/80209379)) helped us to _throw out_ ~15 bags of clutter right before our kiddo was born. I had to mentally skip the metaphysical BS though. Remarkable piece.\n\n## How to declutter?\n\u003e [!tip] Tip\n\u003e \n\u003e According to the author it should be enough to do it once in a lifetime, but my experience is that it's good to do it every now and then (like during the moving out, after a kid is born etc.). \n\nDeclutter the whole house at once. Occasional tidying up won't change your relationship with possessions and the clutter will find its way back into your life.\n\nGo through your possessions by category - items belonging to one category may lie in different locations. Put them in one place (e.g. on bed) to see how much of them you have. \n\nGrab every item and decide if you want to keep it. Focus on **its purpose**, **why you have it** and __if it brings you _joy___. If it doesn't serve any purpose and you don't need it anymore, remove it from your life immediately.\n\nDon't listen to music or watch Netflix _in the meantime_ etc. **Focus on cleaning up** not only the space but also the _mental space_ the items take in your life.\n\nDo it in this order:\n- clothes (you may split them into subcategories like jackets, t-shirts if you want) \n- books\n- paperology\n- _komono_ (others)\n- things of emotional value and memorabilia\n\nKeeping this order also makes decluttering easier, allows to gain the momentum and teaches how to make the decisions for later.\n\n### Clothes\nLeave only the clothes you wear. Don't keep the items to _use them at home when no-one looks_. You look.\n\nFold the foldables whenever possible (eg. trousers), hang the clothes that look better hanged (eg. shirts). \n\n\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/IjkmqbJTLBM\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e\n\nKeep the clothes of the same category in the same place. Also, try to keep them from _heavier_ to _lighter_ (in terms of the material and color). \n\nWhenever it's possible, don't divide clothes by seasons - the simpler categorisation, the better. You ain't taxonomist.\n\nMake all the clothes accessible to you at any given moment. Don't keep them in the backs of your closet, it will wrinkle them. And you won't enjoy them oftenly.\n\nKeep the lighter colors in front of the drawer.\n\n### Books\nDon't open them during decluttering. If you think you will read a particular book at some point, you probably won't. The same applies to already read books. Keep only your personal bests. \n\n### Paperology\nYou don't need the papers that are not actionable right now, or you don't have to keep them for external reasons (e.g. tax stuff). Keep the papers in one place, a cabinet, drawer or a binder.\n\nIf there is something you'd like to keep, but it doesn't have to be in physical form for legal reasons, scan it and keep it in the cloud. \n\n### _Komonos_\nDon't keep items _just because_. If they don't bring you joy or don't serve any purpose, just let them go away.\n\n#### Gifts\nIf you don't like something you got, throw it away. The reason for someone to get you something is for you to accept it. It's a way of sharing love. Sometimes you won't enjoy the gift and that's ok. \n\n#### Electronics and cables\nKeep as many cables as you need and nothing more. You don't need cables for that old 2MP camera from 2001.\n\nDon't keep the broken electronics at home. Probably you won't be able to fix them on your own, and if you didn't already, you won't ask anyone to do that for you either. \n\n#### Boxes\nFor most of your belongings you don't need to keep the boxes that they come in. Only in rare occasions lack of the box would affect the price if you'd want to sell the item. \n\n#### Others\nCoins should be in the wallet or the savings jar. The shopping bags (well, every kind of bags) can sit in one of them. Necessary kitchen appliances should be hidden in the drawers. Etc, etc. \n\n### Memorabilia\nJust keep in mind who you are right now, not who you were back then, or who was part of your life in the past. This will tell you what you want to remove. \n\n## How to store things?\nOnce you're done with eliminating, think of where to put the things that you want in your life.\n\nFind a home for every item you have. By the _home of an item_ the author means the its place. If this rule is violated, the house will be cluttered in no time.\n\nThe simpler the storage system, the better. Having a sophisticated solution needs maintenance. Also, the more you need to think of where to put an item, the higher chance of putting it anywhere. \n\nExperts in organizing things are hoarders. \n\nKeep the same items close. Ideally vertically, not stacked. Items at the bottom of the stack are more difficult to get, they disappear from your sight. \n\n## How to buy stuff\nAsk yourself if buying the particular item will bring you the joy. If you can - buy the used items but in a decent condition. \n\nThrow away boxes, remove label tags. Treat your new things **as yours**. \n\n## Day to day decluttering\nSpend few minutes every day to put the items where they belong. Simple as that. You won't have to think about clutter anymore. \n\n## Resources\n- [Talk about this book @ ThePodcast.fm](http://thepodcast.fm/episodes/146)","lastmodified":"2023-01-02T17:08:51.285311264Z","tags":null}}